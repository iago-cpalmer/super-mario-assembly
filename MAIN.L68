000105C6 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 15/08/2024 21:23:21

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by : 
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7              ORG    $1000
00001000                             8              INCLUDE "SPRITES.X68"
00001000                             9  IMGCOINFOUR
00001000= 00000000 00000000 ...     10              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00001040= 00000000 00000000 ...     11              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00001080= 00000000 00000000 ...     12              DC.L    0,0,0,0,0,0,0,4497663,14584,0,0,0,0,0,0,0
000010C0= 00000000 00000000 ...     13              DC.L    0,0,0,0,0,0,0,4497663,14584,0,0,0,0,0,0,0
00001100= 00000000 00000000 ...     14              DC.L    0,0,0,0,0,0,4497663,14584,14584,14584,0,0,0,0,0,0
00001140= 00000000 00000000 ...     15              DC.L    0,0,0,0,0,0,4497663,14584,14584,14584,0,0,0,0,0,0
00001180= 00000000 00000000 ...     16              DC.L    0,0,0,0,0,0,4497663,14584,14584,14584,0,0,0,0,0,0
000011C0= 00000000 00000000 ...     17              DC.L    0,0,0,0,0,0,4497663,14584,14584,14584,0,0,0,0,0,0
00001200= 00000000 00000000 ...     18              DC.L    0,0,0,0,0,0,16777215,14584,14584,14584,0,0,0,0,0,0
00001240= 00000000 00000000 ...     19              DC.L    0,0,0,0,0,0,16777215,14584,14584,14584,0,0,0,0,0,0
00001280= 00000000 00000000 ...     20              DC.L    0,0,0,0,0,0,4497663,14584,14584,14584,0,0,0,0,0,0
000012C0= 00000000 00000000 ...     21              DC.L    0,0,0,0,0,0,4497663,14584,14584,14584,0,0,0,0,0,0
00001300= 00000000 00000000 ...     22              DC.L    0,0,0,0,0,0,4497663,14584,14584,14584,0,0,0,0,0,0
00001340= 00000000 00000000 ...     23              DC.L    0,0,0,0,0,0,4497663,14584,14584,14584,0,0,0,0,0,0
00001380= 00000000 00000000 ...     24              DC.L    0,0,0,0,0,0,0,4497663,14584,0,0,0,0,0,0,0
000013C0= 00000000 00000000 ...     25              DC.L    0,0,0,0,0,0,0,4497663,14584,0,0,0,0,0,0,0
00001400                            26  
00001400                            27  IMGCOINONE
00001400= 00000000 00000000 ...     28              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00001440= 00000000 00000000 ...     29              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00001480= 00000000 00000000 ...     30              DC.L    0,0,0,0,0,0,0,4497663,4497663,0,0,0,0,0,0,0
000014C0= 00000000 00000000 ...     31              DC.L    0,0,0,0,0,0,4497663,4497663,4497663,4497663,0,0,0,0,0,0
00001500= 00000000 00000000 ...     32              DC.L    0,0,0,0,0,4497663,4497663,4497663,4497663,4497663,4497663,0,0,0,0,0
00001540= 00000000 00000000 ...     33              DC.L    0,0,0,0,0,4497663,4497663,16777215,14584,4497663,4497663,0,0,0,0,0
00001580= 00000000 00000000 ...     34              DC.L    0,0,0,0,4497663,4497663,16777215,4497663,4497663,14584,4497663,4497663,0,0,0,0
000015C0= 00000000 00000000 ...     35              DC.L    0,0,0,0,4497663,4497663,16777215,4497663,4497663,14584,4497663,4497663,0,0,0,0
00001600= 00000000 00000000 ...     36              DC.L    0,0,0,0,4497663,4497663,16777215,4497663,4497663,14584,4497663,4497663,0,0,0,0
00001640= 00000000 00000000 ...     37              DC.L    0,0,0,0,4497663,4497663,16777215,4497663,4497663,14584,4497663,4497663,0,0,0,0
00001680= 00000000 00000000 ...     38              DC.L    0,0,0,0,4497663,4497663,16777215,4497663,4497663,14584,4497663,4497663,0,0,0,0
000016C0= 00000000 00000000 ...     39              DC.L    0,0,0,0,4497663,4497663,16777215,4497663,4497663,14584,4497663,4497663,0,0,0,0
00001700= 00000000 00000000 ...     40              DC.L    0,0,0,0,0,4497663,4497663,16777215,14584,4497663,4497663,0,0,0,0,0
00001740= 00000000 00000000 ...     41              DC.L    0,0,0,0,0,4497663,4497663,4497663,4497663,4497663,4497663,0,0,0,0,0
00001780= 00000000 00000000 ...     42              DC.L    0,0,0,0,0,0,4497663,4497663,4497663,4497663,0,0,0,0,0,0
000017C0= 00000000 00000000 ...     43              DC.L    0,0,0,0,0,0,0,4497663,4497663,0,0,0,0,0,0,0
00001800                            44  
00001800                            45  IMGCOINTHREE
00001800= 00000000 00000000 ...     46              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00001840= 00000000 00000000 ...     47              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00001880= 00000000 00000000 ...     48              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000018C0= 00000000 00000000 ...     49              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001900= 00000000 00000000 ...     50              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001940= 00000000 00000000 ...     51              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001980= 00000000 00000000 ...     52              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
000019C0= 00000000 00000000 ...     53              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001A00= 00000000 00000000 ...     54              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001A40= 00000000 00000000 ...     55              DC.L    0,0,0,0,0,0,0,0,16777215,0,0,0,0,0,0,0
00001A80= 00000000 00000000 ...     56              DC.L    0,0,0,0,0,0,0,0,16777215,0,0,0,0,0,0,0
00001AC0= 00000000 00000000 ...     57              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001B00= 00000000 00000000 ...     58              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001B40= 00000000 00000000 ...     59              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001B80= 00000000 00000000 ...     60              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001BC0= 00000000 00000000 ...     61              DC.L    0,0,0,0,0,0,0,0,4497663,0,0,0,0,0,0,0
00001C00                            62  
00001C00                            63  IMGCOINTWO
00001C00= 00000000 00000000 ...     64              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00001C40= 00000000 00000000 ...     65              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00001C80= 00000000 00000000 ...     66              DC.L    0,0,0,0,0,0,0,16777215,14584,0,0,0,0,0,0,0
00001CC0= 00000000 00000000 ...     67              DC.L    0,0,0,0,0,0,0,16777215,14584,0,0,0,0,0,0,0
00001D00= 00000000 00000000 ...     68              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001D40= 00000000 00000000 ...     69              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001D80= 00000000 00000000 ...     70              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001DC0= 00000000 00000000 ...     71              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001E00= 00000000 00000000 ...     72              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001E40= 00000000 00000000 ...     73              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001E80= 00000000 00000000 ...     74              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001EC0= 00000000 00000000 ...     75              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001F00= 00000000 00000000 ...     76              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001F40= 00000000 00000000 ...     77              DC.L    0,0,0,0,0,0,16777215,16777215,16777215,14584,0,0,0,0,0,0
00001F80= 00000000 00000000 ...     78              DC.L    0,0,0,0,0,0,0,16777215,14584,0,0,0,0,0,0,0
00001FC0= 00000000 00000000 ...     79              DC.L    0,0,0,0,0,0,0,16777215,14584,0,0,0,0,0,0,0
00002000                            80  
00002000                            81  IMGFLAGSTICK
00002000= 00000000 00000000 ...     82              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002040= 00000000 00000000 ...     83              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002080= 00000000 00000000 ...     84              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
000020C0= 00000000 00000000 ...     85              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002100= 00000000 00000000 ...     86              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002140= 00000000 00000000 ...     87              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002180= 00000000 00000000 ...     88              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
000021C0= 00000000 00000000 ...     89              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002200= 00000000 00000000 ...     90              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002240= 00000000 00000000 ...     91              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002280= 00000000 00000000 ...     92              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
000022C0= 00000000 00000000 ...     93              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002300= 00000000 00000000 ...     94              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002340= 00000000 00000000 ...     95              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002380= 00000000 00000000 ...     96              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
000023C0= 00000000 00000000 ...     97              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002400                            98  
00002400                            99  IMGFLAGTOP
00002400= 00000000 00000000 ...    100              DC.L    0,0,0,0,0,0,0,729607,729607,0,0,0,0,0,0,0
00002440= 00000000 00000000 ...    101              DC.L    0,0,0,0,0,0,729607,729607,729607,729607,0,0,0,0,0,0
00002480= 00000000 00000000 ...    102              DC.L    0,0,0,0,0,0,729607,729607,729607,729607,0,0,0,0,0,0
000024C0= 00000000 00000000 ...    103              DC.L    0,0,0,0,0,0,0,729607,729607,0,0,0,0,0,0,0
00002500= 00000000 00000000 ...    104              DC.L    0,0,0,0,0,0,0,3070987,3070987,16777215,16777215,16777215,16777215,16777215,16777215,16777215
00002540= 00000000 00000000 ...    105              DC.L    0,0,0,0,0,0,0,3070987,3070987,16777215,16777215,16777215,16777215,16777215,16777215,0
00002580= 00000000 00000000 ...    106              DC.L    0,0,0,0,0,0,0,3070987,3070987,16777215,16777215,16777215,16777215,16777215,0,0
000025C0= 00000000 00000000 ...    107              DC.L    0,0,0,0,0,0,0,3070987,3070987,16777215,16777215,16777215,16777215,0,0,0
00002600= 00000000 00000000 ...    108              DC.L    0,0,0,0,0,0,0,3070987,3070987,16777215,16777215,16777215,0,0,0,0
00002640= 00000000 00000000 ...    109              DC.L    0,0,0,0,0,0,0,3070987,3070987,16777215,16777215,0,0,0,0,0
00002680= 00000000 00000000 ...    110              DC.L    0,0,0,0,0,0,0,3070987,3070987,16777215,0,0,0,0,0,0
000026C0= 00000000 00000000 ...    111              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002700= 00000000 00000000 ...    112              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002740= 00000000 00000000 ...    113              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002780= 00000000 00000000 ...    114              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
000027C0= 00000000 00000000 ...    115              DC.L    0,0,0,0,0,0,0,3070987,3070987,0,0,0,0,0,0,0
00002800                           116  
00002800                           117  IMGGOOMBALFEET
00002800= 00000000 00000000 ...    118              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00002840= 00000000 00000000 ...    119              DC.L    0,0,0,0,0,0,19158,19158,19158,19158,0,0,0,0,0,0
00002880= 00000000 00000000 ...    120              DC.L    0,0,0,0,0,19158,19158,19158,19158,19158,19158,0,0,0,0,0
000028C0= 00000000 00000000 ...    121              DC.L    0,0,0,0,19158,19158,19158,19158,19158,19158,19158,19158,0,0,0,0
00002900= 00000000 00000000 ...    122              DC.L    0,0,0,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,0,0,0
00002940= 00000000 00000000 ...    123              DC.L    0,0,19158,396311,396311,19158,19158,19158,19158,19158,19158,396311,396311,19158,0,0
00002980= 00000000 00004AD6 ...    124              DC.L    0,19158,19158,19158,11912959,396311,19158,19158,19158,19158,396311,11912959,19158,19158,19158,0
000029C0= 00000000 00004AD6 ...    125              DC.L    0,19158,19158,19158,11912959,396311,396311,396311,396311,396311,396311,11912959,19158,19158,19158,0
00002A00= 00004AD6 00004AD6 ...    126              DC.L    19158,19158,19158,19158,11912959,396311,11912959,19158,19158,11912959,396311,11912959,19158,19158,19158,19158
00002A40= 00004AD6 00004AD6 ...    127              DC.L    19158,19158,19158,19158,11912959,11912959,11912959,19158,19158,11912959,11912959,11912959,19158,19158,19158,19158
00002A80= 00004AD6 00004AD6 ...    128              DC.L    19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158
00002AC0= 00000000 00004AD6 ...    129              DC.L    0,19158,19158,19158,19158,11912959,11912959,11912959,11912959,11912959,11912959,19158,19158,19158,19158,0
00002B00= 00000000 00000000 ...    130              DC.L    0,0,0,0,11912959,11912959,11912959,11912959,11912959,11912959,11912959,11912959,0,0,0,0
00002B40= 00000000 00000000 ...    131              DC.L    0,0,0,0,11912959,11912959,11912959,11912959,11912959,11912959,11912959,11912959,0,0,0,0
00002B80= 00000000 00000000 ...    132              DC.L    0,0,0,396311,396311,396311,11912959,11912959,11912959,11912959,11912959,396311,396311,0,0,0
00002BC0= 00000000 00000000 ...    133              DC.L    0,0,0,396311,396311,396311,396311,11912959,11912959,11912959,396311,396311,396311,0,0,0
00002C00                           134  
00002C00                           135  IMGGOOMBARFEET
00002C00= 00000000 00000000 ...    136              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00002C40= 00000000 00000000 ...    137              DC.L    0,0,0,0,0,0,19158,19158,19158,19158,0,0,0,0,0,0
00002C80= 00000000 00000000 ...    138              DC.L    0,0,0,0,0,19158,19158,19158,19158,19158,19158,0,0,0,0,0
00002CC0= 00000000 00000000 ...    139              DC.L    0,0,0,0,19158,19158,19158,19158,19158,19158,19158,19158,0,0,0,0
00002D00= 00000000 00000000 ...    140              DC.L    0,0,0,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,0,0,0
00002D40= 00000000 00000000 ...    141              DC.L    0,0,19158,396311,396311,19158,19158,19158,19158,19158,19158,396311,396311,19158,0,0
00002D80= 00000000 00004AD6 ...    142              DC.L    0,19158,19158,19158,11912959,396311,19158,19158,19158,19158,396311,11912959,19158,19158,19158,0
00002DC0= 00000000 00004AD6 ...    143              DC.L    0,19158,19158,19158,11912959,396311,396311,396311,396311,396311,396311,11912959,19158,19158,19158,0
00002E00= 00004AD6 00004AD6 ...    144              DC.L    19158,19158,19158,19158,11912959,396311,11912959,19158,19158,11912959,396311,11912959,19158,19158,19158,19158
00002E40= 00004AD6 00004AD6 ...    145              DC.L    19158,19158,19158,19158,11912959,11912959,11912959,19158,19158,11912959,11912959,11912959,19158,19158,19158,19158
00002E80= 00004AD6 00004AD6 ...    146              DC.L    19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158,19158
00002EC0= 00000000 00004AD6 ...    147              DC.L    0,19158,19158,19158,19158,11912959,11912959,11912959,11912959,11912959,11912959,19158,19158,19158,19158,0
00002F00= 00000000 00000000 ...    148              DC.L    0,0,0,0,11912959,11912959,11912959,11912959,11912959,11912959,11912959,11912959,0,0,0,0
00002F40= 00000000 00000000 ...    149              DC.L    0,0,0,0,11912959,11912959,11912959,11912959,11912959,11912959,11912959,11912959,0,0,0,0
00002F80= 00000000 00000000 ...    150              DC.L    0,0,0,396311,396311,11912959,11912959,11912959,11912959,11912959,396311,396311,396311,0,0,0
00002FC0= 00000000 00000000 ...    151              DC.L    0,0,0,396311,396311,396311,11912959,11912959,11912959,396311,396311,396311,396311,0,0,0
00003000                           152  
00003000                           153  IMGMARIOINVENCIBLE
00003000= 00000000 00000000 ...    154              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00003040= 00000000 00000000 ...    155              DC.L    0,0,0,0,0,0,9145227,9145227,9145227,9145227,0,0,0,0,0,0
00003080= 00000000 00000000 ...    156              DC.L    0,0,0,11316396,0,9145227,9145227,9145227,9145227,9145227,9145227,0,11316396,0,0,0
000030C0= 00000000 00ACACAC ...    157              DC.L    0,11316396,11316396,11316396,6513507,11316396,6513507,11316396,11316396,6513507,11316396,6513507,11316396,11316396,11316396,0
00003100= 00000000 00ACACAC ...    158              DC.L    0,11316396,11316396,6513507,6513507,11316396,6513507,11316396,11316396,6513507,11316396,6513507,6513507,11316396,11316396,0
00003140= 00000000 00ACACAC ...    159              DC.L    0,11316396,11316396,6513507,6513507,6513507,11316396,11316396,11316396,11316396,6513507,6513507,6513507,11316396,11316396,0
00003180= 00000000 00000000 ...    160              DC.L    0,0,0,6513507,6513507,6513507,6513507,11316396,11316396,6513507,6513507,6513507,6513507,0,0,0
000031C0= 00000000 00000000 ...    161              DC.L    0,0,0,0,6513507,11316396,6513507,6513507,6513507,6513507,11316396,6513507,0,0,0,0
00003200= 00000000 00000000 ...    162              DC.L    0,0,0,0,6513507,11316396,11316396,11316396,11316396,11316396,11316396,6513507,0,0,0,0
00003240= 00000000 00000000 ...    163              DC.L    0,0,0,9145227,9145227,9145227,11316396,11316396,11316396,11316396,9145227,9145227,9145227,0,0,0
00003280= 00000000 00000000 ...    164              DC.L    0,0,6513507,6513507,9145227,9145227,6513507,6513507,6513507,6513507,9145227,9145227,6513507,6513507,0,0
000032C0= 00000000 00000000 ...    165              DC.L    0,0,6513507,6513507,6513507,9145227,9145227,6513507,6513507,9145227,9145227,6513507,6513507,6513507,0,0
00003300= 00000000 00000000 ...    166              DC.L    0,0,6513507,6513507,6513507,9145227,11316396,9145227,9145227,11316396,9145227,6513507,6513507,6513507,0,0
00003340= 00000000 00000000 ...    167              DC.L    0,0,6513507,6513507,6513507,9145227,9145227,9145227,9145227,9145227,9145227,6513507,6513507,6513507,0,0
00003380= 00000000 00000000 ...    168              DC.L    0,0,0,6513507,6513507,9145227,9145227,9145227,9145227,9145227,9145227,6513507,6513507,0,0,0
000033C0= 00000000 00000000 ...    169              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00003400                           170  
00003400                           171  IMGMARIOSMALL
00003400= 00000000 00000000 ...    172              DC.L    0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0,0
00003440= 00000000 00000000 ...    173              DC.L    0,0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0
00003480= 00000000 00000000 ...    174              DC.L    0,0,0,0,25542,25542,25542,5936383,5936383,25542,5936383,0,0,0,0,0
000034C0= 00000000 00000000 ...    175              DC.L    0,0,0,25542,5936383,25542,5936383,5936383,5936383,25542,5936383,5936383,5936383,0,0,0
00003500= 00000000 00000000 ...    176              DC.L    0,0,0,25542,5936383,25542,25542,5936383,5936383,5936383,25542,5936383,5936383,5936383,0,0
00003540= 00000000 00000000 ...    177              DC.L    0,0,0,25542,25542,5936383,5936383,5936383,5936383,25542,25542,25542,25542,0,0,0
00003580= 00000000 00000000 ...    178              DC.L    0,0,0,0,0,5936383,5936383,5936383,5936383,5936383,5936383,5936383,0,0,0,0
000035C0= 00000000 00000000 ...    179              DC.L    0,0,0,0,25542,25542,1585663,25542,25542,25542,0,0,0,0,0,0
00003600= 00000000 00000000 ...    180              DC.L    0,0,0,25542,25542,25542,1585663,25542,25542,1585663,25542,25542,25542,0,0,0
00003640= 00000000 00000000 ...    181              DC.L    0,0,25542,25542,25542,25542,1585663,1585663,1585663,1585663,25542,25542,25542,25542,0,0
00003680= 00000000 00000000 ...    182              DC.L    0,0,5936383,5936383,25542,1585663,5936383,1585663,1585663,5936383,1585663,25542,5936383,5936383,0,0
000036C0= 00000000 00000000 ...    183              DC.L    0,0,5936383,5936383,5936383,1585663,1585663,1585663,1585663,1585663,1585663,5936383,5936383,5936383,0,0
00003700= 00000000 00000000 ...    184              DC.L    0,0,5936383,5936383,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,5936383,5936383,0,0
00003740= 00000000 00000000 ...    185              DC.L    0,0,0,0,1585663,1585663,1585663,0,0,1585663,1585663,1585663,0,0,0,0
00003780= 00000000 00000000 ...    186              DC.L    0,0,0,25542,25542,25542,0,0,0,0,25542,25542,25542,0,0,0
000037C0= 00000000 00000000 ...    187              DC.L    0,0,25542,25542,25542,25542,0,0,0,0,25542,25542,25542,25542,0,0
00003800                           188  
00003800                           189  IMGMARIOSMALLLEFT
00003800= 00000000 00000000 ...    190              DC.L    0,0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0
00003840= 00000000 00000000 ...    191              DC.L    0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0,0
00003880= 00000000 00000000 ...    192              DC.L    0,0,0,0,0,5936383,25542,5936383,5936383,25542,25542,25542,0,0,0,0
000038C0= 00000000 00000000 ...    193              DC.L    0,0,0,5936383,5936383,5936383,25542,5936383,5936383,5936383,25542,5936383,25542,0,0,0
00003900= 00000000 00000000 ...    194              DC.L    0,0,5936383,5936383,5936383,25542,5936383,5936383,5936383,25542,25542,5936383,25542,0,0,0
00003940= 00000000 00000000 ...    195              DC.L    0,0,0,25542,25542,25542,25542,5936383,5936383,5936383,5936383,25542,25542,0,0,0
00003980= 00000000 00000000 ...    196              DC.L    0,0,0,0,5936383,5936383,5936383,5936383,5936383,5936383,5936383,0,0,0,0,0
000039C0= 00000000 00000000 ...    197              DC.L    0,0,0,0,0,0,25542,25542,25542,1585663,25542,25542,0,0,0,0
00003A00= 00000000 00000000 ...    198              DC.L    0,0,0,25542,25542,25542,1585663,25542,25542,1585663,25542,25542,25542,0,0,0
00003A40= 00000000 00000000 ...    199              DC.L    0,0,25542,25542,25542,25542,1585663,1585663,1585663,1585663,25542,25542,25542,25542,0,0
00003A80= 00000000 00000000 ...    200              DC.L    0,0,5936383,5936383,25542,1585663,5936383,1585663,1585663,5936383,1585663,25542,5936383,5936383,0,0
00003AC0= 00000000 00000000 ...    201              DC.L    0,0,5936383,5936383,5936383,1585663,1585663,1585663,1585663,1585663,1585663,5936383,5936383,5936383,0,0
00003B00= 00000000 00000000 ...    202              DC.L    0,0,5936383,5936383,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,5936383,5936383,0,0
00003B40= 00000000 00000000 ...    203              DC.L    0,0,0,0,1585663,1585663,1585663,0,0,1585663,1585663,1585663,0,0,0,0
00003B80= 00000000 00000000 ...    204              DC.L    0,0,0,25542,25542,25542,0,0,0,0,25542,25542,25542,0,0,0
00003BC0= 00000000 00000000 ...    205              DC.L    0,0,25542,25542,25542,25542,0,0,0,0,25542,25542,25542,25542,0,0
00003C00                           206  
00003C00                           207  IMGMARIOWALKONE
00003C00= 00000000 00000000 ...    208              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00003C40= 00000000 00000000 ...    209              DC.L    0,0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0
00003C80= 00000000 00000000 ...    210              DC.L    0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0
00003CC0= 00000000 00000000 ...    211              DC.L    0,0,0,0,0,25542,25542,25542,5936383,5936383,25542,5936383,0,0,0,0
00003D00= 00000000 00000000 ...    212              DC.L    0,0,0,0,25542,5936383,25542,5936383,5936383,5936383,25542,5936383,5936383,5936383,0,0
00003D40= 00000000 00000000 ...    213              DC.L    0,0,0,0,25542,5936383,25542,25542,5936383,5936383,5936383,25542,5936383,5936383,0,0
00003D80= 00000000 00000000 ...    214              DC.L    0,0,0,0,25542,25542,5936383,5936383,5936383,5936383,25542,25542,25542,25542,0,0
00003DC0= 00000000 00000000 ...    215              DC.L    0,0,0,0,0,0,5936383,5936383,5936383,5936383,5936383,5936383,5936383,0,0,0
00003E00= 00000000 00000000 ...    216              DC.L    0,0,0,0,0,25542,25542,25542,25542,1585663,25542,0,5936383,0,0,0
00003E40= 00000000 00000000 ...    217              DC.L    0,0,0,0,5936383,25542,25542,25542,25542,25542,25542,5936383,5936383,5936383,0,0
00003E80= 00000000 00000000 ...    218              DC.L    0,0,0,5936383,5936383,1585663,25542,25542,25542,25542,25542,5936383,5936383,0,0,0
00003EC0= 00000000 00000000 ...    219              DC.L    0,0,0,25542,25542,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0,0
00003F00= 00000000 00000000 ...    220              DC.L    0,0,0,25542,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0,0
00003F40= 00000000 00000000 ...    221              DC.L    0,0,25542,25542,1585663,1585663,1585663,0,1585663,1585663,1585663,0,0,0,0,0
00003F80= 00000000 00000000 ...    222              DC.L    0,0,25542,0,0,0,0,25542,25542,25542,0,0,0,0,0,0
00003FC0= 00000000 00000000 ...    223              DC.L    0,0,0,0,0,0,0,25542,25542,25542,25542,0,0,0,0,0
00004000                           224  
00004000                           225  IMGMARIOWALKONELEFT
00004000= 00000000 00000000 ...    226              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004040= 00000000 00000000 ...    227              DC.L    0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0,0
00004080= 00000000 00000000 ...    228              DC.L    0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0
000040C0= 00000000 00000000 ...    229              DC.L    0,0,0,0,5936383,25542,5936383,5936383,25542,25542,25542,0,0,0,0,0
00004100= 00000000 00000000 ...    230              DC.L    0,0,5936383,5936383,5936383,25542,5936383,5936383,5936383,25542,5936383,25542,0,0,0,0
00004140= 00000000 00000000 ...    231              DC.L    0,0,5936383,5936383,25542,5936383,5936383,5936383,25542,25542,5936383,25542,0,0,0,0
00004180= 00000000 00000000 ...    232              DC.L    0,0,25542,25542,25542,25542,5936383,5936383,5936383,5936383,25542,25542,0,0,0,0
000041C0= 00000000 00000000 ...    233              DC.L    0,0,0,5936383,5936383,5936383,5936383,5936383,5936383,5936383,0,0,0,0,0,0
00004200= 00000000 00000000 ...    234              DC.L    0,0,0,5936383,0,25542,1585663,25542,25542,25542,25542,0,0,0,0,0
00004240= 00000000 00000000 ...    235              DC.L    0,0,5936383,5936383,5936383,25542,25542,25542,25542,25542,25542,5936383,0,0,0,0
00004280= 00000000 00000000 ...    236              DC.L    0,0,0,5936383,5936383,25542,25542,25542,25542,25542,1585663,5936383,5936383,0,0,0
000042C0= 00000000 00000000 ...    237              DC.L    0,0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,25542,25542,0,0,0
00004300= 00000000 00000000 ...    238              DC.L    0,0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,25542,0,0,0
00004340= 00000000 00000000 ...    239              DC.L    0,0,0,0,0,1585663,1585663,1585663,0,1585663,1585663,1585663,25542,25542,0,0
00004380= 00000000 00000000 ...    240              DC.L    0,0,0,0,0,0,25542,25542,25542,0,0,0,0,25542,0,0
000043C0= 00000000 00000000 ...    241              DC.L    0,0,0,0,0,25542,25542,25542,25542,0,0,0,0,0,0,0
00004400                           242  
00004400                           243  IMGMARIOWALKTHREE
00004400= 00000000 00000000 ...    244              DC.L    0,0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0
00004440= 00000000 00000000 ...    245              DC.L    0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0
00004480= 00000000 00000000 ...    246              DC.L    0,0,0,0,0,25542,25542,25542,5936383,5936383,25542,5936383,0,0,0,0
000044C0= 00000000 00000000 ...    247              DC.L    0,0,0,0,25542,5936383,25542,5936383,5936383,5936383,25542,5936383,5936383,5936383,0,0
00004500= 00000000 00000000 ...    248              DC.L    0,0,0,0,25542,5936383,25542,25542,5936383,5936383,5936383,25542,5936383,5936383,5936383,0
00004540= 00000000 00000000 ...    249              DC.L    0,0,0,0,25542,25542,5936383,5936383,5936383,5936383,25542,25542,25542,25542,0,0
00004580= 00000000 00000000 ...    250              DC.L    0,0,0,0,0,0,5936383,5936383,5936383,5936383,5936383,5936383,5936383,0,0,0
000045C0= 00000000 00000000 ...    251              DC.L    0,0,0,25542,25542,25542,25542,1585663,1585663,25542,25542,0,0,0,0,0
00004600= 00000000 005A94FF ...    252              DC.L    0,5936383,5936383,25542,25542,25542,25542,1585663,1585663,1585663,25542,25542,25542,5936383,5936383,5936383
00004640= 00000000 005A94FF ...    253              DC.L    0,5936383,5936383,5936383,0,25542,25542,1585663,5936383,1585663,1585663,1585663,25542,25542,5936383,5936383
00004680= 00000000 005A94FF ...    254              DC.L    0,5936383,5936383,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,25542,0
000046C0= 00000000 00000000 ...    255              DC.L    0,0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,25542,25542,0
00004700= 00000000 00000000 ...    256              DC.L    0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,25542,25542,0
00004740= 00000000 00000000 ...    257              DC.L    0,0,25542,25542,1585663,1585663,1585663,0,0,0,1585663,1585663,1585663,25542,25542,0
00004780= 00000000 00000000 ...    258              DC.L    0,0,25542,25542,25542,0,0,0,0,0,0,0,0,0,0,0
000047C0= 00000000 00000000 ...    259              DC.L    0,0,0,25542,25542,25542,0,0,0,0,0,0,0,0,0,0
00004800                           260  
00004800                           261  IMGMARIOWALKTHREELEFT
00004800= 00000000 00000000 ...    262              DC.L    0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0,0
00004840= 00000000 00000000 ...    263              DC.L    0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0
00004880= 00000000 00000000 ...    264              DC.L    0,0,0,0,5936383,25542,5936383,5936383,25542,25542,25542,0,0,0,0,0
000048C0= 00000000 00000000 ...    265              DC.L    0,0,5936383,5936383,5936383,25542,5936383,5936383,5936383,25542,5936383,25542,0,0,0,0
00004900= 00000000 005A94FF ...    266              DC.L    0,5936383,5936383,5936383,25542,5936383,5936383,5936383,25542,25542,5936383,25542,0,0,0,0
00004940= 00000000 00000000 ...    267              DC.L    0,0,25542,25542,25542,25542,5936383,5936383,5936383,5936383,25542,25542,0,0,0,0
00004980= 00000000 00000000 ...    268              DC.L    0,0,0,5936383,5936383,5936383,5936383,5936383,5936383,5936383,0,0,0,0,0,0
000049C0= 00000000 00000000 ...    269              DC.L    0,0,0,0,0,25542,25542,1585663,1585663,25542,25542,25542,25542,0,0,0
00004A00= 005A94FF 005A94FF ...    270              DC.L    5936383,5936383,5936383,25542,25542,25542,1585663,1585663,1585663,25542,25542,25542,25542,5936383,5936383,0
00004A40= 005A94FF 005A94FF ...    271              DC.L    5936383,5936383,25542,25542,1585663,1585663,1585663,5936383,1585663,25542,25542,0,5936383,5936383,5936383,0
00004A80= 00000000 000063C6 ...    272              DC.L    0,25542,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,5936383,5936383,0
00004AC0= 00000000 000063C6 ...    273              DC.L    0,25542,25542,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0,0
00004B00= 00000000 000063C6 ...    274              DC.L    0,25542,25542,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0
00004B40= 00000000 000063C6 ...    275              DC.L    0,25542,25542,1585663,1585663,1585663,0,0,0,1585663,1585663,1585663,25542,25542,0,0
00004B80= 00000000 00000000 ...    276              DC.L    0,0,0,0,0,0,0,0,0,0,0,25542,25542,25542,0,0
00004BC0= 00000000 00000000 ...    277              DC.L    0,0,0,0,0,0,0,0,0,0,25542,25542,25542,0,0,0
00004C00                           278  
00004C00                           279  IMGMARIOWALKTWO
00004C00= 00000000 00000000 ...    280              DC.L    0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0,0
00004C40= 00000000 00000000 ...    281              DC.L    0,0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0
00004C80= 00000000 00000000 ...    282              DC.L    0,0,0,0,25542,25542,25542,5936383,5936383,25542,5936383,0,0,0,0,0
00004CC0= 00000000 00000000 ...    283              DC.L    0,0,0,25542,5936383,25542,5936383,5936383,5936383,25542,5936383,5936383,5936383,0,0,0
00004D00= 00000000 00000000 ...    284              DC.L    0,0,0,25542,5936383,25542,25542,5936383,5936383,5936383,25542,5936383,5936383,5936383,0,0
00004D40= 00000000 00000000 ...    285              DC.L    0,0,0,25542,25542,5936383,5936383,5936383,5936383,25542,25542,25542,25542,0,0,0
00004D80= 00000000 00000000 ...    286              DC.L    0,0,0,0,0,5936383,5936383,5936383,5936383,5936383,5936383,5936383,0,0,0,0
00004DC0= 00000000 00000000 ...    287              DC.L    0,0,0,0,25542,25542,1585663,25542,25542,25542,0,0,0,0,0,0
00004E00= 00000000 00000000 ...    288              DC.L    0,0,0,25542,25542,25542,25542,1585663,1585663,25542,25542,0,0,0,0,0
00004E40= 00000000 00000000 ...    289              DC.L    0,0,0,25542,25542,25542,1585663,1585663,5936383,1585663,1585663,5936383,0,0,0,0
00004E80= 00000000 00000000 ...    290              DC.L    0,0,0,25542,25542,25542,25542,1585663,1585663,1585663,1585663,1585663,0,0,0,0
00004EC0= 00000000 00000000 ...    291              DC.L    0,0,0,1585663,25542,25542,5936383,5936383,5936383,1585663,1585663,1585663,0,0,0,0
00004F00= 00000000 00000000 ...    292              DC.L    0,0,0,0,1585663,25542,5936383,5936383,1585663,1585663,1585663,0,0,0,0,0
00004F40= 00000000 00000000 ...    293              DC.L    0,0,0,0,0,1585663,1585663,1585663,25542,25542,25542,0,0,0,0,0
00004F80= 00000000 00000000 ...    294              DC.L    0,0,0,0,0,25542,25542,25542,25542,25542,25542,25542,0,0,0,0
00004FC0= 00000000 00000000 ...    295              DC.L    0,0,0,0,0,25542,25542,25542,25542,0,0,0,0,0,0,0
00005000                           296  
00005000                           297  IMGMARIOWALKTWOLEFT
00005000= 00000000 00000000 ...    298              DC.L    0,0,0,0,0,0,1585663,1585663,1585663,1585663,1585663,0,0,0,0,0
00005040= 00000000 00000000 ...    299              DC.L    0,0,0,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,1585663,0,0,0,0
00005080= 00000000 00000000 ...    300              DC.L    0,0,0,0,0,5936383,25542,5936383,5936383,25542,25542,25542,0,0,0,0
000050C0= 00000000 00000000 ...    301              DC.L    0,0,0,5936383,5936383,5936383,25542,5936383,5936383,5936383,25542,5936383,25542,0,0,0
00005100= 00000000 00000000 ...    302              DC.L    0,0,5936383,5936383,5936383,25542,5936383,5936383,5936383,25542,25542,5936383,25542,0,0,0
00005140= 00000000 00000000 ...    303              DC.L    0,0,0,25542,25542,25542,25542,5936383,5936383,5936383,5936383,25542,25542,0,0,0
00005180= 00000000 00000000 ...    304              DC.L    0,0,0,0,5936383,5936383,5936383,5936383,5936383,5936383,5936383,0,0,0,0,0
000051C0= 00000000 00000000 ...    305              DC.L    0,0,0,0,0,0,25542,25542,25542,1585663,25542,25542,0,0,0,0
00005200= 00000000 00000000 ...    306              DC.L    0,0,0,0,0,25542,25542,1585663,1585663,25542,25542,25542,25542,0,0,0
00005240= 00000000 00000000 ...    307              DC.L    0,0,0,0,5936383,1585663,1585663,5936383,1585663,1585663,25542,25542,25542,0,0,0
00005280= 00000000 00000000 ...    308              DC.L    0,0,0,0,1585663,1585663,1585663,1585663,1585663,25542,25542,25542,25542,0,0,0
000052C0= 00000000 00000000 ...    309              DC.L    0,0,0,0,1585663,1585663,1585663,5936383,5936383,5936383,25542,25542,1585663,0,0,0
00005300= 00000000 00000000 ...    310              DC.L    0,0,0,0,0,1585663,1585663,1585663,5936383,5936383,25542,1585663,0,0,0,0
00005340= 00000000 00000000 ...    311              DC.L    0,0,0,0,0,25542,25542,25542,1585663,1585663,1585663,0,0,0,0,0
00005380= 00000000 00000000 ...    312              DC.L    0,0,0,0,25542,25542,25542,25542,25542,25542,25542,0,0,0,0,0
000053C0= 00000000 00000000 ...    313              DC.L    0,0,0,0,0,0,0,25542,25542,25542,25542,0,0,0,0,0
00005400                           314  
00005400                           315  IMGMUSHROOMPWUP
00005400= 00000000 00000000 ...    316              DC.L    0,0,0,0,0,0,4497663,4497663,4497663,4497663,0,0,0,0,0,0
00005440= 00000000 00000000 ...    317              DC.L    0,0,0,0,0,4497663,4497663,4497663,4497663,14584,14584,0,0,0,0,0
00005480= 00000000 00000000 ...    318              DC.L    0,0,0,0,4497663,4497663,4497663,4497663,14584,14584,14584,14584,0,0,0,0
000054C0= 00000000 00000000 ...    319              DC.L    0,0,0,4497663,4497663,4497663,4497663,4497663,14584,14584,14584,14584,14584,0,0,0
00005500= 00000000 00000000 ...    320              DC.L    0,0,4497663,4497663,4497663,4497663,4497663,4497663,4497663,14584,14584,14584,4497663,4497663,0,0
00005540= 00000000 0044A0FF ...    321              DC.L    0,4497663,4497663,14584,14584,14584,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,0
00005580= 00000000 0044A0FF ...    322              DC.L    0,4497663,14584,14584,14584,14584,14584,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,0
000055C0= 0044A0FF 0044A0FF ...    323              DC.L    4497663,4497663,14584,14584,14584,14584,14584,4497663,4497663,4497663,4497663,4497663,14584,14584,4497663,4497663
00005600= 0044A0FF 0044A0FF ...    324              DC.L    4497663,4497663,14584,14584,14584,14584,14584,4497663,4497663,4497663,4497663,4497663,14584,14584,14584,4497663
00005640= 0044A0FF 0044A0FF ...    325              DC.L    4497663,4497663,4497663,14584,14584,14584,4497663,4497663,4497663,4497663,4497663,4497663,4497663,14584,14584,4497663
00005680= 0044A0FF 0044A0FF ...    326              DC.L    4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663,4497663
000056C0= 00000000 0044A0FF ...    327              DC.L    0,4497663,14584,14584,14584,16777215,16777215,16777215,16777215,16777215,16777215,14584,14584,14584,4497663,0
00005700= 00000000 00000000 ...    328              DC.L    0,0,0,0,16777215,16777215,396311,16777215,16777215,396311,16777215,16777215,0,0,0,0
00005740= 00000000 00000000 ...    329              DC.L    0,0,0,0,16777215,16777215,396311,16777215,16777215,396311,4497663,16777215,0,0,0,0
00005780= 00000000 00000000 ...    330              DC.L    0,0,0,0,16777215,16777215,16777215,16777215,16777215,16777215,4497663,16777215,0,0,0,0
000057C0= 00000000 00000000 ...    331              DC.L    0,0,0,0,0,16777215,16777215,16777215,16777215,4497663,16777215,0,0,0,0,0
00005800                           332  
00005800                           333  IMGMSWALKTHREE
00005800= 00000000 00000000 ...    334              DC.L    0,0,0,0,0,0,5727231,5727231,5727231,5727231,5727231,0,0,0,0,0
00005840= 00000000 00000000 ...    335              DC.L    0,0,0,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0
00005880= 00000000 00000000 ...    336              DC.L    0,0,0,0,0,28896,28896,28896,8696831,8696831,28896,8696831,0,0,0,0
000058C0= 00000000 00000000 ...    337              DC.L    0,0,0,0,28896,8696831,28896,8696831,8696831,8696831,28896,8696831,8696831,8696831,0,0
00005900= 00000000 00000000 ...    338              DC.L    0,0,0,0,28896,8696831,28896,28896,8696831,8696831,8696831,28896,8696831,8696831,8696831,0
00005940= 00000000 00000000 ...    339              DC.L    0,0,0,0,28896,28896,8696831,8696831,8696831,8696831,28896,28896,28896,28896,0,0
00005980= 00000000 00000000 ...    340              DC.L    0,0,0,0,0,0,8696831,8696831,8696831,8696831,8696831,8696831,8696831,0,0,0
000059C0= 00000000 00000000 ...    341              DC.L    0,0,0,28896,28896,28896,28896,5727231,5727231,28896,28896,0,0,0,0,0
00005A00= 00000000 0084B3FF ...    342              DC.L    0,8696831,8696831,28896,28896,28896,28896,5727231,5727231,5727231,28896,28896,28896,8696831,8696831,8696831
00005A40= 00000000 0084B3FF ...    343              DC.L    0,8696831,8696831,8696831,0,28896,28896,5727231,8696831,5727231,5727231,5727231,28896,28896,8696831,8696831
00005A80= 00000000 0084B3FF ...    344              DC.L    0,8696831,8696831,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,28896,0
00005AC0= 00000000 00000000 ...    345              DC.L    0,0,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,28896,28896,0
00005B00= 00000000 00000000 ...    346              DC.L    0,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,28896,28896,0
00005B40= 00000000 00000000 ...    347              DC.L    0,0,28896,28896,5727231,5727231,5727231,0,0,0,5727231,5727231,5727231,28896,28896,0
00005B80= 00000000 00000000 ...    348              DC.L    0,0,28896,28896,28896,0,0,0,0,0,0,0,0,0,0,0
00005BC0= 00000000 00000000 ...    349              DC.L    0,0,0,28896,28896,28896,0,0,0,0,0,0,0,0,0,0
00005C00                           350  
00005C00                           351  IMGMSWALKTWO
00005C00= 00000000 00000000 ...    352              DC.L    0,0,0,0,0,5727231,5727231,5727231,5727231,5727231,0,0,0,0,0,0
00005C40= 00000000 00000000 ...    353              DC.L    0,0,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,0
00005C80= 00000000 00000000 ...    354              DC.L    0,0,0,0,28896,28896,28896,8696831,8696831,28896,8696831,0,0,0,0,0
00005CC0= 00000000 00000000 ...    355              DC.L    0,0,0,28896,8696831,28896,8696831,8696831,8696831,28896,8696831,8696831,8696831,0,0,0
00005D00= 00000000 00000000 ...    356              DC.L    0,0,0,28896,8696831,28896,28896,8696831,8696831,8696831,28896,8696831,8696831,8696831,0,0
00005D40= 00000000 00000000 ...    357              DC.L    0,0,0,28896,28896,8696831,8696831,8696831,8696831,28896,28896,28896,28896,0,0,0
00005D80= 00000000 00000000 ...    358              DC.L    0,0,0,0,0,8696831,8696831,8696831,8696831,8696831,8696831,8696831,0,0,0,0
00005DC0= 00000000 00000000 ...    359              DC.L    0,0,0,0,28896,28896,5727231,28896,28896,28896,0,0,0,0,0,0
00005E00= 00000000 00000000 ...    360              DC.L    0,0,0,28896,28896,28896,28896,5727231,5727231,28896,28896,0,0,0,0,0
00005E40= 00000000 00000000 ...    361              DC.L    0,0,0,28896,28896,28896,5727231,5727231,8696831,5727231,5727231,8696831,0,0,0,0
00005E80= 00000000 00000000 ...    362              DC.L    0,0,0,28896,28896,28896,28896,5727231,5727231,5727231,5727231,5727231,0,0,0,0
00005EC0= 00000000 00000000 ...    363              DC.L    0,0,0,5727231,28896,28896,8696831,8696831,8696831,5727231,5727231,5727231,0,0,0,0
00005F00= 00000000 00000000 ...    364              DC.L    0,0,0,0,5727231,28896,8696831,8696831,5727231,5727231,5727231,0,0,0,0,0
00005F40= 00000000 00000000 ...    365              DC.L    0,0,0,0,0,5727231,5727231,5727231,28896,28896,28896,0,0,0,0,0
00005F80= 00000000 00000000 ...    366              DC.L    0,0,0,0,0,28896,28896,28896,28896,28896,28896,28896,0,0,0,0
00005FC0= 00000000 00000000 ...    367              DC.L    0,0,0,0,0,28896,28896,28896,28896,0,0,0,0,0,0,0
00006000                           368  
00006000                           369  IMGMSWALKONE
00006000= 00000000 00000000 ...    370              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006040= 00000000 00000000 ...    371              DC.L    0,0,0,0,0,0,5727231,5727231,5727231,5727231,5727231,0,0,0,0,0
00006080= 00000000 00000000 ...    372              DC.L    0,0,0,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0
000060C0= 00000000 00000000 ...    373              DC.L    0,0,0,0,0,28896,28896,28896,8696831,8696831,28896,8696831,0,0,0,0
00006100= 00000000 00000000 ...    374              DC.L    0,0,0,0,28896,8696831,28896,8696831,8696831,8696831,28896,8696831,8696831,8696831,0,0
00006140= 00000000 00000000 ...    375              DC.L    0,0,0,0,28896,8696831,28896,28896,8696831,8696831,8696831,28896,8696831,8696831,0,0
00006180= 00000000 00000000 ...    376              DC.L    0,0,0,0,28896,28896,8696831,8696831,8696831,8696831,28896,28896,28896,28896,0,0
000061C0= 00000000 00000000 ...    377              DC.L    0,0,0,0,0,0,8696831,8696831,8696831,8696831,8696831,8696831,8696831,0,0,0
00006200= 00000000 00000000 ...    378              DC.L    0,0,0,0,0,28896,28896,28896,28896,5727231,28896,0,8696831,0,0,0
00006240= 00000000 00000000 ...    379              DC.L    0,0,0,0,8696831,28896,28896,28896,28896,28896,28896,8696831,8696831,8696831,0,0
00006280= 00000000 00000000 ...    380              DC.L    0,0,0,8696831,8696831,5727231,28896,28896,28896,28896,28896,8696831,8696831,0,0,0
000062C0= 00000000 00000000 ...    381              DC.L    0,0,0,28896,28896,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,0,0
00006300= 00000000 00000000 ...    382              DC.L    0,0,0,28896,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,0,0
00006340= 00000000 00000000 ...    383              DC.L    0,0,28896,28896,5727231,5727231,5727231,0,5727231,5727231,5727231,0,0,0,0,0
00006380= 00000000 00000000 ...    384              DC.L    0,0,28896,0,0,0,0,28896,28896,28896,0,0,0,0,0,0
000063C0= 00000000 00000000 ...    385              DC.L    0,0,0,0,0,0,0,28896,28896,28896,28896,0,0,0,0,0
00006400                           386  
00006400                           387  IMGMSWALKLEFTTHREE
00006400= 00000000 00000000 ...    388              DC.L    0,0,0,0,0,5727231,5727231,5727231,5727231,5727231,0,0,0,0,0,0
00006440= 00000000 00000000 ...    389              DC.L    0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,0,0,0
00006480= 00000000 00000000 ...    390              DC.L    0,0,0,0,8696831,28896,8696831,8696831,28896,28896,28896,0,0,0,0,0
000064C0= 00000000 00000000 ...    391              DC.L    0,0,8696831,8696831,8696831,28896,8696831,8696831,8696831,28896,8696831,28896,0,0,0,0
00006500= 00000000 0084B3FF ...    392              DC.L    0,8696831,8696831,8696831,28896,8696831,8696831,8696831,28896,28896,8696831,28896,0,0,0,0
00006540= 00000000 00000000 ...    393              DC.L    0,0,28896,28896,28896,28896,8696831,8696831,8696831,8696831,28896,28896,0,0,0,0
00006580= 00000000 00000000 ...    394              DC.L    0,0,0,8696831,8696831,8696831,8696831,8696831,8696831,8696831,0,0,0,0,0,0
000065C0= 00000000 00000000 ...    395              DC.L    0,0,0,0,0,28896,28896,5727231,5727231,28896,28896,28896,28896,0,0,0
00006600= 0084B3FF 0084B3FF ...    396              DC.L    8696831,8696831,8696831,28896,28896,28896,5727231,5727231,5727231,28896,28896,28896,28896,8696831,8696831,0
00006640= 0084B3FF 0084B3FF ...    397              DC.L    8696831,8696831,28896,28896,5727231,5727231,5727231,8696831,5727231,28896,28896,0,8696831,8696831,8696831,0
00006680= 00000000 000070E0 ...    398              DC.L    0,28896,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,8696831,8696831,0
000066C0= 00000000 000070E0 ...    399              DC.L    0,28896,28896,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,0,0
00006700= 00000000 000070E0 ...    400              DC.L    0,28896,28896,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,0
00006740= 00000000 000070E0 ...    401              DC.L    0,28896,28896,5727231,5727231,5727231,0,0,0,5727231,5727231,5727231,28896,28896,0,0
00006780= 00000000 00000000 ...    402              DC.L    0,0,0,0,0,0,0,0,0,0,0,28896,28896,28896,0,0
000067C0= 00000000 00000000 ...    403              DC.L    0,0,0,0,0,0,0,0,0,0,28896,28896,28896,0,0,0
00006800                           404  
00006800                           405  IMGMSWALKLEFTTWO
00006800= 00000000 00000000 ...    406              DC.L    0,0,0,0,0,0,5727231,5727231,5727231,5727231,5727231,0,0,0,0,0
00006840= 00000000 00000000 ...    407              DC.L    0,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,0,0
00006880= 00000000 00000000 ...    408              DC.L    0,0,0,0,0,8696831,28896,8696831,8696831,28896,28896,28896,0,0,0,0
000068C0= 00000000 00000000 ...    409              DC.L    0,0,0,8696831,8696831,8696831,28896,8696831,8696831,8696831,28896,8696831,28896,0,0,0
00006900= 00000000 00000000 ...    410              DC.L    0,0,8696831,8696831,8696831,28896,8696831,8696831,8696831,28896,28896,8696831,28896,0,0,0
00006940= 00000000 00000000 ...    411              DC.L    0,0,0,28896,28896,28896,28896,8696831,8696831,8696831,8696831,28896,28896,0,0,0
00006980= 00000000 00000000 ...    412              DC.L    0,0,0,0,8696831,8696831,8696831,8696831,8696831,8696831,8696831,0,0,0,0,0
000069C0= 00000000 00000000 ...    413              DC.L    0,0,0,0,0,0,28896,28896,28896,5727231,28896,28896,0,0,0,0
00006A00= 00000000 00000000 ...    414              DC.L    0,0,0,0,0,28896,28896,5727231,5727231,28896,28896,28896,28896,0,0,0
00006A40= 00000000 00000000 ...    415              DC.L    0,0,0,0,8696831,5727231,5727231,8696831,5727231,5727231,28896,28896,28896,0,0,0
00006A80= 00000000 00000000 ...    416              DC.L    0,0,0,0,5727231,5727231,5727231,5727231,5727231,28896,28896,28896,28896,0,0,0
00006AC0= 00000000 00000000 ...    417              DC.L    0,0,0,0,5727231,5727231,5727231,8696831,8696831,8696831,28896,28896,5727231,0,0,0
00006B00= 00000000 00000000 ...    418              DC.L    0,0,0,0,0,5727231,5727231,5727231,8696831,8696831,28896,5727231,0,0,0,0
00006B40= 00000000 00000000 ...    419              DC.L    0,0,0,0,0,28896,28896,28896,5727231,5727231,5727231,0,0,0,0,0
00006B80= 00000000 00000000 ...    420              DC.L    0,0,0,0,28896,28896,28896,28896,28896,28896,28896,0,0,0,0,0
00006BC0= 00000000 00000000 ...    421              DC.L    0,0,0,0,0,0,0,28896,28896,28896,28896,0,0,0,0,0
00006C00                           422  
00006C00                           423  IMGMSWALKLEFTONE
00006C00= 00000000 00000000 ...    424              DC.L    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006C40= 00000000 00000000 ...    425              DC.L    0,0,0,0,0,5727231,5727231,5727231,5727231,5727231,0,0,0,0,0,0
00006C80= 00000000 00000000 ...    426              DC.L    0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,0,0,0,0,0
00006CC0= 00000000 00000000 ...    427              DC.L    0,0,0,0,8696831,28896,8696831,8696831,28896,28896,28896,0,0,0,0,0
00006D00= 00000000 00000000 ...    428              DC.L    0,0,8696831,8696831,8696831,28896,8696831,8696831,8696831,28896,8696831,28896,0,0,0,0
00006D40= 00000000 00000000 ...    429              DC.L    0,0,8696831,8696831,28896,8696831,8696831,8696831,28896,28896,8696831,28896,0,0,0,0
00006D80= 00000000 00000000 ...    430              DC.L    0,0,28896,28896,28896,28896,8696831,8696831,8696831,8696831,28896,28896,0,0,0,0
00006DC0= 00000000 00000000 ...    431              DC.L    0,0,0,8696831,8696831,8696831,8696831,8696831,8696831,8696831,0,0,0,0,0,0
00006E00= 00000000 00000000 ...    432              DC.L    0,0,0,8696831,0,28896,5727231,28896,28896,28896,28896,0,0,0,0,0
00006E40= 00000000 00000000 ...    433              DC.L    0,0,8696831,8696831,8696831,28896,28896,28896,28896,28896,28896,8696831,0,0,0,0
00006E80= 00000000 00000000 ...    434              DC.L    0,0,0,8696831,8696831,28896,28896,28896,28896,28896,5727231,8696831,8696831,0,0,0
00006EC0= 00000000 00000000 ...    435              DC.L    0,0,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,28896,28896,0,0,0
00006F00= 00000000 00000000 ...    436              DC.L    0,0,0,0,5727231,5727231,5727231,5727231,5727231,5727231,5727231,5727231,28896,0,0,0
00006F40= 00000000 00000000 ...    437              DC.L    0,0,0,0,0,5727231,5727231,5727231,0,5727231,5727231,5727231,28896,28896,0,0
00006F80= 00000000 00000000 ...    438              DC.L    0,0,0,0,0,0,28896,28896,28896,0,0,0,0,28896,0,0
00006FC0= 00000000 00000000 ...    439              DC.L    0,0,0,0,0,28896,28896,28896,28896,0,0,0,0,0,0,0
00007000                           440  
00007000                           441  -------------------- end include --------------------
00007000                           442              INCLUDE "ANIMATIONSDATA.X68"
00007000                           443  ; ANIMATIONS DATA
00007000= 0000                     444  ANIMFRAME   DC.W    0                       ; GLOBAL FRAME OF ANIMATION
00007002= 0000                     445  ANIMACTI    DC.W    0                       ; CURRENT ACCUMULATED TIME OF FRAME
00007004  =0000000F                446  ANIMTIME    EQU     15                    ; TIME BETWEEN FRAMES OF ANIMATIONS IN HUNDRETHS OF A SECOND
00007004                           447  
00007004                           448  ; ANIMATIONS LIST
00007004                           449  ANIMGOOMBA
00007004= 0002                     450              DC.W    2                       ; NUMBER OF FRAMES
00007006= 00002800                 451              DC.L    IMGGOOMBALFEET          ; FIRST FRAME
0000700A= 00002C00                 452              DC.L    IMGGOOMBARFEET          ; SECOND FRAME
0000700E                           453  ANIMMUSHROOM
0000700E= 0001                     454              DC.W    1
00007010= 00005400                 455              DC.L    IMGMUSHROOMPWUP         ; FIRST FRAME
00007014                           456  ANIMCOIN
00007014= 0004                     457              DC.W    4
00007016= 00001400                 458              DC.L    IMGCOINONE
0000701A= 00001C00                 459              DC.L    IMGCOINTWO
0000701E= 00001800                 460              DC.L    IMGCOINTHREE
00007022= 00001000                 461              DC.L    IMGCOINFOUR
00007026                           462  ANIMFLAG
00007026= 0001                     463              DC.W    1
00007028= 00002000                 464              DC.L    IMGFLAGSTICK
0000702C                           465  ANIMFLAGTOP
0000702C= 0001                     466              DC.W    1
0000702E= 00002400                 467              DC.L    IMGFLAGTOP            
00007032                           468  ANIMPLWALKRIGHT
00007032= 0004                     469              DC.W    4
00007034= 00003C00                 470              DC.L    IMGMARIOWALKONE
00007038= 00004C00                 471              DC.L    IMGMARIOWALKTWO
0000703C= 00004400                 472              DC.L    IMGMARIOWALKTHREE
00007040= 00004C00                 473              DC.L    IMGMARIOWALKTWO
00007044                           474              
00007044                           475  ANIMPLWALKLEFT
00007044= 0004                     476              DC.W    4
00007046= 00004000                 477              DC.L    IMGMARIOWALKONELEFT
0000704A= 00005000                 478              DC.L    IMGMARIOWALKTWOLEFT
0000704E= 00004800                 479              DC.L    IMGMARIOWALKTHREELEFT
00007052= 00005000                 480              DC.L    IMGMARIOWALKTWOLEFT 
00007056                           481  ANIMPLMSWALKRIGHT
00007056= 0004                     482              DC.W    4
00007058= 00006000                 483              DC.L    IMGMSWALKONE
0000705C= 00005C00                 484              DC.L    IMGMSWALKTWO
00007060= 00005800                 485              DC.L    IMGMSWALKTHREE
00007064= 00005C00                 486              DC.L    IMGMSWALKTWO
00007068                           487              
00007068                           488  ANIMPLMSWALKLEFT
00007068= 0004                     489              DC.W    4
0000706A= 00006C00                 490              DC.L    IMGMSWALKLEFTONE
0000706E= 00006800                 491              DC.L    IMGMSWALKLEFTTWO
00007072= 00006400                 492              DC.L    IMGMSWALKLEFTTHREE
00007076= 00006800                 493              DC.L    IMGMSWALKLEFTTWO
0000707A                           494  
0000707A                           495  ANIMPLIDLE
0000707A= 0001                     496              DC.W    1
0000707C= 00003400                 497              DC.L    IMGMARIOSMALL 
00007080                           498  
00007080                           499  ANIMPLMSIDLE
00007080= 0001                     500              DC.W    1
00007082= 00005C00                 501              DC.L    IMGMSWALKTWO
00007086                           502  
00007086                           503  ANIMPLINV
00007086= 0001                     504              DC.W    1
00007088= 00003000                 505              DC.L    IMGMARIOINVENCIBLE 
0000708C                           506  
0000708C                           507  -------------------- end include --------------------
0000708C                           508              INCLUDE "POWER-UPS.X68"
0000708C                           509  ; POWER-UPS
0000708C  =00000000                510  NONEPWI     EQU     0                       ; ID OF NONE POWER-UP
0000708C  =00000001                511  MRMPWID     EQU     1                       ; ID OF MUSHROOM POWER-UP 
0000708C                           512  
0000708C                           513  NONEPWUP
0000708C= 00007094                 514              DC.L    PWUPNOB                 ; SUBROUTINE OF BEHAVIOR WHEN USING POWER-UP
00007090                           515  MROMPWUP    
00007090= 00007094                 516              DC.L    PWUPNOB                 ; SUBROUTINE OF BEHAVIOR WHEN USING POWER-UP
00007094                           517            
00007094                           518    
00007094                           519  ; SUBROUTINE OF POWER-UP WITH NO BEHAVIOR WHEN USING IT
00007094  4E75                     520  PWUPNOB    RTS
00007096                           521  
00007096                           522  ; Subroutine to do the fire-flower-up action when using power-up
00007096                           523  FIREFLR
00007096  4E75                     524              RTS     
00007098                           525  
00007098                           526  -------------------- end include --------------------
00007098                           527              INCLUDE "UTILS.X68"
00007098                           528  ; UTILS FILE
00007098                           529  ; CHECK IF A POINT (X,Y) IS INSIDE A BOUNDING BOX
00007098                           530  ; D1.W      - X COORD OF POINT
00007098                           531  ; D2.W      - Y COORD OF POINT
00007098                           532  ; D3.W      - LEFT-TOP X COORD
00007098                           533  ; D4.W      - LEFT-TOP Y COORD
00007098                           534  ; D5.W      - RIGHT-BOTTOM X COORD
00007098                           535  ; D6.W      - RIGHT-BOTTOM Y COORD
00007098                           536  ;           RETURNS:
00007098                           537  ;           D0.B    - 0 IF NOT INSIDE, 1 IF INSIDE
00007098                           538  CHKINBBO
00007098                           539              ; LEFT-TOP CORNER
00007098  B243                     540              CMP.W   D3,D1                   ; COMPARE X COORDS
0000709A  6D00 001C                541              BLT     .OUT                    ; IS OUTSIDE OF BOUNDING BOX
0000709E  B444                     542              CMP.W   D4,D2                   ; COMPARE Y COORDS
000070A0  6D00 0016                543              BLT     .OUT                    ; IS OUTSIDE OF BOUNDING BOX
000070A4                           544              
000070A4                           545              ; RIGHT-BOTTOM CORNER
000070A4  B245                     546              CMP.W   D5,D1                   ; COMPARE X COORDS
000070A6  6E00 0010                547              BGT     .OUT
000070AA  B446                     548              CMP.W   D6,D2                   ; COMPARE Y COORDS
000070AC  6E00 000A                549              BGT     .OUT
000070B0                           550              ; IT'S INSIDE BOUNDING BOX
000070B0  103C 0001                551              MOVE.B  #1,D0                   ; RETURN 1, IT'S IN BOUNDING BOX
000070B4  6000 0006                552              BRA     .RTN
000070B8                           553  .OUT
000070B8  103C 0000                554              MOVE.B  #0,D0                   ; RETURN 0, IT'S OUT OF BOUNDING BOX
000070BC                           555  .RTN
000070BC  4E75                     556              RTS      
000070BE                           557  
000070BE                           558  
000070BE                           559  ; Subroutine to calculate top-left corner for centered string drawing
000070BE                           560  ; Input: A1 = Address of string, D1 = Center X, D2 = Center Y
000070BE                           561  ; Output: D1 = Top-left X, D2 = Top-left Y
000070BE                           562  ; Assumes fixed character width of 36 pixels
000070BE                           563  
000070BE                           564  CALCCENTERSTR
000070BE  2F03                     565              MOVE.L  D3,-(A7)
000070C0  2F00                     566              MOVE.L  D0,-(A7)
000070C2  2F0A                     567              MOVE.L  A2,-(A7)
000070C4                           568  
000070C4  303C 0000                569              MOVE.W  #0, D0         ; D0 will be used to count the string length
000070C8  2449                     570              MOVE.L A1, A2         ; Copy string address to A2 to preserve A1
000070CA                           571  
000070CA                           572              ; Calculate length of the string
000070CA                           573  COUNT_LOOP:
000070CA  161A                     574              MOVE.B  (A2)+, D3  ; Load next character into D3
000070CC  B63C 0000                575              CMP.B   #0,D3
000070D0  6700 0006                576              BEQ     END_COUNT  ; If character is 0 (string terminator), end loop
000070D4  5240                     577              ADDQ.W  #1, D0     ; Increment string length count
000070D6  60F2                     578              BRA     COUNT_LOOP
000070D8                           579  END_COUNT:
000070D8                           580  
000070D8                           581              ; Calculate total string width
000070D8  3600                     582              MOVE.W  D0, D3         ; Move string length to D3
000070DA  C6FC 0024                583              MULU.W  #36, D3        ; D3 = String Length * Character Width (36 pixels)
000070DE                           584  
000070DE                           585              ; Adjust D1 and D2 to get top-left coordinates
000070DE  E24B                     586              LSR.W   #1, D3         ; D3 = D3 / 2 (half width of string)
000070E0  9243                     587              SUB.W   D3, D1         ; Adjust X-coordinate
000070E2                           588              ; Adjust Y-coordinate if necessary (depends on character height)
000070E2                           589              ; SUB.W   #HalfCharHeight, D2
000070E2                           590              
000070E2  245F                     591              MOVE.L  (A7)+,A2
000070E4  201F                     592              MOVE.L  (A7)+,D0
000070E6  261F                     593              MOVE.L  (A7)+,D3
000070E8                           594              
000070E8  4E75                     595              RTS  ; Return with D1 and D2 containing top-left coordinates
000070EA                           596              
000070EA                           597  
000070EA                           598  ; SUBROUTINE TO DRAW IMAGE
000070EA                           599  ; INPUT:    A1.L    - POINTER TO IMAGE
000070EA                           600  ;           D5.L    - X (HIGH WORD) OF LEFT-TOP CORNER, Y (LOW WORD) OF LEFT-TOP CORNER
000070EA                           601  DRAWIMG
000070EA                           602  
000070EA  48E7 FF00                603              MOVEM.L D0-D7,-(A7)
000070EE  48E7 00C0                604              MOVEM.L A0-A1,-(A7)
000070F2  0645 0008                605              ADD.W   #PXSCALE*2,D5
000070F6  4246                     606              CLR.W   D6                      ; CLEAR D6 TO STORE X COORDINATE OF PIXEL
000070F8  4247                     607              CLR.W   D7                      ; CLEAR D7 TO STORE Y COORDINATE OF PIXEL
000070FA                           608  .LOOP
000070FA  2219                     609              MOVE.L  (A1)+,D1                ; GET COLOR
000070FC  B27C 0000                610              CMP.W   #0,D1
00007100  6700 002C                611              BEQ     .NEXT                   ; IF IT'S BLACK, SKIP IT, AS ALPHA
00007104  303C 0051                612              MOVE.W  #81,D0                  ; SET FILL COLOR
00007108  4E4F                     613              TRAP    #15
0000710A  303C 0050                614              MOVE.W  #80,D0                  ; SET EDGE COLOR            
0000710E  4E4F                     615              TRAP    #15
00007110                           616              
00007110  2205                     617              MOVE.L  D5,D1                   ; GET X COORD
00007112  E089                     618              LSR.L   #8,D1
00007114  E089                     619              LSR.L   #8,D1                   ; GET X COORD IN LOW WORD
00007116  D246                     620              ADD.W   D6,D1                   ; GET X COORD OF IMGPX TO DRAW
00007118  3601                     621              MOVE.W  D1,D3                   ; GET X COORD IN D3
0000711A  0643 0004                622              ADD.W   #PXSCALE,D3             ; GET X OFFSET OF IMGPX,
0000711E  3405                     623              MOVE.W  D5,D2                   ; GET Y COORD
00007120  D447                     624              ADD.W   D7,D2                   ; GET Y COORD OF IMGPX TO DRAW
00007122  3802                     625              MOVE.W  D2,D4                   ; GET Y COORD IN D4
00007124  0644 0004                626              ADD.W   #PXSCALE,D4             ; GET Y OFFSET OF IMGPX
00007128                           627              
00007128  303C 0057                628              MOVE.W  #87,D0                  ; DRAW RECTANGLE (IMGPX)
0000712C  4E4F                     629              TRAP    #15
0000712E                           630  .NEXT            
0000712E  BC7C 003C                631              CMP.W   #TILEPXS-PXSCALE*3,D6
00007132  6C00 0008                632              BGE     .NEXTYCO                ; RESET X PX OFFSET AND GET NEW Y OFFSET
00007136  0646 0004                633              ADD.W   #PXSCALE,D6             ; NEXT PX OFFSET
0000713A  60BE                     634              BRA     .LOOP
0000713C                           635  .NEXTYCO    
0000713C  BE7C 003C                636              CMP.W   #TILEPXS-PXSCALE*3,D7
00007140  6C00 000C                637              BGE    .LEAVE
00007144  3C3C 0000                638              MOVE.W  #0,D6                   ; RESET X OFFSET
00007148  0647 0004                639              ADD.W   #PXSCALE,D7             ; GET NEW Y OFFSET
0000714C  60AC                     640              BRA     .LOOP
0000714E                           641  .LEAVE             
0000714E  4CDF 0300                642              MOVEM.L (A7)+,A0-A1
00007152  4CDF 00FF                643              MOVEM.L (A7)+,D0-D7
00007156  4E75                     644              RTS
00007158                           645              
00007158                           646  ; SUBROUTINE TO UPDATE FRAME OF ANIMATION
00007158                           647  UPDANIMFRAME
00007158  48E7 8000                648              MOVEM.L D0,-(A7)        
0000715C  3038 7002                649              MOVE.W  ANIMACTI,D0
00007160  5240                     650              ADDQ.W  #1,D0
00007162  B07C 000F                651              CMP.W   #ANIMTIME,D0
00007166  6C00 000A                652              BGE     .NEXTFRAME
0000716A  31C0 7002                653              MOVE.W  D0,ANIMACTI 
0000716E  6000 000C                654              BRA     .RTN
00007172                           655  .NEXTFRAME
00007172  5278 7000                656              ADDQ.W  #1,ANIMFRAME
00007176  31FC 0000 7002           657              MOVE.W  #0,ANIMACTI
0000717C                           658  .RTN            
0000717C  4CDF 0001                659              MOVEM.L (A7)+,D0
00007180  4E75                     660              RTS
00007182                           661  
00007182                           662  ; A1.L      POINTER TO ANIMATION
00007182                           663  ; RETURNS A1.L - POINTER TO IMAGE
00007182                           664  GETIMGOFANIM
00007182  48E7 C000                665              MOVEM.L D0-D1,-(A7)
00007186  3019                     666              MOVE.W  (A1)+,D0                 ; GET NUMBER OF FRAMES OF THE GIVEN ANIMATION
00007188  3238 7000                667              MOVE.W  ANIMFRAME,D1            ; GET CURRENT FRAME OF ANIMATION
0000718C  82C0                     668              DIVU.W  D0,D1                   
0000718E  E089                     669              LSR.L   #8,D1
00007190  E089                     670              LSR.L   #8,D1                   ; GET CURRENT NUMBER OF FRAME OF GIVEN ANIMATION FROM GLOBAL ANIMATION FRAME NUMBER
00007192  C2FC 0004                671              MULU.W  #4,D1                   ; GET OFFSET OF IMAGE IN POINTER
00007196  D3C1                     672              ADD.L   D1,A1
00007198  2251                     673              MOVE.L  (A1),A1
0000719A  4CDF 0003                674              MOVEM.L (A7)+,D0-D1
0000719E  4E75                     675              RTS
000071A0                           676  
000071A0                           677  
000071A0                           678  -------------------- end include --------------------
000071A0                           679              INCLUDE "STRINGS.X68"
000071A0  =0000001E                680  OFFNUMB     EQU     30                      ; OFFSET OF NUMBERS TO CONVERT A NUMBER TO CHAR
000071A0                           681  
000071A0= 43 4F 49 4E 53 3A 00     682  STRCOIN     DC.B    'COINS:',0 
000071A8                           683              DS.W    0
000071A8                           684  STRSTARTBUTTON      
000071A8= 53 54 41 52 54 00        685              DC.B    'START',0
000071AE                           686              DS.W    0
000071AE                           687  
000071AE                           688  STRGAMETITLE1
000071AE= 53 55 50 45 52 00        689              DC.B    'SUPER',0
000071B4                           690              DS.W    0
000071B4                           691  STRGAMETITLE2
000071B4= 4D 41 52 49 4F 20 ...    692              DC.B    'MARIO BROS',0
000071C0                           693              DS.W    0
000071C0                           694  
000071C0                           695  STRCONTROLS1
000071C0= 43 4F 4E 54 52 4F ...    696              DC.B    'CONTROLS:',0
000071CA                           697              DS.W    0
000071CA                           698  STRCONTROLS2
000071CA= 57 20 2D 20 4A 55 ...    699              DC.B    'W - JUMP',0
000071D4                           700              DS.W    0
000071D4                           701  STRCONTROLS3
000071D4= 41 20 2D 20 4D 4F ...    702              DC.B    'A - MOVE LEFT',0
000071E2                           703              DS.W    0
000071E2                           704  STRCONTROLS4
000071E2= 44 20 2D 20 4D 4F ...    705              DC.B    'D - MOVE RIGHT',0
000071F2                           706              DS.W    0
000071F2                           707  STRDEATH
000071F2= 59 4F 55 20 44 49 ...    708              DC.B    'YOU DIED',0
000071FC                           709              DS.W    0
000071FC                           710  STRWINNER
000071FC= 59 4F 55 20 57 4F ...    711              DC.B    'YOU WON!',0
00007206                           712              DS.W    0
00007206                           713  STRRETURN       
00007206= 52 45 54 55 52 4E 00     714              DC.B    'RETURN',0
0000720E                           715              DS.W    0            
0000720E                           716  STREXIT       
0000720E= 45 58 49 54 00           717              DC.B    'EXIT',0
00007214                           718              DS.W    0                
00007214= 00000000                 719  STRNCOI     DC.L    0                       ; ADDRESS OF NUMBER OF COINS IN STRING
00007218                           720  
00007218                           721  
00007218                           722  
00007218                           723  
00007218                           724  
00007218                           725  
00007218                           726  
00007218                           727  
00007218                           728  -------------------- end include --------------------
00007218                           729              INCLUDE "SYSCONST.X68"
00007218                           730  ;-----------------------------------------------------------
00007218                           731  ; CONSTANTS
00007218                           732  ; ----------------------------------------------------------
00007218                           733  
00007218  =00000000                734  KBUTRAP     EQU     0                       ; keyboard update trap
00007218  =00000001                735  WDUTRAP     EQU     1                       ; update window trap
00007218                           736  
00007218  =00000057                737  KEYUP       EQU     'W'                     ; w key         
00007218  =00000041                738  KEYLEFT     EQU     'A'                     ; a key
00007218  =00000044                739  KEYRGHT     EQU     'D'                     ; d key
00007218  =00000053                740  KEYDOWN     EQU     'S'                     ; s key
00007218                           741  
00007218                           742  ; -- Bit map positions for keyboard
00007218  =00000000                743  KUPBMAP     EQU     0
00007218  =00000001                744  KDWBMAP     EQU     1
00007218  =00000002                745  KLTBMAP     EQU     2
00007218  =00000003                746  KRTBMAP     EQU     3
00007218                           747  
00007218                           748  ; -- Bit map positions for mouse
00007218  =00000000                749  MLBUMAP     EQU     0
00007218                           750  
00007218                           751  ; -- Bit masks for mouse buttons
00007218  =00000001                752  MLBUMSK     EQU     1<<MLBUMAP
00007218                           753  
00007218                           754  ; -- Bit masks for keys
00007218                           755  
00007218  =00000001                756  KUPMSK      EQU     1<<KUPBMAP
00007218  =00000002                757  KDWMSK      EQU     1<<KDWBMAP
00007218  =00000004                758  KLTMSK      EQU     1<<KLTBMAP
00007218  =00000008                759  KRTMSK      EQU     1<<KRTBMAP
00007218                           760  
00007218                           761  ; -- Window constants
00007218  =000002D0                762  WDHEIGHT    EQU     720                     ; Window height
00007218  =00000400                763  WDWIDTH     EQU     1024                    ; Window width
00007218  =00000001                764  WDIRQ       EQU     1                       ; Window interrupt number
00007218  =0000001E                765  WDFPS       EQU     30                      ; Window frames per second
00007218  =00000021                766  WDRTIME     EQU     1000/WDFPS              ; Window refresh timer (ms)
00007218  =00000004                767  SPEEDMULTIPLIER EQU 4
00007218                           768  
00007218                           769  
00007218                           770  
00007218                           771  
00007218                           772  
00007218                           773  
00007218                           774  
00007218                           775  
00007218                           776  
00007218                           777  
00007218                           778  
00007218                           779  
00007218                           780  
00007218                           781  
00007218                           782  
00007218                           783  
00007218                           784  
00007218                           785  -------------------- end include --------------------
00007218                           786              INCLUDE "MAPDATA.X68"
00007218                           787  ; STORE ADDRESS TO EACH LEVEL DATA TO ACCESS FASTER TO A SPECIFIC LEVEL AND LOAD IT
00007218= 00007220                 788  LVLADDR     DC.L    DAT1_01                 ; LEVEL 1 ADDRESS
0000721C= 00008162                 789              DC.L    DAT1_02                 ; LEVEL 2 ADDRESS
00007220                           790  DAT1_01     
00007220= 000A 00C3                791              DC.W    10,195
00007224= 0000 0000 0000 0...      792              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000727E= 0000 0000 0000 0...      793              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000072BA= 0000 0000 0000 0...      794              DC.W    0,0,0,0,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007314= 0000 0000 0000 0...      795              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000736E= 0000 0000 0000 0...      796              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000073AA= 0000 0000 0000 0...      797              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007440= 0000 0000 0000 0...      798              DC.W    0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,0,3,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0
0000749A= 0007 0007 0007 0...      799              DC.W    7,7,7,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0
00007530= 0000 0000 0000 0...      800              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000075C6= 0000 0000 0000 0...      801              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007620= 0000 0000 0000 0...      802              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,9,0,0,0,0,0
000076B6= 0000 0000 0000 0...      803              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000774C= 0000 0000 0000 0...      804              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000077A6= 0000 0000 0000 0...      805              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,9,0,0,0,0,0
0000783C= 0000 0000 0000 0...      806              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,3,5,3,7,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000078D2= 0000 0000 0003 0...      807              DC.W    0,0,3,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,7,7,0,0,0,0,7,0,0,7,0,0,7,0,0,0,0,0,7,0
0000792C= 0000 0000 0000 0...      808              DC.W    0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,9,0,0,0,0,0
000079C2= 0000 0000 0000 0...      809              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007A58= 0000 0000 0000 0...      810              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007AB2= 0000 0000 0000 0...      811              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,9,0,0,0,0,0
00007B48= 0000 0000 0000 0...      812              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007BDE= 0000 0000 0000 0...      813              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007C38= 0000 0000 0000 0...      814              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,2,2,0,0,0,0,0,0,2,2,2,0,0,2,2,2,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,2,2,2,2,0,0,0,0,0,0,9,0,0,0,0,0
00007CCE= 0000 0000 0000 0...      815              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,8,8,4,0,0,0,0,0,8,8,0,0,0,4,4,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007D64= 0000 0000 0000 0...      816              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,0,0
00007DBE= 0000 0000 0000 0...      817              DC.W    0,0,0,0,4,4,0,0,0,0,4,4,0,0,0,2,2,2,2,0,0,2,2,2,2,0,0,0,0,2,2,2,2,0,0,2,2,2,2,0,0,0,8,8,0,0,0,0,0,0,0,0,4,4,0,0,8,8,2,2,2,2,2,0,0,0,0,0,0,9,0,0,0,0,0
00007E54= 0001 0001 0001 0...      818              DC.W    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1
00007EEA= 0001 0001 0001 0...      819              DC.W    1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
00007F44= 0001 0001 0001 0...      820              DC.W    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
00007FDA= 0001 0001 0001 0...      821              DC.W    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1
00008070= 0001 0001 0001 0...      822              DC.W    1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
000080CA= 0001 0001 0001 0...      823              DC.W    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
00008160                           824  
00008160= FFFF                     825              DC.W    $FFFF                  ; END POINT
00008162                           826  
00008162                           827  
00008162= 000A 001E                828  DAT1_02     DC.W    10,30
00008166= 0000 0000 0000 0...      829              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000081A2= 0000 0000 0000 0...      830              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000081DE= 0000 0000 0000 0...      831              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000821A= 0000 0000 0000 0...      832              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008256= 0000 0000 0000 0...      833              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008292= 0000 0000 0000 0...      834              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000082CE= 0000 0000 0000 0...      835              DC.W    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000830A= 0000 0000 0000 0...      836              DC.W    0,0,0,0,0,0,1,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
00008346= 0001 0001 0002 0...      837              DC.W    1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1
00008382= 0001 0001 0002 0...      838              DC.W    1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1
000083BE= FFFF                     839              DC.W    $FFFF                  ; END POINT   
000083C0                           840  
000083C0                           841  
000083C0                           842  
000083C0                           843  
000083C0                           844  
000083C0                           845  
000083C0                           846  
000083C0                           847  
000083C0                           848  
000083C0                           849  
000083C0                           850  
000083C0                           851  
000083C0                           852  
000083C0                           853  
000083C0                           854  
000083C0                           855  
000083C0                           856  
000083C0                           857  
000083C0                           858  
000083C0                           859  
000083C0                           860  
000083C0                           861  
000083C0                           862  
000083C0                           863  
000083C0                           864  
000083C0                           865  -------------------- end include --------------------
000083C0                           866              INCLUDE "LEVELDATA.X68"
000083C0                           867  ; CONSTANTS FOR CURRENT LOADED LEVEL
000083C0  =00000185                868  MAXMW       EQU     389                     ; MAX MAP WIDTH (For current level)
000083C0  =0000000A                869  MAXMH       EQU     10                      ; MAX MAP HEIGHT (For current level)
000083C0                           870  
000083C0                           871  ; HERE WILL BE STORED THE CURRENT LOADED LEVEL TO MAKE CHANGES DURING GAME IN IT, TO KEEP THE ORIGINAL LEVEL UNTOUCHED
000083C0                           872  LVLCDAT     DS.W    MAXMW*MAXMH             ; CREATE SPACE IN MEMORY FOR THE CURRENT LEVEL LOADED  
0000A224= 0000                     873  MTLHGHT     DC.W    0                       ; CURRENT LOADED LEVEL HEIGHT IN TILES
0000A226= 0000                     874  MTLWDTH     DC.W    0                       ; CURRENT LOADED LEVEL WIDTH IN TILES
0000A228= 0000                     875  MAPPXSZ     DC.W    0                       ; CURRENT LOADED LEVEL WIDTH IN PIXELS        
0000A22A                           876  
0000A22A                           877  
0000A22A                           878  
0000A22A                           879  ; Tile info constants
0000A22A  =00000048                880  TILEPXS     EQU     WDHEIGHT/10             ; Tile size in pixels
0000A22A  =00000010                881  PXPERIM     EQU     16                      ; NUMBER OF PIXELS PER IMAGE (16x16)
0000A22A  =00000004                882  PXSCALE     EQU     TILEPXS/PXPERIM         ; SCALE OF PIXELS (NUMBER OF SCREEN PIXELS FOR A SPRITE PIXEL)
0000A22A  =0000000F                883  NTILESC     EQU     WDWIDTH/TILEPXS+1       ; Number of tiles in camera in x-axis
0000A22A  =00000010                884  TILESZB     EQU     16                      ; Size of tile info in bytes
0000A22A                           885  ; Tile entity type constants
0000A22A  =00000000                886  TENOBEH     EQU     0                       ; IT'S NOT A TILE ENTITY
0000A22A  =00000001                887  TEONCOL     EQU     1                       ; TILE ENTITY WITH BEHAVIOUR WHEN COLLIDING WITH HEAD
0000A22A  =00000002                888  TEONLOA     EQU     2                       ; TILE ENTITY WITH BEHAVIOUR WHEN LOADING THE LEVEL 
0000A22A                           889  ; Offsets for tile info
0000A22A  =00000000                890  OFFFCLR     EQU     0                       ; OFFSET OF POINTER TO FILL COLOR
0000A22A  =00000004                891  OFFECLR     EQU     4                       ; OFFSET OF POINTER TO EDGE COLOR
0000A22A  =00000008                892  ISTLENT     EQU     8                       ; OFFSET OF IS TILE ENTITY PROPERTY
0000A22A  =0000000A                893  BEHAVSR     EQU     10                       ; OFFSET OF BEHAVIOUR SUBROUTINE POINTER
0000A22A  =0000000E                894  ADDPROP     EQU     14                      ; OFFSET OF ADDITIONAL PROPERTY OF TILE
0000A22A                           895  ; --- Tile Info
0000A22A                           896              
0000A22A= 00004A9C                 897  TILE1       DC.L    $00004A9C               ; FILL COLOR
0000A22E= 00003E83                 898              DC.L    $0003E83                ; EDGE COLOR
0000A232= 0000                     899              DC.W    TENOBEH                 ; Is Tile Entity? 0: No, >1: Yes
0000A234= 00000000                 900              DC.L    0                       ; Subroutine of behavior
0000A238= 0000                     901              DC.W    0
0000A23A                           902              
0000A23A= 00C5CEFF                 903  TILE2       DC.L    $00C5CEFF               ; POINTER TO SPRITE
0000A23E= 00004A9C                 904              DC.L    $00004A9C               ; EDGE COLOR
0000A242= 0000                     905              DC.W    TENOBEH                 ; Is Tile Entity? 0: No, >1: Yes
0000A244= 00000000                 906              DC.L    0                       ; Subroutine of behavior
0000A248= 0000                     907              DC.W    0
0000A24A                           908  ; BOX THAT BREAKS AND IT'S REPLACED WITH AIR
0000A24A= 00003C7E                 909  TILE3       DC.L    $00003C7E               ; POINTER TO SPRITE
0000A24E= 00031931                 910              DC.L    $00031931               ; EDGE COLOR
0000A252= 0001                     911              DC.W    TEONCOL                 ; Is Tile Entity? 0: No, >1: Yes
0000A254= 0000A41E                 912              DC.L    BRKTILE                 ; Subroutine of behavior
0000A258= 0000                     913              DC.W    0                       ; Tile to replace this one when breaking
0000A25A                           914  ; SPAWNER OF GOOMBA           
0000A25A= 00FFFF00                 915  TILE4       DC.L    $00FFFF00                      ; POINTER TO SPRITE
0000A25E= 00003E83                 916              DC.L    $0003E83                ; EDGE COLO
0000A262= 0002                     917              DC.W    TEONLOA                 ; Is Tile Entity? 0: No, >1: Yes
0000A264= 0000A37E                 918              DC.L    SPAWNER                 ; Subroutine of behavior
0000A268= 0000                     919              DC.W    0                       ; Entity type to spawn
0000A26A                           920  ; BOX OF POWER-UP (Mushroom)
0000A26A                           921  TILE5
0000A26A= 00219CE6                 922              DC.L    $00219CE6               ; POINTER TO SPRITE
0000A26E= 00004A9C                 923              DC.L    $00004A9C               ; EDGE COLOR
0000A272= 0001                     924              DC.W    TEONCOL                 ; Is Tile Entity? 0: No, >1: Yes
0000A274= 0000A2CA                 925              DC.L    SPWNTOP                 ; Subroutine of behavior
0000A278= 0601                     926              DC.W    $0601                   ; Less significant byte: Entity type to spawn, Most significant byte: block id to replace it with after        
0000A27A                           927  ; BLOCKED BOX TILE
0000A27A                           928  TILE6
0000A27A= 00031931                 929              DC.L    $00031931               ; POINTER TO SPRITE
0000A27E= 00000000                 930              DC.L    $00000000               ; EDGE COLOR
0000A282= 0000                     931              DC.W    TENOBEH                 ; Is Tile Entity? 0: No, >1: Yes
0000A284= 00000000                 932              DC.L    0                       ; Subroutine of behavior
0000A288= 0000                     933              DC.W    0                       ; 
0000A28A                           934  
0000A28A                           935  ; BOX WITH COIN
0000A28A                           936  TILE7
0000A28A= 00003C7E                 937              DC.L    $00003C7E               ; POINTER TO SPRITE
0000A28E= 00031931                 938              DC.L    $00031931               ; EDGE COLOR
0000A292= 0001                     939              DC.W    TEONCOL                 ; Is Tile Entity? 0: No, >1: Yes
0000A294= 0000A2CA                 940              DC.L    SPWNTOP                 ; Subroutine of behavior
0000A298= 0602                     941              DC.W    $0602                   ; Less significant byte: Entity type to spawn, Most significant byte: block id to replace it with after        
0000A29A                           942  
0000A29A                           943  ; PIPE
0000A29A                           944  TILE8       
0000A29A= 0000FF00                 945              DC.L    $000000FF00             ; POINTER TO SPRITE
0000A29E= 0000AA00                 946              DC.L    $000000AA00             ; EDGE COLOR
0000A2A2= 0000                     947              DC.W    TENOBEH                 ; Is Tile Entity? 0: No, >1: Yes
0000A2A4= 00000000                 948              DC.L    0                       ; Subroutine of behavior
0000A2A8= 0000                     949              DC.W    0                       ; 
0000A2AA                           950  ; SPAWNER OF FLAG ENTITY
0000A2AA                           951  TILE9
0000A2AA= 00FFFF00                 952              DC.L    $00FFFF00               ; POINTER TO SPRITE
0000A2AE= 00003E83                 953              DC.L    $0003E83                ; EDGE COLO
0000A2B2= 0002                     954              DC.W    TEONLOA                 ; Is Tile Entity? 0: No, >1: Yes
0000A2B4= 0000A37E                 955              DC.L    SPAWNER                 ; Subroutine of behavior
0000A2B8= 0003                     956              DC.W    3                       ; Entity type to spawn
0000A2BA                           957  ; SPAWNER OF FLAG TOP ENTITY
0000A2BA                           958  TILE10
0000A2BA= 00FFFF00                 959              DC.L    $00FFFF00               ; POINTER TO SPRITE
0000A2BE= 00003E83                 960              DC.L    $0003E83                ; EDGE COLO
0000A2C2= 0002                     961              DC.W    TEONLOA                 ; Is Tile Entity? 0: No, >1: Yes
0000A2C4= 0000A37E                 962              DC.L    SPAWNER                 ; Subroutine of behavior
0000A2C8= 0004                     963              DC.W    4                       ; Entity type to spawn
0000A2CA                           964  ; --- Tile on load subroutines: (All tile behavior subroutines have the same input and output)
0000A2CA                           965  ;     Input:
0000A2CA                           966  ;           - A1.L  - ADDRESS OF TILE
0000A2CA                           967  ;     Output:
0000A2CA                           968  ;           - None
0000A2CA                           969  ;     Modifies:
0000A2CA                           970  ;           - Tile map
0000A2CA                           971  ; --------------------------------------------------------------------------- 
0000A2CA                           972  
0000A2CA                           973  ; SPAWNS AN ENTITY AT THE TOP OF TILE
0000A2CA                           974  SPWNTOP
0000A2CA  48E7 FF00                975              MOVEM.L D0-D7,-(A7)
0000A2CE  48E7 00E0                976              MOVEM.L A0-A2,-(A7)
0000A2D2  4285                     977              CLR.L   D5
0000A2D4  3601                     978              MOVE.W  D1,D3                   ; SAVE X COORDS FOR LATER
0000A2D6  3802                     979              MOVE.W  D2,D4                   ; SAVE Y COORDS FOR LATER
0000A2D8                           980                          
0000A2D8                           981              ; GET INDEX OF TILE IN MAP 
0000A2D8  43F9 000083C0            982              LEA.L   LVLCDAT,A1
0000A2DE  41F9 0000A22A            983              LEA.L   TILE1,A0
0000A2E4  C5F9 0000A226            984              MULS.W  MTLWDTH,D2
0000A2EA  D441                     985              ADD.W   D1,D2                   
0000A2EC  C5FC 0002                986              MULS.W  #2,D2
0000A2F0  3C02                     987              MOVE.W  D2,D6
0000A2F2  3A31 2000                988              MOVE.W  0(A1,D2.W),D5           ; GET TILE ID
0000A2F6  5345                     989              SUBQ.W  #1,D5
0000A2F8  CAFC 0010                990              MULU.W  #TILESZB,D5             ; GET TILE ADDRESS
0000A2FC                           991              ; SPAWN ENTITY
0000A2FC  4202                     992              CLR.B   D2
0000A2FE  3430 500E                993              MOVE.W  ADDPROP(A0,D5.W),D2     ; GET ENEMY TYPE TO SPAWN IN D2 TO SPAWN IT 
0000A302  C47C 00FF                994              AND.W   #$00FF,D2           
0000A306  43F9 0000A4B2            995              LEA.L   ENEMLIS,A1
0000A30C  3E3C FFFF                996              MOVE.W  #-1,D7
0000A310                           997  .FNDNXT
0000A310  5247                     998              ADDQ.W  #1,D7
0000A312  2019                     999              MOVE.L  (A1)+,D0
0000A314  B0BC FFFFFFFF           1000              CMP.L   #$FFFFFFFF,D0
0000A31A  66F4                    1001              BNE     .FNDNXT
0000A31C  BE7C 0064               1002              CMP.W   #ENEMCOUN,D7
0000A320  6C00 003A               1003              BGE     .RTN
0000A324  5989                    1004              SUB.L   #4,A1       
0000A326                          1005              ; WE FOUND THE LAST EMPTY PLACE IN LIST
0000A326  3003                    1006              MOVE.W  D3,D0                   ; RESTORE TILE POSITION IN TILE COORDS - X AXIS
0000A328  3204                    1007              MOVE.W  D4,D1                   ; RESTORE TILE POSITION IN TILE COORDS - Y AXIS
0000A32A  5341                    1008              SUBQ.W  #1,D1                   ; WE WANT IT TO SPAWN AT TOP
0000A32C  C1FC 0048               1009              MULS.W  #TILEPXS,D0             ; CONVERT IT TO PX COORD
0000A330  C3FC 0048               1010              MULS.W  #TILEPXS,D1             ; CONVERT IT TO PX COORD
0000A334  4EB9 0000B932           1011              JSR     DMALLOC
0000A33A  22C8                    1012              MOVE.L  A0,(A1)+                ; STORE POINTER OF ENEMY IN THE LIST OF ENEMIES
0000A33C  22BC FFFFFFFF           1013              MOVE.L  #$FFFFFFFF,(A1)         ; SET END-POINT            
0000A342  10C2                    1014              MOVE.B  D2,(A0)+                ; SET ENEMY TYPE
0000A344  10FC 0000               1015              MOVE.B  #ENSTDSB,(A0)+          ; SET DISABLED
0000A348  30FC FFFF               1016              MOVE.W  #-1,(A0)+               ; SET DIRECTION TO LEFT
0000A34C  0640 0024               1017              ADD.W   #TILEPXS/2,D0
0000A350  0641 0024               1018              ADD.W   #TILEPXS/2,D1
0000A354  30C0                    1019              MOVE.W  D0,(A0)+                ; SET X POSITION
0000A356  30C1                    1020              MOVE.W  D1,(A0)+                ; SET Y POSITION
0000A358  30FC 0000               1021              MOVE.W  #0,(A0)+                ; SET Y FORCE
0000A35C                          1022  .RTN            
0000A35C  43F9 000083C0           1023              LEA.L   LVLCDAT,A1
0000A362  41F9 0000A22A           1024              LEA.L   TILE1,A0
0000A368  4242                    1025              CLR.W   D2
0000A36A  3430 500E               1026              MOVE.W  ADDPROP(A0,D5.W),D2     ; GET ADDITIONAL PROPERTY OF TILE
0000A36E  E04A                    1027              LSR.W   #8,D2                   ; GET TILE TO REPLACE IT WITH IN MAP
0000A370  3382 6000               1028              MOVE.W  D2,0(A1,D6.W)           ; Replace tile in map
0000A374                          1029              
0000A374  4CDF 0700               1030              MOVEM.L (A7)+,A0-A2
0000A378  4CDF 00FF               1031              MOVEM.L (A7)+,D0-D7
0000A37C  4E75                    1032              RTS   
0000A37E                          1033  
0000A37E                          1034  ; SPAWNS AN ENEMY
0000A37E                          1035  SPAWNER
0000A37E  48E7 FF00               1036              MOVEM.L D0-D7,-(A7)
0000A382  48E7 00E0               1037              MOVEM.L A0-A2,-(A7)
0000A386  4285                    1038              CLR.L   D5
0000A388  3601                    1039              MOVE.W  D1,D3                   ; SAVE X COORDS FOR LATER
0000A38A  3802                    1040              MOVE.W  D2,D4                   ; SAVE Y COORDS FOR LATER
0000A38C                          1041                          
0000A38C                          1042              ; GET INDEX OF TILE IN MAP 
0000A38C  43F9 000083C0           1043              LEA.L   LVLCDAT,A1
0000A392  41F9 0000A22A           1044              LEA.L   TILE1,A0
0000A398  C5F9 0000A226           1045              MULS.W  MTLWDTH,D2
0000A39E  D441                    1046              ADD.W   D1,D2                   
0000A3A0  C5FC 0002               1047              MULS.W  #2,D2
0000A3A4  3C02                    1048              MOVE.W  D2,D6
0000A3A6  3A31 2000               1049              MOVE.W  0(A1,D2.W),D5           ; GET TILE ID
0000A3AA  5345                    1050              SUBQ.W  #1,D5
0000A3AC  CAFC 0010               1051              MULU.W  #TILESZB,D5             ; GET TILE ADDRESS
0000A3B0                          1052              ; SPAWN ENEMY
0000A3B0  3430 500E               1053              MOVE.W  ADDPROP(A0,D5.W),D2     ; GET ENEMY TYPE TO SPAWN IN D2 TO SPAWN IT            
0000A3B4  43F9 0000A4B2           1054              LEA.L   ENEMLIS,A1
0000A3BA  3E3C FFFF               1055              MOVE.W  #-1,D7
0000A3BE                          1056  .FNDNXT
0000A3BE  5247                    1057              ADDQ.W  #1,D7
0000A3C0  2019                    1058              MOVE.L  (A1)+,D0
0000A3C2  B0BC FFFFFFFF           1059              CMP.L   #$FFFFFFFF,D0
0000A3C8  66F4                    1060              BNE     .FNDNXT
0000A3CA  BE7C 0064               1061              CMP.W   #ENEMCOUN,D7
0000A3CE  6C00 0038               1062              BGE     .RTN
0000A3D2                          1063              ;MOVE.L  A1,D7
0000A3D2  5989                    1064              SUB.L   #4,A1
0000A3D4                          1065              ;MOVE.L  D7,A1         
0000A3D4                          1066              ; WE FOUND THE LAST EMPTY PLACE IN LIST
0000A3D4  3003                    1067              MOVE.W  D3,D0                   ; RESTORE TILE POSITION IN TILE COORDS - X AXIS
0000A3D6  3204                    1068              MOVE.W  D4,D1                   ; RESTORE TILE POSITION IN TILE COORDS - Y AXIS
0000A3D8  C1FC 0048               1069              MULS.W  #TILEPXS,D0             ; CONVERT IT TO PX COORD
0000A3DC  C3FC 0048               1070              MULS.W  #TILEPXS,D1             ; CONVERT IT TO PX COORD
0000A3E0  4EB9 0000B932           1071              JSR     DMALLOC
0000A3E6  22C8                    1072              MOVE.L  A0,(A1)+                ; STORE POINTER OF ENEMY IN THE LIST OF ENEMIES
0000A3E8  22BC FFFFFFFF           1073              MOVE.L  #$FFFFFFFF,(A1)         ; SET END-POINT            
0000A3EE  10C2                    1074              MOVE.B  D2,(A0)+                ; SET ENEMY TYPE
0000A3F0  10FC 0000               1075              MOVE.B  #ENSTDSB,(A0)+          ; SET DISABLED
0000A3F4  30FC FFFF               1076              MOVE.W  #-1,(A0)+               ; SET DIRECTION TO LEFT
0000A3F8  0640 0024               1077              ADD.W   #TILEPXS/2,D0
0000A3FC  0641 0024               1078              ADD.W   #TILEPXS/2,D1
0000A400  30C0                    1079              MOVE.W  D0,(A0)+                ; SET X POSITION
0000A402  30C1                    1080              MOVE.W  D1,(A0)+                ; SET Y POSITION
0000A404  30FC 0000               1081              MOVE.W  #0,(A0)+                ; SET Y FORCE
0000A408                          1082  .RTN            
0000A408  43F9 000083C0           1083              LEA.L   LVLCDAT,A1
0000A40E  33BC 0000 6000          1084              MOVE.W  #0,0(A1,D6.W)           ; Replace tile in map
0000A414  4CDF 0700               1085              MOVEM.L (A7)+,A0-A2
0000A418  4CDF 00FF               1086              MOVEM.L (A7)+,D0-D7
0000A41C  4E75                    1087              RTS   
0000A41E                          1088  ; --- Tile behavior functions: (All tile behavior subroutines have the same input and output)
0000A41E                          1089  ;     Input:
0000A41E                          1090  ;           - D1.W: X position of tile in tile coords
0000A41E                          1091  ;           - D2.W: Y position of tile in tile coords
0000A41E                          1092  ;     Output:
0000A41E                          1093  ;           - None
0000A41E                          1094  ;     Modifies:
0000A41E                          1095  ;           - Tile map
0000A41E                          1096  ; ---------------------------------------------------------------------------             
0000A41E                          1097  ; Breaks the tile in tilemap            
0000A41E                          1098  BRKTILE
0000A41E  48E7 6000               1099              MOVEM.L D1-D2,-(A7)
0000A422  48E7 0040               1100              MOVEM.L A1,-(A7)
0000A426                          1101              
0000A426                          1102              ; GET INDEX OF TILE IN MAP
0000A426  43F9 000083C0           1103              LEA.L   LVLCDAT,A1
0000A42C  45F9 0000A22A           1104              LEA.L   TILE1,A2
0000A432  C5F9 0000A226           1105              MULS.W  MTLWDTH,D2
0000A438  D441                    1106              ADD.W   D1,D2                   
0000A43A  C5FC 0002               1107              MULS.W  #2,D2
0000A43E                          1108              
0000A43E  3631 2000               1109              MOVE.W  0(A1,D2.W),D3           ; GET TILE ID
0000A442  5343                    1110              SUBQ.W  #1,D3
0000A444  C6FC 0010               1111              MULU.W  #TILESZB,D3             ; GET TILE ADDRESS
0000A448                          1112              
0000A448  33B2 300E 2000          1113              MOVE.W  ADDPROP(A2,D3.W),0(A1,D2.W)           ; Replace tile in map
0000A44E                          1114              
0000A44E  4CDF 0200               1115              MOVEM.L (A7)+,A1
0000A452  4CDF 0006               1116              MOVEM.L (A7)+,D1-D2
0000A456  4E75                    1117              RTS
0000A458                          1118  
0000A458                          1119              
0000A458                          1120  
0000A458                          1121  
0000A458                          1122  
0000A458                          1123  
0000A458                          1124  
0000A458                          1125  
0000A458                          1126  
0000A458                          1127  
0000A458                          1128  
0000A458                          1129  
0000A458                          1130  
0000A458                          1131  
0000A458                          1132  
0000A458                          1133  
0000A458                          1134  
0000A458                          1135  
0000A458                          1136  
0000A458                          1137  
0000A458                          1138  
0000A458                          1139  
0000A458                          1140  
0000A458                          1141  
0000A458                          1142  
0000A458                          1143  
0000A458                          1144  
0000A458                          1145  
0000A458                          1146  
0000A458                          1147  
0000A458                          1148  -------------------- end include --------------------
0000A458                          1149              INCLUDE "ENEMIES.X68"
0000A458                          1150  ; Enemy
0000A458                          1151  ; Memory layout (in dynamic memory):
0000A458                          1152  ;           - 1B - Enemy type  
0000A458                          1153  ;           - 1B - Enabled or disabled -> -1 dead, 0 disabled, 1 enabled
0000A458                          1154  ;           - 1W - Current direction of movement
0000A458                          1155  ;           - 1W - X position
0000A458                          1156  ;           - 1W - Y position
0000A458                          1157  ;           - 1W - YForce
0000A458                          1158  ; Constants of enemies
0000A458                          1159  ;           L->Pointer to update state subroutine
0000A458                          1160  ;           W->XSpeed
0000A458                          1161  ;           L->Fill Color
0000A458  =00000004               1162  ENEMSIZE    EQU    4                        ; SIZE OF POINTER TO ENEMIES IN BYTES
0000A458  =00000064               1163  ENEMCOUN    EQU    100                      ; MAX QUANTITY OF ENEMIES PER LEVEL
0000A458  =00000012               1164  ENEMSZB     EQU    18                       ; SIZE OF ENEMY TYPE INFO. IN BYTES
0000A458                          1165  
0000A458  =FFFFFFFF               1166  ENSTDTH     EQU     -1                      ; CONSTANT FOR ENEMY STATE OF DEATH
0000A458  =00000001               1167  ENSTENB     EQU     1                       ; CONSTANT FOR ENEMY STATE OF ENABLED
0000A458  =00000000               1168  ENSTDSB     EQU     0                       ; CONSTANT FOR ENEMY STATE OF DISABLED
0000A458                          1169  ; OFFSETS OF ATTRIBUTES OF AN ENEMY IN MEMORY
0000A458  =00000000               1170  ENEMTYPE    EQU     0                       ; OFFSET OF ENEMY TYPE IN ENEMY
0000A458  =00000001               1171  ENEMENBL    EQU     1                       ; OFFSET OF ENABLE/DISABLED PROPERTY OF ENEMY 
0000A458  =00000002               1172  ENEMMDIR    EQU     2                       ; OFFSET OF CURRENT DIRECTION OF MOVEMENT
0000A458  =00000004               1173  ENEMXPOS    EQU     4                       ; OFFSET OF X POSITION
0000A458  =00000006               1174  ENEMYPOS    EQU     6                       ; OFFSET OF Y POSITION
0000A458  =00000008               1175  ENEMYFCE    EQU     8                       ; OFFSET OF CURRENT Y FORCE
0000A458                          1176  
0000A458  =00000000               1177  ENTYPXSP    EQU     0                       ; OFFSET OF X SPEED IN ENEMY TYPE INFO
0000A458  =00000002               1178  ENTYPCLR    EQU     2                       ; OFFSET OF FILL COLOR IN ENEMY TYPE INFO
0000A458  =00000006               1179  ENTYPSBH    EQU     6                       ; OFFSET OF SUBROUTINE BEHAV IN ENEMY TYPE INFO
0000A458  =0000000A               1180  ENTYPHBH    EQU     10                      ; OFFSET OF SUBROUTINE TO CALL WHEN HEAD COLLSIION
0000A458  =0000000E               1181  ENTYPCOL    EQU     14                      ; OFFSET OF SUBROUTINE TO CALL WHEN COLLIDING WITH PLAYER
0000A458                          1182     
0000A458                          1183  ; ENEMY TYPES
0000A458                          1184  GOOMBA
0000A458= 0010                    1185              DC.W    4*SPEEDMULTIPLIER       ; XSPEED
0000A45A= 00007004                1186              DC.L    ANIMGOOMBA              ; POINTER TO ANIMATION
0000A45E= 0000AB60                1187              DC.L    GMBASTU                 ; SUBROUTINE OF BEHAVIOUR
0000A462= 0000AB06                1188              DC.L    ENEHCOL                 ; SUBROUTINE OF HEAD COLISION WITH PLAYER
0000A466= 0000AB16                1189              DC.L    ENEPCOL                 ; SUBROUTINE OF OTHER TYPE OF COLLISION WITH PLAYER
0000A46A                          1190  
0000A46A= 0008                    1191  MUSHROOM    DC.W    2*SPEEDMULTIPLIER       ; XSPEED
0000A46C= 0000700E                1192              DC.L    ANIMMUSHROOM            ; POINTER TO ANIMATION
0000A470= 0000AB60                1193              DC.L    GMBASTU                 ; SUBROUTINE OF BEHAVIOUR
0000A474= 0000AB2E                1194              DC.L    MROMCOL                 ; SUBROUTINE OF HEAD COLISION WITH PLAYER
0000A478= 0000AB2E                1195              DC.L    MROMCOL                 ; SUBROUTINE OF OTHER TYPE OF COLLISION WITH PLAYER
0000A47C                          1196  
0000A47C= 0000                    1197  COIN        DC.W    0                       ; XSPEED
0000A47E= 00007014                1198              DC.L    ANIMCOIN                ; POINTER TO ANIMATION
0000A482= 0000AB46                1199              DC.L    NOBEHAV                 ; SUBROUTINE OF BEHAVIOUR
0000A486= 0000AB48                1200              DC.L    COINCOL                 ; SUBROUTINE OF HEAD COLISION WITH PLAYER
0000A48A= 0000AB48                1201              DC.L    COINCOL                 ; SUBROUTINE OF OTHER TYPE OF COLLISION WITH PLAYE
0000A48E                          1202  
0000A48E= 0000                    1203  FLAG        DC.W    0                       ; XSPEED
0000A490= 00007026                1204              DC.L    ANIMFLAG                ; POINTER TO ANIMATION
0000A494= 0000AB46                1205              DC.L    NOBEHAV                 ; SUBROUTINE OF BEHAVIOUR
0000A498= 0000AB56                1206              DC.L    FLAGCOL                 ; SUBROUTINE OF HEAD COLISION WITH PLAYER
0000A49C= 0000AB56                1207              DC.L    FLAGCOL                 ; SUBROUTINE OF OTHER TYPE OF COLLISION WITH PLAYE    
0000A4A0                          1208  FLAGTOP 
0000A4A0= 0000                    1209              DC.W    0                       ; XSPEED
0000A4A2= 0000702C                1210              DC.L    ANIMFLAGTOP             ; POINTER TO ANIMATION
0000A4A6= 0000AB46                1211              DC.L    NOBEHAV                 ; SUBROUTINE OF BEHAVIOUR
0000A4AA= 0000AB56                1212              DC.L    FLAGCOL                 ; SUBROUTINE OF HEAD COLISION WITH PLAYER
0000A4AE= 0000AB56                1213              DC.L    FLAGCOL                 ; SUBROUTINE OF OTHER TYPE OF COLLISION WITH PLAYE    
0000A4B2                          1214                        
0000A4B2                          1215      
0000A4B2                          1216  ; List of enemies; Pointer to dynamic memory
0000A4B2                          1217  ENEMLIS     DS.L    ENEMSIZE*(ENEMCOUN+1)
0000AB02= 0000FFFF                1218              DC.L    $FFFF
0000AB06                          1219  
0000AB06                          1220  ; Subroutine of behavior for enemies when the player collides with their heads
0000AB06                          1221  ; INPUT: 
0000AB06                          1222  ;           A1.L    - POINTER TO ENEMY
0000AB06                          1223  ENEHCOL     
0000AB06  137C 00FF 0001          1224              MOVE.B  #ENSTDTH,ENEMENBL(A1)   ; KILL ITSELF
0000AB0C  33FC FFE6 0000B29C      1225              MOVE.W   #-JMPFRCE/2,PLFCEY     ; GIVE JUMP FORCE TO PLAYER
0000AB14  4E75                    1226              RTS
0000AB16                          1227              
0000AB16                          1228  ; SUBROUTINE OF BEHAVIOUR FOR ENEMIES WHEN THE PLAYER COLLIDES WITH OTHER PART THAN HEAD
0000AB16                          1229  ENEPCOL   
0000AB16  5379 0000B2A0           1230              SUBQ.W  #1,PLHEALTH             ; DAMAGE PLAYER
0000AB1C  33FC 0BB8 0000B2A4      1231              MOVE.W  #INVCTIM,PLINVCB        ; SET PLAYER'S INVINCIBILITY TIMER
0000AB24  33FC 0000 0000B2A2      1232              MOVE.W  #0,PLAPWUP              ; REMOVE POWER-UP TO PLAYER
0000AB2C  4E75                    1233              RTS
0000AB2E                          1234  
0000AB2E                          1235  ; SUBROUTINE OF BEHAVIOR FOR MUSHROOM POWER-UP WHEN PLAYER COLLIDES
0000AB2E                          1236  MROMCOL
0000AB2E  33FC 0002 0000B2A0      1237              MOVE.W  #2,PLHEALTH             ; SET PLAYER HEALTH TO 2
0000AB36  33FC 0001 0000B2A2      1238              MOVE.W  #MRMPWID,PLAPWUP        ; SET POWER-UP TO MUSHROOM
0000AB3E  137C 00FF 0001          1239              MOVE.B  #ENSTDTH,ENEMENBL(A1)   ; KILL ITSELF
0000AB44  4E75                    1240              RTS
0000AB46                          1241  
0000AB46                          1242  ; SUBROUTINE OF BEHAVIOR FOR NON-BEHAVIORAL ENTITIES
0000AB46                          1243  NOBEHAV
0000AB46  4E75                    1244              RTS  
0000AB48                          1245  
0000AB48                          1246  ; SUBROUTINE OF BEHAVIOR FOR COINS WHEN PICKING UP
0000AB48                          1247  COINCOL
0000AB48  5279 0000B29A           1248              ADDQ.W  #1,PLCOIN               ; ADD COIN TO PLAYER
0000AB4E  137C 00FF 0001          1249              MOVE.B  #ENSTDTH,ENEMENBL(A1)   ; KILL ITSELF
0000AB54  4E75                    1250              RTS          
0000AB56                          1251  
0000AB56                          1252  ; SUBROUTINE OF BEHAVIOR FOR FLAG
0000AB56                          1253  FLAGCOL
0000AB56  33FC 0004 0000B274      1254              MOVE.W  #4,GAMESTA              ; WIN STATE SCREEN
0000AB5E  4E75                    1255              RTS            
0000AB60                          1256  ; ----------------------------------------------------------------
0000AB60                          1257  ; Subroutines of behavior
0000AB60                          1258  ; ----------------------------------------------------------------
0000AB60                          1259  
0000AB60                          1260  ; Subroutine to update the state of a goomba
0000AB60                          1261  ; Input:
0000AB60                          1262  ;           - A1.L  - ADDRESS OF ENEMY IN DYNAMIC MEMORY
0000AB60                          1263  GMBASTU        
0000AB60  48E7 FF00               1264              MOVEM.L D0-D7,-(A7)
0000AB64  2F0A                    1265              MOVE.L  A2,-(A7) 
0000AB66                          1266              ; MOVE applying current direction
0000AB66                          1267              ; check collisions with map horizontally
0000AB66                          1268              ; if colliding, change direction
0000AB66                          1269              ; check collisions in vertical axis: down, if not grounded, apply gravity
0000AB66                          1270              ; if current Y position is bigger than a threshold, kill enemy
0000AB66  45F9 0000A458           1271              LEA.L   GOOMBA,A2        
0000AB6C                          1272  .MOVHOR     ; HORIZONTAL MOVEMENT
0000AB6C  343C 0001               1273              MOVE.W  #1,D2                   ; CHECK IF IT'S GROUNDED
0000AB70  303C 0048               1274              MOVE.W  #TILEPXS,D0             ; GET BOUNDING BOX OF ENEMY IN PX
0000AB74  3629 0004               1275              MOVE.W  ENEMXPOS(A1),D3
0000AB78  3829 0006               1276              MOVE.W  ENEMYPOS(A1),D4
0000AB7C                          1277              
0000AB7C                          1278              ; CHECK IF THE Y THRESHOLD HAS BEEN SURPASSED, ENEMY MUST BE DISABLED
0000AB7C  B87C 03A8               1279              CMP.W   #MAXYDIE*TILEPXS,D4
0000AB80  6E00 00AA               1280              BGT     .DIE
0000AB84                          1281              
0000AB84                          1282              ;CHECK AT RIGHT
0000AB84  323C 0001               1283              MOVE.W  #1,D1
0000AB88  4EB9 0000AC4C           1284              JSR     ENCKCOL
0000AB8E  BA7C 0000               1285              CMP.W   #0,D5
0000AB92  6E00 003C               1286              BGT     .GRONDD
0000AB96                          1287              ; CHECK AT CENTER
0000AB96  323C 0000               1288              MOVE.W  #0,D1
0000AB9A  4EB9 0000AC4C           1289              JSR     ENCKCOL
0000ABA0  BA7C 0000               1290              CMP.W   #0,D5
0000ABA4  6E00 002A               1291              BGT     .GRONDD
0000ABA8                          1292              ; CHECK AT LEFT 
0000ABA8  323C FFFF               1293              MOVE.W  #-1,D1
0000ABAC  4EB9 0000AC4C           1294              JSR     ENCKCOL
0000ABB2  BA7C 0000               1295              CMP.W   #0,D5
0000ABB6  6E00 0018               1296              BGT     .GRONDD
0000ABBA                          1297      
0000ABBA                          1298              ; IT'S NOT GROUNDED, APPLY GRAVITY
0000ABBA  4EB9 0000AC3A           1299              JSR APPGRAV
0000ABC0                          1300              ; SET NEW Y-POSITION AFTER APPLYING GRAVITY
0000ABC0  3829 0006               1301              MOVE.W  ENEMYPOS(A1),D4
0000ABC4  D869 0008               1302              ADD.W   ENEMYFCE(A1),D4
0000ABC8  3344 0006               1303              MOVE.W  D4,ENEMYPOS(A1)
0000ABCC  6000 0064               1304              BRA     .RTN                    ; DON'T APPLY VERTICAL SPEED IF FALLING
0000ABD0                          1305  .GRONDD    
0000ABD0  3C29 0006               1306              MOVE.W  ENEMYPOS(A1),D6         ; GET CURRENT Y-POSITION
0000ABD4  9C47                    1307              SUB.W   D7,D6                   ; APPLY OFFSET TO LEAVE COLLISION
0000ABD6  3346 0006               1308              MOVE.W  D6,ENEMYPOS(A1)         ; SET NEW Y-POSITION
0000ABDA  337C 0000 0008          1309              MOVE.W  #0,ENEMYFCE(A1)         ; SET Y-FORCE TO 0
0000ABE0                          1310  .MOVERT
0000ABE0  303C 0048               1311              MOVE.W  #TILEPXS,D0             ; GET SIZE OF BOUNDING BOX OF ENEMY IN PX
0000ABE4  3229 0002               1312              MOVE.W  ENEMMDIR(A1),D1         ; GET CURRENT MOVEMENT DIRECTION IN THE X-AXIS
0000ABE8  343C 0000               1313              MOVE.W  #0,D2                   ; SET DIRECTION IN THE Y-AXIS AS 0, TO CHECK VERTICAL COLLISIONS
0000ABEC  3629 0004               1314              MOVE.W  ENEMXPOS(A1),D3         ; GET CURRENT X POSITION
0000ABF0  3829 0006               1315              MOVE.W  ENEMYPOS(A1),D4         ; GET CURRENT Y POSITION
0000ABF4                          1316  
0000ABF4                          1317              
0000ABF4  4EB9 0000AC4C           1318              JSR     ENCKCOL                  ; CHECK IF IT'S COLLIDING
0000ABFA  BA7C 0000               1319              CMP.W   #0,D5
0000ABFE  6600 001C               1320              BNE     .COLVERT                 ; IT'S COLLIDING VERTICALLY
0000AC02                          1321              ; IT'S NOT COLLIDING, MOVE VERTICALLY
0000AC02  1A29 0000               1322              MOVE.B  ENEMTYPE(A1),D5         ; GET ENEMY TYPE
0000AC06  CAFC 0012               1323              MULU.W  #ENEMSZB,D5             ; GET ENEMY TYPE OFFSET
0000AC0A  C3F2 5000               1324              MULS.W  ENTYPXSP(A2,D5.W),D1    ; APPLY VERTICAL SPEED TO CURRENT DIR
0000AC0E  3629 0004               1325              MOVE.W  ENEMXPOS(A1),D3         ; GET CURRENT X POSITION
0000AC12  D641                    1326              ADD.W   D1,D3   
0000AC14  3343 0004               1327              MOVE.W  D3,ENEMXPOS(A1)         ; SET NEW X POSITION OF ENEMY
0000AC18  6000 0018               1328              BRA     .RTN                    ; LEAVE
0000AC1C                          1329  .COLVERT
0000AC1C  3E29 0002               1330              MOVE.W  ENEMMDIR(A1),D7
0000AC20  CFFC FFFF               1331              MULS.W  #-1,D7                  ; INVERT CURRENT MOVEMENT OF DIRECTION IN X-AXIS
0000AC24  3347 0002               1332              MOVE.W  D7,ENEMMDIR(A1)  
0000AC28  6000 0008               1333              BRA     .RTN
0000AC2C                          1334  .DIE                    
0000AC2C  137C 0000 0001          1335              MOVE.B  #0,ENEMENBL(A1)
0000AC32                          1336  .RTN
0000AC32  245F                    1337              MOVE.L  (A7)+,A2
0000AC34  4CDF 00FF               1338              MOVEM.L (A7)+,D0-D7
0000AC38  4E75                    1339              RTS 
0000AC3A                          1340  
0000AC3A                          1341  ; APPLY GRAVITY TO ENTITY
0000AC3A                          1342  ; A1.L      - ADDRESS OF ENTITY IN MEMORY
0000AC3A                          1343  APPGRAV
0000AC3A  2F01                    1344              MOVE.L  D1,-(A7)
0000AC3C  3229 0008               1345              MOVE.W  ENEMYFCE(A1),D1         ; GET CURRENT Y-FORCE
0000AC40  0641 0004               1346              ADD.W   #GRAVITY,D1             ; APPLY GRAVITY TO CURRENT Y-FORCE
0000AC44  3341 0008               1347              MOVE.W  D1,ENEMYFCE(A1)         ; SET NEW Y-FORCE
0000AC48                          1348              
0000AC48  221F                    1349              MOVE.L (A7)+,D1
0000AC4A  4E75                    1350              RTS
0000AC4C                          1351  
0000AC4C                          1352  
0000AC4C                          1353  ; ----------------------
0000AC4C                          1354  ; Check if it there is a tile applying the direction given by D1.W & D2.W from
0000AC4C                          1355  ; position D3.W & D4.W
0000AC4C                          1356  ; - Input: 
0000AC4C                          1357  ;           - D0.W: size of object
0000AC4C                          1358  ;           - D1.W: x-axis direction
0000AC4C                          1359  ;           - D2.W: y-axis direction 
0000AC4C                          1360  ;           - D3.W: x-axis position 
0000AC4C                          1361  ;           - D4.W: y-axis position                    
0000AC4C                          1362  ; - Output: 
0000AC4C                          1363  ;           - D5.W -> returns id of tile in that position: 0 is not colliding.
0000AC4C                          1364  ;           - D6.W -> returns x-axis position that the object should move to leave the collider
0000AC4C                          1365  ;           - D7.W -> returns y-axis position that the object should move to leave the collider
0000AC4C                          1366  ;-----------------------
0000AC4C                          1367  ENCKCOL
0000AC4C  48E7 F800               1368              MOVEM.L D0-D4,-(A7)
0000AC50  2F09                    1369              MOVE.L  A1,-(A7)
0000AC52  3A02                    1370              MOVE.W  D2,D5
0000AC54  E18D                    1371              LSL.L   #8,D5
0000AC56  E18D                    1372              LSL.L   #8,D5    
0000AC58  3A01                    1373              MOVE.W  D1,D5
0000AC5A  E248                    1374              LSR.W   #1,D0
0000AC5C  C3C0                    1375              MULS.W  D0,D1
0000AC5E  C5C0                    1376              MULS.W  D0,D2
0000AC60  D243                    1377              ADD.W   D3,D1
0000AC62  D444                    1378              ADD.W   D4,D2
0000AC64  C2BC 0000FFFF           1379              AND.L   #$0000FFFF,D1
0000AC6A  C4BC 0000FFFF           1380              AND.L   #$0000FFFF,D2
0000AC70                          1381              ; Transform global position to tilemap position
0000AC70  82FC 0048               1382              DIVU.W  #TILEPXS,D1
0000AC74  84FC 0048               1383              DIVU.W  #TILEPXS,D2
0000AC78                          1384              
0000AC78                          1385              ; Save tile coords in case we need them after checking collision
0000AC78  3601                    1386              MOVE.W  D1,D3
0000AC7A  3802                    1387              MOVE.W  D2,D4
0000AC7C                          1388               
0000AC7C  2C01                    1389              MOVE.L  D1,D6
0000AC7E  2E02                    1390              MOVE.L  D2,D7
0000AC80  E08E                    1391              LSR.L   #8,D6
0000AC82  E08E                    1392              LSR.L   #8,D6
0000AC84  E08F                    1393              LSR.L   #8,D7
0000AC86  E08F                    1394              LSR.L   #8,D7
0000AC88                          1395              
0000AC88  BA7C 0000               1396              CMP.W   #0,D5
0000AC8C  6E00 000A               1397              BGT     .SKPCLMPX
0000AC90  0446 0048               1398              SUB.W   #TILEPXS,D6
0000AC94  CDFC FFFF               1399              MULS.W  #-1,D6
0000AC98                          1400  .SKPCLMPX
0000AC98  E08D                    1401              LSR.L   #8,D5
0000AC9A  E08D                    1402              LSR.L   #8,D5
0000AC9C  BA7C 0000               1403              CMP.W   #0,D5
0000ACA0  6E00 000A               1404              BGT     .SKPCLMPY
0000ACA4  0447 0048               1405              SUB.W   #TILEPXS,D7
0000ACA8  CFFC FFFF               1406              MULS.W  #-1,D7
0000ACAC                          1407  .SKPCLMPY  
0000ACAC  B27C 0000               1408              CMP.W   #0,D1
0000ACB0  6D00 0038               1409              BLT     .OUTMAPX
0000ACB4  B279 0000A226           1410              CMP.W   MTLWDTH,D1
0000ACBA  6E00 002E               1411              BGT     .OUTMAPX
0000ACBE                          1412              
0000ACBE                          1413               
0000ACBE  B47C 0000               1414              CMP.W   #0,D2
0000ACC2  6D00 0036               1415              BLT     .OUTMAPY
0000ACC6  B479 0000A224           1416              CMP.W   MTLHGHT,D2
0000ACCC  6E00 002C               1417              BGT     .OUTMAPY
0000ACD0                          1418              
0000ACD0                          1419              ; CHECK IF THERE IS A NON-AIR BLOCK IN TILEMAP
0000ACD0  C5F9 0000A226           1420              MULS.W  MTLWDTH,D2
0000ACD6  D441                    1421              ADD.W   D1,D2                   ; GET INDEX IN TILEMAP
0000ACD8  C5FC 0002               1422              MULS.W  #2,D2
0000ACDC  43F9 000083C0           1423              LEA.L   LVLCDAT,A1
0000ACE2  3A31 2000               1424              MOVE.W  0(A1,D2.W),D5           ; GET TILE OF COLISION
0000ACE6  6000 001A               1425              BRA .RTN
0000ACEA                          1426  .OUTMAPX
0000ACEA  3A3C FFFF               1427              MOVE.W  #-1,D5                  ; IT'S OUTSIDE OF MAP IN X AXIS
0000ACEE  0446 0048               1428              SUB.W   #TILEPXS,D6
0000ACF2  CDFC FFFF               1429              MULS.W  #-1,D6
0000ACF6  6000 000A               1430              BRA .RTN
0000ACFA                          1431  .OUTMAPY
0000ACFA  3E3C 0000               1432              MOVE.W  #0,D7                   ; IT'S OUTSIDE OF MAP IN Y AXIS
0000ACFE  3A3C 0000               1433              MOVE.W  #0,D5
0000AD02                          1434              
0000AD02                          1435  .RTN
0000AD02  225F                    1436              MOVE.L  (A7)+,A1
0000AD04  4CDF 001F               1437              MOVEM.L (A7)+,D0-D4
0000AD08  4E75                    1438              RTS
0000AD0A                          1439              
0000AD0A                          1440  
0000AD0A                          1441  
0000AD0A                          1442  
0000AD0A                          1443  
0000AD0A                          1444                         
0000AD0A                          1445  
0000AD0A                          1446  
0000AD0A                          1447  
0000AD0A                          1448  
0000AD0A                          1449  
0000AD0A                          1450  
0000AD0A                          1451  
0000AD0A                          1452  
0000AD0A                          1453  -------------------- end include --------------------
0000AD0A                          1454              INCLUDE "SYSVARS.X68"
0000AD0A                          1455  ; --- KEYBOARD RELATED VARIABLES ----------------------------------------------
0000AD0A                          1456  
0000AD0A= 00                      1457  KBDVAL      DC.B    0                       ; KEY PRESSED=1
0000AD0B= 00                      1458  KBDEDGE     DC.B    0                       ; KEY CHANGED=1
0000AD0C                          1459              DS.W    0
0000AD0C                          1460  
0000AD0C                          1461  ; --- MOUSE RELATED VARIABLES -------------------------------------------------
0000AD0C                          1462  
0000AD0C= 0000                    1463  MOUXPOS     DC.W    0                       ; CURRENT X MOUSE POSITION IN WINDOW
0000AD0E= 0000                    1464  MOUYPOS     DC.W    0                       ; CURRENT Y MOUSE POSITION IN WINDOW
0000AD10= 00                      1465  MOUBSTA     DC.B    0                       ; CURRENY MOUSE BUTTONS STATE: 0 - LEFT CLICK
0000AD11                          1466  
0000AD11                          1467  ; --- SCREEN RELATED VARIABLES ------------------------------------------------
0000AD11                          1468  
0000AD11                          1469  SCRINTCT    DS.B    1                       ; INTERRUPT COUNTER/FLAG
0000AD12                          1470  SCRCYCCT    DS.B    1                       ; CYCLE COUNTER
0000AD14                          1471              DS.W    0
0000AD14                          1472  
0000AD14                          1473  ; DELTA TIME
0000AD14= 0000                    1474  DELTATME    DC.W    0                       ; DELTA TIME
0000AD16                          1475  
0000AD16                          1476  -------------------- end include --------------------
0000AD16                          1477              INCLUDE "BUTTONS.X68"
0000AD16                          1478  ;BUTTON CONSTANTS
0000AD16  =000000CC               1479  STBUTWD     EQU     WDWIDTH/5               ; WDITH OF BUTTONS
0000AD16  =00000048               1480  STBUTHT     EQU     WDHEIGHT/10             ; HEIGHT OF BUTTONS
0000AD16                          1481  
0000AD16                          1482  ; BUTTON STATE CONSTANTS
0000AD16  =00000000               1483  BTNSTANH    EQU     0                       ; BUTTON NOT HOVERED
0000AD16  =00000001               1484  BTNSTAHO    EQU     1                       ; BUTTON HOVERED
0000AD16  =00000002               1485  BTNSTACL    EQU     2                       ; BUTTON CLICKED
0000AD16                          1486  
0000AD16                          1487  ; BUTTON OFFSET CONSTANTS
0000AD16  =00000000               1488  OFFBEDC     EQU     0                       ; OFFSET TO EDGE COLOR
0000AD16  =00000004               1489  OFFBCST     EQU     4                       ; OFFSET TO STATE OF BUTTON
0000AD16  =00000006               1490  OFFFNHO     EQU     6                       ; OFFSET TO FILL COLOR WHEN NOT HOVERED
0000AD16  =0000000A               1491  OFFFHOC     EQU     10                      ; OFFSET TO FILL COLOR WHEN HOVERED
0000AD16  =0000000E               1492  OFFFCLC     EQU     14                      ; OFFSET TO FILL COLOR WHEN CLICKED
0000AD16  =00000012               1493  OFFLTCX     EQU     18                      ; OFFSET TO LT CORNER X POS
0000AD16  =00000014               1494  OFFLTCY     EQU     20                      ; OFFSET TO LT CORNER Y POS
0000AD16  =00000016               1495  OFFRBCX     EQU     22                      ; OFFSET TO RB CORNER X POS
0000AD16  =00000018               1496  OFFRBCY     EQU     24                      ; OFFSET TO RB CORNER Y POS
0000AD16  =0000001A               1497  OFFCLSU     EQU     26                      ; OFFSET TO ON CLICK SUBROUTINE
0000AD16  =0000001E               1498  OFFBSTR     EQU     30                      ; OFFSET TO STRING OF BUTTON
0000AD16                          1499  ; BUTTONS INFO
0000AD16                          1500  STARTBUT
0000AD16= 00FFFFFF                1501              DC.L    $00FFFFFF               ; EDGE COLOR
0000AD1A= 0000                    1502              DC.W    0                       ; CURRENT STATE OF BUTTON
0000AD1C= 00000000                1503              DC.L    $00000000               ; FILL COLOR NOT HOVERED
0000AD20= 00AAAAAA                1504              DC.L    $00AAAAAA               ; FILL COLOR ON HOVER
0000AD24= 00444444                1505              DC.L    $00444444               ; FILL COLOR WHEN CLICKED
0000AD28= 019A                    1506              DC.W    (WDWIDTH-STBUTWD)/2     ; LEFT-TOP CORNER X POS
0000AD2A= 0144                    1507              DC.W    (WDHEIGHT-STBUTHT)/2    ; LEFT-TOP CORNER Y POS
0000AD2C= 0266                    1508              DC.W    (WDWIDTH+STBUTWD)/2     ; RIGHT-BOTTOM CORNER X POS
0000AD2E= 018C                    1509              DC.W    (WDHEIGHT+STBUTHT)/2    ; RIGHT-BOTTOM CORNER Y POS
0000AD30= 0000AE5E                1510              DC.L    STARTGAME               ; POINTER TO SUBROUTINE TO CALL WHEN CLICKED
0000AD34= 000071A8                1511              DC.L    STRSTARTBUTTON          ; POINTER TO STRING
0000AD38                          1512  RETURNBUT
0000AD38= 00FFFFFF                1513              DC.L    $00FFFFFF               ; EDGE COLOR
0000AD3C= 0000                    1514              DC.W    0                       ; CURRENT STATE OF BUTTON
0000AD3E= 00000000                1515              DC.L    $00000000               ; FILL COLOR NOT HOVERED
0000AD42= 00AAAAAA                1516              DC.L    $00AAAAAA               ; FILL COLOR ON HOVER
0000AD46= 00444444                1517              DC.L    $00444444               ; FILL COLOR WHEN CLICKED
0000AD4A= 019A                    1518              DC.W    (WDWIDTH-STBUTWD)/2    ; LEFT-TOP CORNER X POS
0000AD4C= 0144                    1519              DC.W    (WDHEIGHT-STBUTHT)/2    ; LEFT-TOP CORNER Y POS
0000AD4E= 0266                    1520              DC.W    (WDWIDTH+STBUTWD)/2     ; RIGHT-BOTTOM CORNER X POS
0000AD50= 018C                    1521              DC.W    (WDHEIGHT+STBUTHT)/2    ; RIGHT-BOTTOM CORNER Y POS
0000AD52= 0000AEDC                1522              DC.L    RETURN                  ; POINTER TO SUBROUTINE TO CALL WHEN CLICKED
0000AD56= 00007206                1523              DC.L    STRRETURN               ; POINTER TO STRING            
0000AD5A                          1524  EXITBUT
0000AD5A= 00FFFFFF                1525              DC.L    $00FFFFFF               ; EDGE COLOR
0000AD5E= 0000                    1526              DC.W    0                       ; CURRENT STATE OF BUTTON
0000AD60= 00000000                1527              DC.L    $00000000               ; FILL COLOR NOT HOVERED
0000AD64= 00AAAAAA                1528              DC.L    $00AAAAAA               ; FILL COLOR ON HOVER
0000AD68= 00444444                1529              DC.L    $00444444               ; FILL COLOR WHEN CLICKED
0000AD6C= 019A                    1530              DC.W    (WDWIDTH-STBUTWD)/2     ; LEFT-TOP CORNER X POS
0000AD6E= 018C                    1531              DC.W    (WDHEIGHT-STBUTHT)/2+STBUTHT    ; LEFT-TOP CORNER Y POS
0000AD70= 0266                    1532              DC.W    (WDWIDTH+STBUTWD)/2     ; RIGHT-BOTTOM CORNER X POS
0000AD72= 01D4                    1533              DC.W    (WDHEIGHT+STBUTHT)/2+STBUTHT    ; RIGHT-BOTTOM CORNER Y POS
0000AD74= 00010602                1534              DC.L    EXIT                    ; POINTER TO SUBROUTINE TO CALL WHEN CLICKED
0000AD78= 0000720E                1535              DC.L    STREXIT                 ; POINTER TO STRING              
0000AD7C                          1536  ; SUBROUTINE TO CHECK IF MOUSE IS INSIDE A GIVEN BUTTON
0000AD7C                          1537  ; --- SUBROUTINE TO UPDATE MOUSE STATE, ALSO CALLS ITS SUBROUTINE WHEN CLICKED
0000AD7C                          1538  ;     Input:
0000AD7C                          1539  ;           - A1.L      - POINTER TO BUTTON
0000AD7C                          1540  ;     Output:
0000AD7C                          1541  ;           - None
0000AD7C                          1542  ;     Modifies:
0000AD7C                          1543  ;           - None
0000AD7C                          1544  ; ---------------------------------------------------------------------------
0000AD7C                          1545  CHKMOUBUT
0000AD7C  48E7 FE00               1546              MOVEM.L D0-D6,-(A7)
0000AD80  48E7 0040               1547              MOVEM.L  A1,-(A7)
0000AD84  3629 0012               1548              MOVE.W  OFFLTCX(A1),D3
0000AD88  3829 0014               1549              MOVE.W  OFFLTCY(A1),D4
0000AD8C  3A29 0016               1550              MOVE.W  OFFRBCX(A1),D5
0000AD90  3C29 0018               1551              MOVE.W  OFFRBCY(A1),D6
0000AD94  3239 0000AD0C           1552              MOVE.W  MOUXPOS,D1
0000AD9A  3439 0000AD0E           1553              MOVE.W  MOUYPOS,D2
0000ADA0  4EB8 7098               1554              JSR CHKINBBO                    ; CHECK IF IT'S INSIDE GIVEN BOUNDING BOX
0000ADA4  B03C 0000               1555              CMP.B   #0,D0                   ; CHECK IF IT'S INSIDE OR NOT
0000ADA8  6700 001A               1556              BEQ     .OUTSIDE
0000ADAC                          1557              ; IT'S INSIDE
0000ADAC  1039 0000AD10           1558              MOVE.B  MOUBSTA,D0
0000ADB2  B03C 0000               1559              CMP.B   #0,D0                   ; CHECK IF MOUSE LEFT CLICK IS PRESSED
0000ADB6  6700 0016               1560              BEQ     .NOTPRESSED
0000ADBA  337C 0002 0004          1561              MOVE.W  #BTNSTACL,OFFBCST(A1)   ; SET STATE TO CLICKED
0000ADC0  6000 002C               1562              BRA     .RTN 
0000ADC4                          1563  .OUTSIDE    ; MOUSE IS OUTSIDE BUTTON
0000ADC4  337C 0000 0004          1564              MOVE.W  #BTNSTANH,OFFBCST(A1)   ; SET STATE TO NON-HOVERED 
0000ADCA  6000 0022               1565              BRA     .RTN      
0000ADCE                          1566  .NOTPRESSED 
0000ADCE  0C69 0002 0004          1567              CMP.W   #BTNSTACL,OFFBCST(A1)   ; CHECK IF IT WAS LEFT CLICKED BEFORE
0000ADD4  6700 000C               1568              BEQ     .UNCLICKED
0000ADD8  337C 0001 0004          1569              MOVE.W  #BTNSTAHO,OFFBCST(A1)   ; SET STATE TO HOVERED
0000ADDE  6000 000E               1570              BRA     .RTN
0000ADE2                          1571  .UNCLICKED
0000ADE2  337C 0000 0004          1572              MOVE.W  #BTNSTANH,OFFBCST(A1)   ; SET STATE TO NON-HOVERED 
0000ADE8  2269 001A               1573              MOVE.L  OFFCLSU(A1),A1          ; GET SUBROUTINE TO CALL WHEN CLICKED
0000ADEC  4E91                    1574              JSR     (A1)
0000ADEE                          1575                         
0000ADEE                          1576  .RTN
0000ADEE  4CDF 0200               1577              MOVEM.L (A7)+,A1
0000ADF2  4CDF 007F               1578              MOVEM.L (A7)+,D0-D6
0000ADF6  4E75                    1579              RTS            
0000ADF8                          1580  
0000ADF8                          1581  ; --- SUBROUTINE TO DRAW A BUTTON & UPDATES ITS STATE
0000ADF8                          1582  ;     Input:
0000ADF8                          1583  ;           - A1.L      - POINTER TO BUTTON
0000ADF8                          1584  ;     Output:
0000ADF8                          1585  ;           - None
0000ADF8                          1586  ;     Modifies:
0000ADF8                          1587  ;           - STATE OF BUTTON
0000ADF8                          1588  ; --------------------------------------------------------------------------- 
0000ADF8                          1589  RENDERBUTTON
0000ADF8  48E7 FF00               1590              MOVEM.L D0-D7,-(A7)
0000ADFC  48E7 0040               1591              MOVEM.L A1,-(A7)
0000AE00                          1592              
0000AE00  4EB9 0000AD7C           1593              JSR     CHKMOUBUT               ; UPDATE BUTTON STATE
0000AE06                          1594              
0000AE06  2211                    1595              MOVE.L  (A1),D1                 ; GET EDGE COLOR
0000AE08  303C 0050               1596              MOVE.W  #80,D0                  ; SET EDGE COLOR
0000AE0C  4E4F                    1597              TRAP    #15
0000AE0E  4281                    1598              CLR.L   D1
0000AE10  3229 0004               1599              MOVE.W  OFFBCST(A1),D1          ; GET CURRENT STATE OF MOUSE 
0000AE14  C2FC 0004               1600              MULU.W  #4,D1                   ; GET OFFSET FOR THE POINTER OF FILL COLOR DEPENDING ON STATE
0000AE18  2231 1006               1601              MOVE.L  OFFFNHO(A1,D1.W),D1     ; GET FILL COLOR
0000AE1C  303C 0051               1602              MOVE.W  #81,D0                  ; SET FILL COLOR
0000AE20  4E4F                    1603              TRAP    #15
0000AE22  3229 0012               1604              MOVE.W  OFFLTCX(A1),D1          ; GET LT CORNER X POS
0000AE26  3429 0014               1605              MOVE.W  OFFLTCY(A1),D2          ; GET LT CORNER Y POS
0000AE2A  3629 0016               1606              MOVE.W  OFFRBCX(A1),D3          ; GET RB CORNER X POS
0000AE2E  3829 0018               1607              MOVE.W  OFFRBCY(A1),D4          ; GET RB CORNER Y POS  
0000AE32                          1608              
0000AE32  303C 0057               1609              MOVE.W  #87,D0                  ; DRAW RECTANGLE
0000AE36  4E4F                    1610              TRAP    #15
0000AE38                          1611              
0000AE38                          1612              ; DRAW STRING
0000AE38  2269 001E               1613              MOVE.L  OFFBSTR(A1),A1
0000AE3C  0641 006E               1614              ADD.W   #(STBUTWD/2)+8,D1
0000AE40  5042                    1615              ADD.W   #8,D2
0000AE42  4EB8 70BE               1616              JSR     CALCCENTERSTR
0000AE46  303C 005F               1617              MOVE.W  #95,D0
0000AE4A  4E4F                    1618              TRAP    #15
0000AE4C                          1619              
0000AE4C  7200                    1620              MOVE.L  #0,D1                 
0000AE4E  303C 0051               1621              MOVE.W  #81,D0                  ; SET EDGE COLOR
0000AE52  4E4F                    1622              TRAP    #15
0000AE54                          1623              
0000AE54  4CDF 0200               1624              MOVEM.L (A7)+,A1
0000AE58  4CDF 00FF               1625              MOVEM.L (A7)+,D0-D7
0000AE5C  4E75                    1626              RTS
0000AE5E                          1627  ; --- SUBROUTINE THAT STARTS THE GAME AND RESETS THE GAME VARIABLES 
0000AE5E                          1628  ;     Input:
0000AE5E                          1629  ;           - None
0000AE5E                          1630  ;     Output:
0000AE5E                          1631  ;           - None
0000AE5E                          1632  ;     Modifies:
0000AE5E                          1633  ;           - All game variables
0000AE5E                          1634  ; --------------------------------------------------------------------------- 
0000AE5E                          1635  STARTGAME     
0000AE5E  48E7 00C0               1636              MOVEM.L A0-A1,-(A7)
0000AE62                          1637         
0000AE62  33FC 0001 0000B274      1638              MOVE.W  #1,GAMESTA              ; SETS STATE TO LOAD LEVEL
0000AE6A                          1639              ; RESTART ALL PLAYER VARIABLES
0000AE6A  33FC 0001 0000B2A0      1640              MOVE.W  #1,PLHEALTH
0000AE72  33FC 0000 0000B272      1641              MOVE.W  #0,CAMX
0000AE7A  33FC 0000 0000B276      1642              MOVE.W  #0,CLVLLOA
0000AE82  33FC 00C8 0000B278      1643              MOVE.W  #200,PLPOSX
0000AE8A  33FC 00C8 0000B27A      1644              MOVE.W  #200,PLPOSY
0000AE92  33FC 0000 0000B29A      1645              MOVE.W  #0,PLCOIN
0000AE9A  33FC 0000 0000B29C      1646              MOVE.W  #0,PLFCEY
0000AEA2  33FC 0000 0000B2A2      1647              MOVE.W  #0,PLAPWUP
0000AEAA  33FC 0000 0000B2A4      1648              MOVE.W  #0,PLINVCB
0000AEB2                          1649              ; ITERATE THROUGH ENEMY LIST
0000AEB2  41F9 0000A4B2           1650              LEA.L   ENEMLIS,A0
0000AEB8  6000 0010               1651              BRA     .ENNEXT
0000AEBC                          1652  .ENLOOP
0000AEBC  2250                    1653              MOVE.L  (A0),A1                 ; GET POINTER OF ENEMY IN DYNAMIC MEMORY
0000AEBE  4EB9 0000B966           1654              JSR     DMFREE                  ; FREE MEMORY OF ENEMY
0000AEC4  20FC FFFFFFFF           1655              MOVE.L  #$FFFFFFFF,(A0)+         ; SET EMPTY                  
0000AECA                          1656  .ENNEXT
0000AECA  2250                    1657              MOVE.L  (A0),A1
0000AECC  B2FC FFFF               1658              CMP     #$FFFFFFFF,A1           ; CHECK IF THE POINTER IS AN END POINT
0000AED0  6700 0004               1659              BEQ     .ENSTOP                 
0000AED4  60E6                    1660              BRA     .ENLOOP                 ; THERE IS STILL AN ENEMY
0000AED6                          1661  .ENSTOP
0000AED6  4CDF 0300               1662              MOVEM.L (A7)+,A0-A1
0000AEDA  4E75                    1663              RTS
0000AEDC                          1664              
0000AEDC                          1665  
0000AEDC                          1666  ; --- SUBROUTINE THAT RETURNS TO MAIN MENU 
0000AEDC                          1667  ;     Input:
0000AEDC                          1668  ;           - None
0000AEDC                          1669  ;     Output:
0000AEDC                          1670  ;           - None
0000AEDC                          1671  ;     Modifies:
0000AEDC                          1672  ;           - GAME STATE VARIABLE
0000AEDC                          1673  ; --------------------------------------------------------------------------- 
0000AEDC                          1674  RETURN          
0000AEDC  33FC 0000 0000B274      1675              MOVE.W  #0,GAMESTA              ; SETS STATE TO LOAD LEVEL
0000AEE4  4E75                    1676              RTS
0000AEE6                          1677                          
0000AEE6                          1678              
0000AEE6                          1679  
0000AEE6                          1680  
0000AEE6                          1681  
0000AEE6                          1682  
0000AEE6                          1683  
0000AEE6                          1684  
0000AEE6                          1685  
0000AEE6                          1686  
0000AEE6                          1687  
0000AEE6                          1688  -------------------- end include --------------------
0000AEE6                          1689              INCLUDE "RENDERER.X68"
0000AEE6                          1690  RENDER
0000AEE6  48E7 FF00               1691              MOVEM.L D0-D7,-(A7)
0000AEEA  4280                    1692              CLR.L   D0
0000AEEC  4281                    1693              CLR.L   D1
0000AEEE  4282                    1694              CLR.L   D2
0000AEF0  4283                    1695              CLR.L   D3
0000AEF2  4284                    1696              CLR.L   D4
0000AEF4  4285                    1697              CLR.L   D5
0000AEF6  4286                    1698              CLR.L   D6
0000AEF8  4287                    1699              CLR.L   D7
0000AEFA  48E7 00F0               1700              MOVEM.L A0-A3,-(A7)
0000AEFE                          1701              
0000AEFE                          1702              ; RENDER CURRENT STATE OF GAME
0000AEFE  3039 0000B274           1703              MOVE.W  GAMESTA,D0
0000AF04  B07C 0000               1704              CMP.W   #0,D0
0000AF08  6700 002C               1705              BEQ     RNDRSTMEN
0000AF0C  B07C 0001               1706              CMP.W   #1,D0
0000AF10  6700 0116               1707              BEQ     RNDRGAM
0000AF14  B07C 0002               1708              CMP.W   #2,D0
0000AF18  6700 010E               1709              BEQ     RNDRGAM
0000AF1C  B07C 0003               1710              CMP.W   #3,D0
0000AF20  6700 00A6               1711              BEQ     RNDRDTHS
0000AF24  B07C 0004               1712              CMP.W   #4,D0
0000AF28  6700 00CE               1713              BEQ     RNDRWINS
0000AF2C                          1714  RTN            
0000AF2C  4CDF 0F00               1715              MOVEM.L (A7)+,A0-A3
0000AF30  4CDF 00FF               1716              MOVEM.L (A7)+,D0-D7
0000AF34                          1717              
0000AF34  4E75                    1718              RTS  
0000AF36                          1719  
0000AF36                          1720  ; RENDERS THE START MENU
0000AF36                          1721  RNDRSTMEN
0000AF36  123C 0008               1722              MOVE.B  #8,D1                   
0000AF3A  303C 005D               1723              MOVE.W  #93,D0                  ; SET EDGE WIDTH
0000AF3E  4E4F                    1724              TRAP    #15
0000AF40                          1725              
0000AF40  43F9 0000AD16           1726              LEA.L   STARTBUT,A1             
0000AF46  4EB9 0000ADF8           1727              JSR     RENDERBUTTON            ; RENDER START GAME BUTTON
0000AF4C                          1728              
0000AF4C  43F9 0000AD5A           1729              LEA.L   EXITBUT,A1             
0000AF52  4EB9 0000ADF8           1730              JSR     RENDERBUTTON            ; RENDER EXIT BUTTON
0000AF58                          1731              
0000AF58  43F8 71AE               1732              LEA.L   STRGAMETITLE1,A1        ; RENDER STRING OF GAME TITLE
0000AF5C  323C 0200               1733              MOVE.W  #WDWIDTH/2,D1
0000AF60  343C 0032               1734              MOVE.W  #50,D2
0000AF64  4EB8 70BE               1735              JSR     CALCCENTERSTR
0000AF68  303C 005F               1736              MOVE.W  #95,D0
0000AF6C  4E4F                    1737              TRAP    #15
0000AF6E                          1738              
0000AF6E  43F8 71B4               1739              LEA.L   STRGAMETITLE2,A1        ; RENDER STRING OF GAME TITLE
0000AF72  323C 0200               1740              MOVE.W  #WDWIDTH/2,D1
0000AF76  343C 0064               1741              MOVE.W  #100,D2
0000AF7A  4EB8 70BE               1742              JSR     CALCCENTERSTR
0000AF7E  303C 005F               1743              MOVE.W  #95,D0
0000AF82  4E4F                    1744              TRAP    #15
0000AF84                          1745              
0000AF84  43F8 71C0               1746              LEA.L   STRCONTROLS1,A1        ; RENDER STRING OF CONTROLS
0000AF88  323C 0000               1747              MOVE.W  #0,D1
0000AF8C  343C 01F4               1748              MOVE.W  #500,D2
0000AF90  303C 005F               1749              MOVE.W  #95,D0
0000AF94  4E4F                    1750              TRAP    #15
0000AF96                          1751              
0000AF96  43F8 71CA               1752              LEA.L   STRCONTROLS2,A1        ; RENDER STRING OF CONTROLS
0000AF9A  323C 0002               1753              MOVE.W  #02,D1
0000AF9E  343C 0226               1754              MOVE.W  #550,D2
0000AFA2  303C 005F               1755              MOVE.W  #95,D0
0000AFA6  4E4F                    1756              TRAP    #15
0000AFA8                          1757              
0000AFA8  43F8 71D4               1758              LEA.L   STRCONTROLS3,A1        ; RENDER STRING OF CONTROLS
0000AFAC  343C 0258               1759              MOVE.W  #600,D2
0000AFB0  303C 005F               1760              MOVE.W  #95,D0
0000AFB4  4E4F                    1761              TRAP    #15
0000AFB6                          1762              
0000AFB6  43F8 71E2               1763              LEA.L   STRCONTROLS4,A1        ; RENDER STRING OF CONTROLS
0000AFBA  343C 028A               1764              MOVE.W  #650,D2
0000AFBE  303C 005F               1765              MOVE.W  #95,D0
0000AFC2  4E4F                    1766              TRAP    #15
0000AFC4                          1767              
0000AFC4  6000 FF66               1768              BRA     RTN
0000AFC8                          1769              
0000AFC8                          1770  ; RENDERS DEATH SCREEN 
0000AFC8                          1771  RNDRDTHS
0000AFC8                          1772  
0000AFC8  123C 0008               1773              MOVE.B  #8,D1
0000AFCC  303C 005D               1774              MOVE.W  #93,D0                  ; SET EDGE WIDTH
0000AFD0  4E4F                    1775              TRAP    #15
0000AFD2                          1776              
0000AFD2  43F9 0000AD38           1777              LEA.L   RETURNBUT,A1            ; RENDER RETURN TO MAIN MENU BUTTON
0000AFD8  4EB9 0000ADF8           1778              JSR     RENDERBUTTON
0000AFDE                          1779              
0000AFDE  43F8 71F2               1780              LEA.L   STRDEATH,A1             ; RENDER DEATH STRING 
0000AFE2  323C 0200               1781              MOVE.W  #WDWIDTH/2,D1
0000AFE6  343C 0064               1782              MOVE.W  #100,D2
0000AFEA  4EB8 70BE               1783              JSR     CALCCENTERSTR
0000AFEE  303C 005F               1784              MOVE.W  #95,D0
0000AFF2  4E4F                    1785              TRAP    #15
0000AFF4                          1786              
0000AFF4  6000 FF36               1787              BRA     RTN
0000AFF8                          1788  
0000AFF8                          1789  ; RENDERS WIN SCREEN
0000AFF8                          1790  RNDRWINS 
0000AFF8  123C 0008               1791              MOVE.B  #8,D1
0000AFFC  303C 005D               1792              MOVE.W  #93,D0                  ; SET EDGE WIDTH
0000B000  4E4F                    1793              TRAP    #15
0000B002                          1794              
0000B002  43F9 0000AD38           1795              LEA.L   RETURNBUT,A1            ; RENDER RETURN TO MAIN MENU BUTTON
0000B008  4EB9 0000ADF8           1796              JSR     RENDERBUTTON
0000B00E                          1797              
0000B00E  43F8 71FC               1798              LEA.L   STRWINNER,A1            ; RENDER DEATH STRING 
0000B012  323C 0200               1799              MOVE.W  #WDWIDTH/2,D1
0000B016  343C 0064               1800              MOVE.W  #100,D2
0000B01A  4EB8 70BE               1801              JSR     CALCCENTERSTR
0000B01E  303C 005F               1802              MOVE.W  #95,D0
0000B022  4E4F                    1803              TRAP    #15
0000B024                          1804              
0000B024  6000 FF06               1805              BRA     RTN   
0000B028                          1806  ; RENDERS GAME
0000B028                          1807  RNDRGAM
0000B028  4EB8 7158               1808              JSR UPDANIMFRAME
0000B02C                          1809              
0000B02C                          1810              ; compute offset when changing the height of tilemap being drawn
0000B02C  3A39 0000A226           1811              MOVE.W  MTLWDTH,D5
0000B032  0445 000F               1812              SUB.W   #NTILESC,D5
0000B036  CAFC 0002               1813              MULU.W  #2,D5
0000B03A                          1814              ; get camera position
0000B03A  3039 0000B272           1815              MOVE.W  CAMX, D0
0000B040  81FC 0048               1816              DIVS.W  #TILEPXS,D0
0000B044  C0FC 0002               1817              MULU.W  #2,D0                   ; GET POSITION OF WORD
0000B048                          1818              ; get address of map
0000B048  41F9 000083C0           1819              LEA.L   LVLCDAT, A0
0000B04E                          1820              ; get address of first tile 
0000B04E  43F9 0000A22A           1821              LEA.L   TILE1, A1       
0000B054                          1822              ; get initial position to look up in map     
0000B054  D1C0                    1823              ADD.L   D0,A0
0000B056                          1824              ; DRAW BACKGROUND AS SKY
0000B056  223C 00FF9494           1825              MOVE.L  #$00FF9494,D1
0000B05C  303C 0051               1826              MOVE.W  #81,D0
0000B060  4E4F                    1827              TRAP    #15
0000B062  323C 0000               1828              MOVE.W  #0,D1
0000B066  343C 0000               1829              MOVE.W  #0,D2
0000B06A  363C 0400               1830              MOVE.W  #WDWIDTH,D3
0000B06E  383C 02D0               1831              MOVE.W  #WDHEIGHT,D4
0000B072  303C 0057               1832              MOVE.W  #87,D0
0000B076  4E4F                    1833              TRAP    #15                     
0000B078                          1834              ; iterate through tiles to paint
0000B078  363C 0000               1835              MOVE.W  #0,D3                   ; FIRST LOOP
0000B07C  383C 0000               1836              MOVE.W  #0,D4                   ; SECOND LOOP
0000B080  123C 0008               1837              MOVE.B  #8,D1
0000B084  303C 005D               1838              MOVE.W  #93,D0
0000B088  4E4F                    1839              TRAP    #15
0000B08A                          1840  .LOOP
0000B08A  3C18                    1841              MOVE.W  (A0)+,D6          ; Store tile id of map
0000B08C  4A46                    1842              TST.W   D6
0000B08E  6700 0052               1843              BEQ     .SKIP
0000B092  5346                    1844              SUBQ.W   #1,D6
0000B094                          1845              ; GET OFFSET FOR ADDRESS OF TILE                
0000B094  CCFC 0010               1846              MULU.W  #TILESZB,D6
0000B098                          1847              
0000B098                          1848              ; SET FILL COLOR
0000B098  2231 6000               1849              MOVE.L  OFFFCLR(A1,D6.W),D1
0000B09C  303C 0051               1850              MOVE.W  #81,D0
0000B0A0  4E4F                    1851              TRAP #15 
0000B0A2                          1852              ; SET PEN COLOR
0000B0A2  2231 6004               1853              MOVE.L  OFFECLR(A1,D6.W),D1
0000B0A6  303C 0050               1854              MOVE.W  #80,D0
0000B0AA  4E4F                    1855              TRAP    #15 
0000B0AC                          1856              
0000B0AC                          1857              ; DRAW TILE
0000B0AC                          1858              ; SAVE IN STACK CURRENT D3 & D4 VALUES FOR LATER
0000B0AC  48E7 1800               1859              MOVEM.L  D3-D4,-(A7)
0000B0B0                          1860              ; SET COORDINATES IN WINDOW OF TILE TO DRAW
0000B0B0  C6FC 0048               1861              MULU.W  #TILEPXS,D3
0000B0B4  C8FC 0048               1862              MULU.W  #TILEPXS,D4
0000B0B8  2649                    1863              MOVE.L  A1,A3            
0000B0BA  4281                    1864              CLR.L   D1
0000B0BC  3239 0000B272           1865              MOVE.W  CAMX,D1
0000B0C2  83FC 0048               1866              DIVS.W  #TILEPXS,D1
0000B0C6  E089                    1867              LSR.L   #8,D1
0000B0C8  E089                    1868              LSR.L   #8,D1
0000B0CA  9641                    1869              SUB.W   D1,D3
0000B0CC  3203                    1870              MOVE.W  D3,D1
0000B0CE  3404                    1871              MOVE.W  D4,D2
0000B0D0  0643 0048               1872              ADD.W   #TILEPXS,D3
0000B0D4  0644 0048               1873              ADD.W   #TILEPXS,D4
0000B0D8  303C 0057               1874              MOVE.W  #87,D0
0000B0DC  4E4F                    1875              TRAP    #15
0000B0DE                          1876  
0000B0DE  4CDF 0018               1877              MOVEM.L (A7)+,D3-D4
0000B0E2                          1878              ; NEXT TILE 
0000B0E2                          1879  .SKIP                  
0000B0E2  5243                    1880              ADDQ.W  #1,D3
0000B0E4  B67C 000F               1881              CMP.W   #NTILESC,D3
0000B0E8  66A0                    1882              BNE     .LOOP
0000B0EA                          1883  .SKIP2            
0000B0EA                          1884              ; RESET SECOND LOOP        
0000B0EA  D1C5                    1885              ADD.L   D5,A0
0000B0EC  363C 0000               1886              MOVE.W  #0,D3             
0000B0F0  5244                    1887              ADDQ.W  #1,D4
0000B0F2  B879 0000A224           1888              CMP.W   MTLHGHT,D4
0000B0F8  6690                    1889              BNE     .LOOP
0000B0FA  383C 0000               1890              MOVE.W  #0,D4
0000B0FE                          1891              
0000B0FE  123C 0001               1892              MOVE.B  #1,D1
0000B102  303C 005D               1893              MOVE.W  #93,D0
0000B106  4E4F                    1894              TRAP    #15
0000B108                          1895              
0000B108                          1896              ; MAP HAS BEEN DRAWN
0000B108                          1897              ; DRAW PLAYER
0000B108  3039 0000B27C           1898              MOVE.W  PLMODI,D0               ; GET CURRENT MOVEMENT OF DIRECTIONS TO FLIP SPRITE
0000B10E  B07C FFFF               1899              CMP.W   #-1,D0
0000B112  6700 0014               1900              BEQ     .LEFTDIR
0000B116  B07C 0000               1901              CMP.W   #0,D0
0000B11A  6700 0016               1902              BEQ     .IDLE
0000B11E  2279 0000B27E           1903              MOVE.L  PLSPRR1,A1
0000B124  6000 0012               1904              BRA     .SKIPDIR
0000B128                          1905  .LEFTDIR
0000B128  2279 0000B282           1906              MOVE.L  PLSPRL1,A1 
0000B12E  6000 0008               1907              BRA     .SKIPDIR
0000B132                          1908  .IDLE
0000B132  2279 0000B286           1909              MOVE.L  PLSPRID,A1           
0000B138                          1910  .SKIPDIR         
0000B138                          1911              ; CHECK IF IT'S INVINCIBLE   
0000B138  3039 0000B2A4           1912              MOVE.W  PLINVCB,D0
0000B13E  B07C 0000               1913              CMP.W   #0,D0
0000B142  6E00 0014               1914              BGT     .INV
0000B146                          1915              
0000B146                          1916              ; CHECK IF IT HAS POWER-UP
0000B146  3039 0000B2A2           1917              MOVE.W  PLAPWUP,D0
0000B14C  B07C 0000               1918              CMP.W   #0,D0
0000B150  6E00 0010               1919              BGT     .PWUP
0000B154  6000 0038               1920              BRA     .STCLR
0000B158                          1921  .INV
0000B158  2279 0000B28A           1922              MOVE.L  PLSPRIV,A1
0000B15E  6000 002E               1923              BRA     .STCLR
0000B162                          1924  .PWUP       
0000B162  2279 0000B28E           1925              MOVE.L  PLSPRMS,A1
0000B168  3039 0000B27C           1926              MOVE.W  PLMODI,D0               ; GET CURRENT MOVEMENT OF DIRECTIONS TO FLIP SPRITE
0000B16E  B07C FFFF               1927              CMP.W   #-1,D0
0000B172  6700 0014               1928              BEQ     .LEFTDIR2
0000B176  B07C 0000               1929              CMP.W   #0,D0
0000B17A  6700 0012               1930              BEQ     .STCLR
0000B17E  2279 0000B292           1931              MOVE.L  PLSPRMSWR,A1
0000B184  6000 0008               1932              BRA     .STCLR
0000B188                          1933  .LEFTDIR2
0000B188  2279 0000B296           1934              MOVE.L  PLSPRMSWL,A1 
0000B18E                          1935  .STCLR            
0000B18E  4EB8 7182               1936              JSR GETIMGOFANIM                ; GET SPRITE DEPENDING ON CURRENT ANIMATION FRAME
0000B192  3239 0000B278           1937              MOVE.W  PLPOSX,D1
0000B198  3439 0000B27A           1938              MOVE.W  PLPOSY,D2
0000B19E  9279 0000B272           1939              SUB.W   CAMX,D1
0000B1A4  0441 0024               1940              SUB.W   #TILEPXS/2,D1
0000B1A8  0442 0024               1941              SUB.W   #TILEPXS/2,D2
0000B1AC  3A01                    1942              MOVE.W  D1,D5
0000B1AE  E18D                    1943              LSL.L   #8,D5
0000B1B0  E18D                    1944              LSL.L   #8,D5
0000B1B2  3A02                    1945              MOVE.W  D2,D5                   ; GET COORDINATES TO DRAW IMAGE
0000B1B4  4EB8 70EA               1946              JSR DRAWIMG
0000B1B8                          1947  
0000B1B8                          1948              ; DRAW ENEMIES
0000B1B8  41F9 0000A4B2           1949              LEA.L   ENEMLIS,A0
0000B1BE  45F9 0000A458           1950              LEA.L   GOOMBA,A2
0000B1C4  383C 0064               1951              MOVE.W  #ENEMCOUN,D4
0000B1C8  6000 004E               1952              BRA     .ENNEXT
0000B1CC                          1953  .ENLOOP
0000B1CC  2258                    1954              MOVE.L  (A0)+,A1                ; GET POINTER OF ENEMY IN DYNAMIC MEMORY
0000B1CE  1029 0001               1955              MOVE.B  ENEMENBL(A1),D0
0000B1D2  B03C 0000               1956              CMP.B   #ENSTDSB,D0             ; CHECK IF IT'S DISABLED            
0000B1D6  6F00 0040               1957              BLE     .ENNEXT                 ; IT'S DEAD OR DISABLED
0000B1DA  3229 0004               1958              MOVE.W  ENEMXPOS(A1),D1        ; X POSITION IN TILE COORDS
0000B1DE  3429 0006               1959              MOVE.W  ENEMYPOS(A1),D2        ; Y POSITION IN TILE COORDS
0000B1E2  B279 0000B272           1960              CMP.W   CAMX,D1                 
0000B1E8  6D00 002E               1961              BLT     .ENNEXT                 ; IF IT OUT OF SCREEN, DO NOT DRAW
0000B1EC  9279 0000B272           1962              SUB.W   CAMX,D1
0000B1F2  0441 0024               1963              SUB.W   #TILEPXS/2,D1           ; GET LEFT-TOP CORNER X POSITION
0000B1F6  0442 0024               1964              SUB.W   #TILEPXS/2,D2           ; GET LEXT-TOP CORNER Y POSITION
0000B1FA  3A01                    1965              MOVE.W  D1,D5
0000B1FC  E18D                    1966              LSL.L   #8,D5
0000B1FE  E18D                    1967              LSL.L   #8,D5
0000B200  3A02                    1968              MOVE.W  D2,D5
0000B202  4280                    1969              CLR.L   D0
0000B204  1029 0000               1970              MOVE.B  ENEMTYPE(A1),D0         ; GET TYPE OF ENEMY
0000B208  C0FC 0012               1971              MULU.W  #ENEMSZB,D0             ; GET OFFSET OF ENEMY TYPE
0000B20C  2272 0002               1972              MOVE.L  ENTYPCLR(A2,D0.W),A1    ; GET ANIMATION POINTER OF ENTITY
0000B210  4EB8 7182               1973              JSR GETIMGOFANIM            
0000B214  4EB8 70EA               1974              JSR DRAWIMG
0000B218                          1975  .ENNEXT
0000B218  2250                    1976              MOVE.L  (A0),A1
0000B21A  B2FC FFFF               1977              CMP     #$FFFFFFFF,A1           ; CHECK IF THE POINTER IS AN END POINT
0000B21E  6700 0006               1978              BEQ     .ENSTOP                 ; THERE IS STILL AN ENEMY
0000B222  51CC FFA8               1979              DBRA    D4,.ENLOOP              ; CHECK NEXT ENEMY IN CASE IT'S NOT THE LIST LIMIT
0000B226                          1980  .ENSTOP            
0000B226                          1981                           
0000B226                          1982              ; SET PEN COLOR
0000B226  223C 00FFFFFF           1983              MOVE.L  #$00FFFFFF,D1           
0000B22C  303C 0050               1984              MOVE.W  #80,D0
0000B230  4E4F                    1985              TRAP    #15
0000B232                          1986              ; SET FILL COLOR
0000B232  223C 00FF9494           1987              MOVE.L  #$00FF9494,D1           
0000B238  303C 0051               1988              MOVE.W  #81,D0
0000B23C  4E4F                    1989              TRAP    #15
0000B23E                          1990              
0000B23E                          1991              
0000B23E                          1992              ; DRAW UI
0000B23E                          1993              ; DRAW STRING OF COINS     
0000B23E  43F8 71A0               1994              LEA.L   STRCOIN,A1     
0000B242  323C 0000               1995              MOVE.W  #0,D1
0000B246  343C 0000               1996              MOVE.W  #0,D2
0000B24A  303C 005F               1997              MOVE.W  #95,D0
0000B24E  4E4F                    1998              TRAP    #15
0000B250                          1999              ; DRAW NUMBER OF COINS
0000B250  323C 0006               2000              MOVE.W  #6,D1
0000B254  E149                    2001              LSL.W   #8,D1
0000B256  123C 0000               2002              MOVE.B  #0,D1
0000B25A  303C 000B               2003              MOVE.W  #11,D0
0000B25E  4E4F                    2004              TRAP    #15
0000B260  4281                    2005              CLR.L   D1
0000B262  3239 0000B29A           2006              MOVE.W  PLCOIN,D1
0000B268  303C 0003               2007              MOVE.W  #3,D0
0000B26C  4E4F                    2008              TRAP    #15           
0000B26E                          2009   
0000B26E  6000 FCBC               2010              BRA     RTN
0000B272                          2011  
0000B272                          2012  
0000B272                          2013  
0000B272                          2014  
0000B272                          2015  
0000B272                          2016  
0000B272                          2017  -------------------- end include --------------------
0000B272                          2018              INCLUDE "GAMECONSTS.X68"
0000B272  =00000014               2019  PLSPEED     EQU     5*SPEEDMULTIPLIER       ; PLAYER VERTICAL SPEED
0000B272  =00000004               2020  GRAVITY     EQU     1*SPEEDMULTIPLIER       ; GRAVITY VALUE
0000B272  =00000034               2021  JMPFRCE     EQU     13*SPEEDMULTIPLIER      ; JUMP FORCE OF PLAYER
0000B272  =0000000D               2022  MAXYDIE     EQU     13                      ; Y POSITION THAT HAS TO BE REACHED TO DIE
0000B272  =0000000C               2023  ENBDIST     EQU     12                      ; MIN DISTANCE TO PLAYER IN ORDER TO BE ENABLED
0000B272  =00000BB8               2024  INVCTIM     EQU     3000                    ; INVINCIBILITY TIME WHEN PLAYER IS DAMAGED IN HUNDRETHS OF A SECOND
0000B272                          2025  
0000B272                          2026  
0000B272                          2027  
0000B272                          2028  
0000B272                          2029  
0000B272                          2030  
0000B272                          2031  
0000B272                          2032  
0000B272                          2033  
0000B272                          2034  
0000B272                          2035  
0000B272                          2036  
0000B272                          2037  
0000B272                          2038  -------------------- end include --------------------
0000B272                          2039              INCLUDE "GAMEVARS.X68"
0000B272= 0000                    2040  CAMX        DC.W    0
0000B274= 0000                    2041  GAMESTA     DC.W    0
0000B276= 0000                    2042  CLVLLOA     DC.W    0
0000B278                          2043  ; Player position
0000B278= 00C8                    2044  PLPOSX      DC.W    200                     ; X
0000B27A= 00C8                    2045  PLPOSY      DC.W    200                     ; Y
0000B27C= 0001                    2046  PLMODI      DC.W    1                       ; CURRENT DIRECTION OF MOVEMENT
0000B27E                          2047  ; Player animations
0000B27E= 00007032                2048  PLSPRR1     DC.L    ANIMPLWALKRIGHT         ; SMALL MARIO WALK TO RIGHT
0000B282= 00007044                2049  PLSPRL1     DC.L    ANIMPLWALKLEFT          ; SMALL MARIO WALK TO LEFT
0000B286= 0000707A                2050  PLSPRID     DC.L    ANIMPLIDLE              ; SMALL MARIO IDLE
0000B28A= 00007086                2051  PLSPRIV     DC.L    ANIMPLINV               ; MARIO INVINCIBLE
0000B28E= 00007080                2052  PLSPRMS     DC.L    ANIMPLMSIDLE            ; MARIO ON MUSHROOM POWER-UP
0000B292= 00007056                2053  PLSPRMSWR   DC.L    ANIMPLMSWALKRIGHT       ; MARIO ON MUSHROOM WALK TO RIGHT
0000B296= 00007068                2054  PLSPRMSWL   DC.L    ANIMPLMSWALKLEFT        ; MARIO ON MUSHROOM WALK TO LEFT
0000B29A                          2055  ; Coin counter
0000B29A= 0000                    2056  PLCOIN      DC.W    0       
0000B29C                          2057  ; Player y-force
0000B29C= 0000                    2058  PLFCEY      DC.W    0
0000B29E                          2059  
0000B29E                          2060  ; Player was grounded variable;             0 = not grounded, 1 = grounded
0000B29E= 0000                    2061  PLGNDD      DC.W    0
0000B2A0                          2062  
0000B2A0                          2063  ; Player health points
0000B2A0= 0001                    2064  PLHEALTH    DC.W    1                       
0000B2A2                          2065  
0000B2A2                          2066  ; Player active power-up
0000B2A2= 0000                    2067  PLAPWUP     DC.W    0
0000B2A4                          2068  
0000B2A4                          2069  ; TIME LEFT OF INVINCIBILITY OF PLAYER
0000B2A4= 0000                    2070  PLINVCB     DC.W    0                       
0000B2A6                          2071              
0000B2A6                          2072  
0000B2A6                          2073  ; DELTA TIME: TIME ELAPSED BETWEEN THE BEGINNING OF LAST FRAME AND BEGINNING OF CURRENT ONE
0000B2A6                          2074  ; IN HUNDRETHS OF A SECOND
0000B2A6= 00000000                2075  DELTATIME   DC.L    0
0000B2AA                          2076  
0000B2AA                          2077  
0000B2AA                          2078  
0000B2AA                          2079  
0000B2AA                          2080  
0000B2AA                          2081  
0000B2AA                          2082  
0000B2AA                          2083  
0000B2AA                          2084  
0000B2AA                          2085  
0000B2AA                          2086  
0000B2AA                          2087  
0000B2AA                          2088  
0000B2AA                          2089  
0000B2AA                          2090  
0000B2AA                          2091  
0000B2AA                          2092  
0000B2AA                          2093  
0000B2AA                          2094  
0000B2AA                          2095  
0000B2AA                          2096  
0000B2AA                          2097  
0000B2AA                          2098  
0000B2AA                          2099  
0000B2AA                          2100  
0000B2AA                          2101  
0000B2AA                          2102  
0000B2AA                          2103  -------------------- end include --------------------
0000B2AA                          2104              INCLUDE "GAMELOGIC.X68"
0000B2AA                          2105  ; --- UPDATES THE CURRENT STATE OF GAME
0000B2AA                          2106  ;     Input:
0000B2AA                          2107  ;           - None
0000B2AA                          2108  ;     Output:
0000B2AA                          2109  ;           - None
0000B2AA                          2110  ;     Modifies:
0000B2AA                          2111  ;           - Game variables
0000B2AA                          2112  ; ---------------------------------------------------------------------------
0000B2AA                          2113  STAUPD
0000B2AA  48E7 FF00               2114              MOVEM.L D0-D7,-(A7)
0000B2AE  48E7 00C0               2115              MOVEM.L  A0-A1,-(A7)
0000B2B2  4280                    2116              CLR.L   D0
0000B2B4  4281                    2117              CLR.L   D1
0000B2B6  4282                    2118              CLR.L   D2
0000B2B8  4283                    2119              CLR.L   D3
0000B2BA  4284                    2120              CLR.L   D4
0000B2BC  4285                    2121              CLR.L   D5
0000B2BE  4286                    2122              CLR.L   D6
0000B2C0  4287                    2123              CLR.L   D7
0000B2C2                          2124              ; update state of game
0000B2C2                          2125              ; check the state of game
0000B2C2                          2126              ; 0 -> in main menu
0000B2C2                          2127              ; 1 -> loading level
0000B2C2                          2128              ; 2 -> in level
0000B2C2                          2129              ; 3 -> Death screen
0000B2C2  3039 0000B274           2130              MOVE.W  GAMESTA,D0
0000B2C8  B07C 0000               2131              CMP.W   #0,D0
0000B2CC  6700 001E               2132              BEQ     .STA0
0000B2D0  B07C 0001               2133              CMP.W   #1,D0
0000B2D4  6700 001A               2134              BEQ     .STA1
0000B2D8  B07C 0002               2135              CMP.W   #2,D0
0000B2DC  6700 001C               2136              BEQ     .STA2
0000B2E0  B07C 0003               2137              CMP.W   #3,D0
0000B2E4  6700 0030               2138              BEQ     .STA3
0000B2E8  6000 0030               2139              BRA     .RTN
0000B2EC                          2140              
0000B2EC                          2141  .STA0
0000B2EC                          2142              ; It's in main menu
0000B2EC                          2143              ; Check if the mouse is in a button
0000B2EC                          2144              ; and if it's pressed 
0000B2EC  6000 002C               2145              BRA     .RTN
0000B2F0                          2146  .STA1     
0000B2F0                          2147              ; It's loading the level
0000B2F0  4EB9 0000B3DA           2148              JSR     LOADLVL
0000B2F6                          2149                     
0000B2F6  6000 0022               2150              BRA     .RTN            
0000B2FA                          2151  .STA2
0000B2FA                          2152              ; It's in level, update the state
0000B2FA  4EB9 0000B486           2153              JSR     PRUPD                   ; Update player position depending on the input and collisions with map
0000B300  4EB9 0000B39A           2154              JSR     CAMUPD                  ; UPDATE CAMERA POSITION DEPENDING ON NEW PLAYER'S POSITION           
0000B306                          2155              ; update enemy positions
0000B306  4EB9 0000B324           2156              JSR     ENEMUPD
0000B30C                          2157              ; check collisions of player with enemies
0000B30C  4EB9 0000B816           2158              JSR     CCOLENE
0000B312  6000 0006               2159              BRA     .RTN 
0000B316                          2160  .STA3
0000B316  6000 0002               2161              BRA     .RTN            
0000B31A                          2162  .RTN            
0000B31A  4CDF 0300               2163              MOVEM.L  (A7)+,A0-A1
0000B31E  4CDF 00FF               2164              MOVEM.L (A7)+,D0-D7
0000B322  4E75                    2165              RTS
0000B324                          2166              
0000B324                          2167  ; --- UPDATES ENEMIES STATES
0000B324                          2168  ;     Input:
0000B324                          2169  ;           - None
0000B324                          2170  ;     Output:
0000B324                          2171  ;           - None
0000B324                          2172  ;     Modifies:
0000B324                          2173  ;           - STATE OF ENEMIES
0000B324                          2174  ; ---------------------------------------------------------------------------
0000B324                          2175  ENEMUPD
0000B324  48E7 FF00               2176              MOVEM.L D0-D7,-(A7)
0000B328  48E7 00F0               2177              MOVEM.L A0-A3,-(A7)
0000B32C                          2178              
0000B32C  41F9 0000A4B2           2179              LEA.L   ENEMLIS,A0
0000B332  45F9 0000A458           2180              LEA.L   GOOMBA,A2
0000B338  383C 0064               2181              MOVE.W  #ENEMCOUN,D4
0000B33C  6000 0044               2182              BRA     .ENNEXT
0000B340                          2183  .ENLOOP
0000B340  2258                    2184              MOVE.L  (A0)+,A1                ; GET POINTER OF ENEMY IN DYNAMIC MEMORY
0000B342  1029 0001               2185              MOVE.B  ENEMENBL(A1),D0         ; GET ENABLED/DISABLED PROPERTY VALUE
0000B346  B03C 0000               2186              CMP.B   #ENSTDSB,D0                   ; CHECK IF IT'S DISABLED            
0000B34A  6700 001E               2187              BEQ     .DISABL                 ; IT'S DISABLED, GO TO THE NEXT ENEMY
0000B34E  B03C 00FF               2188              CMP.B   #ENSTDTH,D0
0000B352  6700 002E               2189              BEQ     .ENNEXT                 ; ENEMY IS DEAD, GO TO NEXT
0000B356  4280                    2190              CLR.L   D0                   
0000B358  1029 0000               2191              MOVE.B  ENEMTYPE(A1),D0         ; GET TYPE OF ENEMY
0000B35C  C0FC 0012               2192              MULU.W  #ENEMSZB,D0             ; GET OFFSET OF ENEMY TYPE
0000B360  2672 0006               2193              MOVE.L  ENTYPSBH(A2,D0.W),A3    ; GET ADDRESS OF THE STATE UPDATE SUBROUTINE
0000B364  4E93                    2194              JSR     (A3)                    ; CALL THE STATE UPDATE SUBROUTINE  
0000B366  6000 001A               2195              BRA     .ENNEXT
0000B36A                          2196  .DISABL
0000B36A                          2197              ; CHECK DISTANCE TO PLAYER TO ENABLE THE ENEMY
0000B36A  3229 0004               2198              MOVE.W  ENEMXPOS(A1),D1
0000B36E  9279 0000B278           2199              SUB.W   PLPOSX,D1
0000B374  B27C 0360               2200              CMP.W   #ENBDIST*TILEPXS,D1
0000B378  6E00 0008               2201              BGT     .ENNEXT
0000B37C  137C 0001 0001          2202              MOVE.B  #ENSTENB,ENEMENBL(A1)         ; ENABLE ENEMY
0000B382                          2203  .ENNEXT
0000B382  2250                    2204              MOVE.L  (A0),A1
0000B384  B2FC FFFF               2205              CMP     #$FFFFFFFF,A1           ; CHECK IF THE POINTER IS AN END POINT
0000B388  6700 0006               2206              BEQ     .ENSTOP                 ; THERE IS STILL AN ENEMY
0000B38C  51CC FFB2               2207              DBRA    D4,.ENLOOP              ; CHECK NEXT ENEMY IN CASE IT'S NOT THE LIST LIMIT
0000B390                          2208  .ENSTOP            
0000B390  4CDF 00FF               2209              MOVEM.L (A7)+,D0-D7
0000B394  4CDF 0F00               2210              MOVEM.L (A7)+,A0-A3
0000B398  4E75                    2211              RTS
0000B39A                          2212              
0000B39A                          2213  ; --- UPDATES CAMERA POSITION
0000B39A                          2214  ;     Input:
0000B39A                          2215  ;           - None
0000B39A                          2216  ;     Output:
0000B39A                          2217  ;           - None
0000B39A                          2218  ;     Modifies:
0000B39A                          2219  ;           - CAMERA POSITION (CAMX)
0000B39A                          2220  ; ---------------------------------------------------------------------------
0000B39A                          2221  CAMUPD
0000B39A  48E7 E000               2222              MOVEM.L  D0-D2,-(A7)
0000B39E  3039 0000B278           2223              MOVE.W  PLPOSX,D0               ; MOVE CURRENT PLAYER POSITION IN D0
0000B3A4  323C 0048               2224              MOVE.W  #TILEPXS,D1             ; COMPUTE OFFSET FROM PLAYER TO CAMERA FOR THE PLAYER TO BE CENTERED ON SCREEN
0000B3A8  343C 000F               2225              MOVE.W  #NTILESC,D2
0000B3AC  85FC 0002               2226              DIVS.W  #2,D2
0000B3B0  C3C2                    2227              MULS.W  D2,D1  
0000B3B2                          2228                   
0000B3B2  9041                    2229              SUB.W   D1,D0                   ; GET FINAL CAMERA POSITION DEPENDING ON PLAYER POSITION
0000B3B4  B079 0000B272           2230              CMP.W   CAMX,D0                 ; CHECK IF PREVIOUS CAMERA POSITION IS GREATER
0000B3BA  6F00 0018               2231              BLE     .SKIP                   ; IN THAT CASE, SKIP. CAMERA SHOULD ONLY MOVE FORWARD (TO THE RIGHT)
0000B3BE  D279 0000B278           2232              ADD.W   PLPOSX,D1               ; GET CAMERA POSITION OF THE RIGHT SIDE, TO CHECK IF IT'S INSIDE MAP BOUNDARIES        
0000B3C4  B279 0000A228           2233              CMP.W   MAPPXSZ,D1              ; CHECK IF THE CURRENT CAMERA POSITION IS IN MAP BOUNDARIES
0000B3CA  6E00 0008               2234              BGT     .SKIP                   ; IF NOT, DO NOT SAVE IT AS NEW CAMERA POSITION, KEEP PREVIOUS
0000B3CE  33C0 0000B272           2235              MOVE.W  D0,CAMX                 ; SET NEW CAMERA POSITION
0000B3D4                          2236  .SKIP
0000B3D4  4CDF 0007               2237              MOVEM.L (A7)+,D0-D2
0000B3D8  4E75                    2238              RTS
0000B3DA                          2239              
0000B3DA                          2240  ; --- LOADS LEVEL
0000B3DA                          2241  ;     Input:
0000B3DA                          2242  ;           - None
0000B3DA                          2243  ;     Output:
0000B3DA                          2244  ;           - None
0000B3DA                          2245  ;     Modifies:
0000B3DA                          2246  ;           - STATE OF BUTTON
0000B3DA                          2247  ; ---------------------------------------------------------------------------
0000B3DA                          2248  LOADLVL
0000B3DA  48E7 F800               2249              MOVEM.L D0-D4,-(A7)
0000B3DE  48E7 00FC               2250              MOVEM.L A0-A5,-(A7)
0000B3E2                          2251  
0000B3E2  33FC FFFF 0000A4B2      2252              MOVE.W  #$FFFF,ENEMLIS
0000B3EA  43F9 000083C0           2253              LEA.L   LVLCDAT,A1              ; GET ADDRESS OF LOADED LEVEL TO COPY THE CURRENT LEVEL
0000B3F0  49F9 000083C0           2254              LEA.L   LVLCDAT,A4
0000B3F6                          2255              
0000B3F6  3039 0000B276           2256              MOVE.W  CLVLLOA,D0
0000B3FC  C0FC 0004               2257              MULU.W  #4,D0                   ; GET OFFSET OF POINTER IN LVL'S ADDRESS
0000B400  41F8 7218               2258              LEA.L   LVLADDR,A0
0000B404  2070 0000               2259              MOVE.L  0(A0,D0.W),A0           ; GET ADDRESS OF LOADED LEVEL DATA IN A0
0000B408  45F9 0000A22A           2260              LEA.L   TILE1,A2                ; GET ADDRESS OF TILE INFO ARRAY
0000B40E                          2261              
0000B40E                          2262              ; FIRST TWO WORDS ARE THE HEIGHT & WIDTH OF LEVEL TILE MAP
0000B40E  33D8 0000A224           2263              MOVE.W  (A0)+,MTLHGHT           ; STORE HEIGHT IN TILES
0000B414  33D8 0000A226           2264              MOVE.W  (A0)+,MTLWDTH           ; STORE WIDTH IN TILES
0000B41A  3239 0000A226           2265              MOVE.W  MTLWDTH,D1              
0000B420  C2FC 0048               2266              MULU.W  #TILEPXS,D1             
0000B424  33C1 0000A228           2267              MOVE.W  D1,MAPPXSZ              ; STORE WIDTH IN PIXELS
0000B42A                          2268              
0000B42A                          2269               ; iterate through tiles to paint
0000B42A  363C 0000               2270              MOVE.W  #0,D3                   ; FIRST LOOP
0000B42E  383C 0000               2271              MOVE.W  #0,D4                   ; SECOND LOOP
0000B432                          2272              
0000B432                          2273  .LVLOOP            
0000B432  3218                    2274              MOVE.W  (A0)+,D1                ; SAVE TILE TYPE IN D1
0000B434  32C1                    2275              MOVE.W  D1,(A1)+                ; MAKE A COPY OF THE TILE IN LOADED LEVEL                     
0000B436                          2276              ; CHECK IF IT'S A TILE ENTITY WITH LOAD BEHAVIOR
0000B436  5341                    2277              SUBQ.W  #1,D1
0000B438  C2FC 0010               2278              MULU.W  #TILESZB,D1
0000B43C  3432 1008               2279              MOVE.W  ISTLENT(A2,D1.W),D2
0000B440  B47C 0002               2280              CMP.W   #TEONLOA,D2                     
0000B444  6600 0028               2281              BNE     .LVNEXT                 ; IT'S NOT A TILE ENTITY WITH ON LOAD BEHAVIOR
0000B448  2672 100A               2282              MOVE.L  BEHAVSR(A2,D1.W),A3
0000B44C                          2283              
0000B44C                          2284              ; COMPUTE TILE COORDS
0000B44C  2A49                    2285              MOVE.L  A1,A5
0000B44E  558D                    2286              SUB.L   #2,A5
0000B450  9BCC                    2287              SUB.L   A4,A5
0000B452  220D                    2288              MOVE.L  A5,D1
0000B454  E289                    2289              LSR.L   #1,D1
0000B456  2401                    2290              MOVE.L  D1,D2
0000B458  82F9 0000A226           2291              DIVU.W  MTLWDTH,D1
0000B45E  84F9 0000A226           2292              DIVU.W  MTLWDTH,D2
0000B464  E089                    2293              LSR.L   #8,D1
0000B466  E089                    2294              LSR.L   #8,D1
0000B468  4E93                    2295              JSR     (A3)                    ; CALL BEHAVIOUR SUBROUTINE
0000B46A  4281                    2296              CLR.L   D1
0000B46C  4282                    2297              CLR.L   D2
0000B46E                          2298  .LVNEXT
0000B46E  0C50 FFFF               2299              CMP.W   #$FFFF,(A0)             ; CHECK IF END POINT IT HAS BEEN REACHED
0000B472  66BE                    2300              BNE     .LVLOOP
0000B474                          2301       
0000B474  33FC 0002 0000B274      2302              MOVE.W  #2,GAMESTA              ; CHANGE GAME STATE TO 2
0000B47C  4CDF 3F00               2303              MOVEM.L (A7)+,A0-A5 
0000B480  4CDF 001F               2304              MOVEM.L (A7)+,D0-D4
0000B484  4E75                    2305              RTS
0000B486                          2306              
0000B486                          2307  ; --- UPDATES PLAYER STATE
0000B486                          2308  ;     Input:
0000B486                          2309  ;           - None
0000B486                          2310  ;     Output:
0000B486                          2311  ;           - None
0000B486                          2312  ;     Modifies:
0000B486                          2313  ;           - PLAYER VARIABLES
0000B486                          2314  ; ---------------------------------------------------------------------------
0000B486                          2315  PRUPD
0000B486  48E7 FF00               2316              MOVEM.L D0-D7,-(A7)
0000B48A  48E7 00E0               2317              MOVEM.L A0-A2,-(A7)
0000B48E                          2318              ; UPDATE INVINCIBILITY STATE
0000B48E  3039 0000B2A4           2319              MOVE.W  PLINVCB,D0
0000B494  B07C 0000               2320              CMP.W   #0,D0
0000B498  6F00 0016               2321              BLE     .CONT1
0000B49C  9079 0000B2A6           2322              SUB.W   DELTATIME,D0
0000B4A2  33C0 0000B2A4           2323              MOVE.W  D0,PLINVCB
0000B4A8  33FC 0000 0000B29C      2324              MOVE.W  #0,PLFCEY
0000B4B0                          2325  .CONT1       
0000B4B0                          2326              ; CHECK IF PLAYER IS DEAD
0000B4B0  3039 0000B2A0           2327              MOVE.W  PLHEALTH,D0   
0000B4B6  B07C 0000               2328              CMP.W   #0,D0
0000B4BA  6E00 0012               2329              BGT     .CONT2
0000B4BE  33FC 0003 0000B274      2330              MOVE.W  #3,GAMESTA
0000B4C6  3F3C 0000               2331              MOVE.W  #0,-(A7)
0000B4CA  6000 0280               2332              BRA     .RTN
0000B4CE                          2333  .CONT2
0000B4CE                          2334              
0000B4CE                          2335              ; Get current input
0000B4CE  4243                    2336              CLR.W   D3                      ; X-axis direction
0000B4D0  4244                    2337              CLR.W   D4                      ; Y-axis direction
0000B4D2  4282                    2338              CLR.L   D2
0000B4D4  4280                    2339              CLR.L   D0
0000B4D6  1439 0000AD0A           2340              MOVE.B  KBDVAL,D2
0000B4DC  0802 0000               2341              BTST    #KUPBMAP,D2
0000B4E0  6700 0016               2342              BEQ     .KDOWN
0000B4E4                          2343              ; Up key pressed
0000B4E4                          2344              ; Check if player is grounded so he is able to jump or not
0000B4E4  0C79 0000 0000B29E      2345              CMP.W   #0,PLGNDD
0000B4EC  6700 000A               2346              BEQ     .KDOWN
0000B4F0  33FC FFCC 0000B29C      2347              MOVE.W   #-JMPFRCE,PLFCEY      
0000B4F8                          2348  .KDOWN     
0000B4F8  0802 0001               2349              BTST  #KDWBMAP, D2
0000B4FC  6700 0002               2350              BEQ     .KLEFT
0000B500                          2351              ; ADDQ.W  #1,D4
0000B500                          2352              ; Down key pressed
0000B500                          2353  .KLEFT
0000B500  0802 0002               2354              BTST  #KLTBMAP, D2
0000B504  6700 0004               2355              BEQ     .KRGHT
0000B508                          2356              ; Left key pressed
0000B508  5343                    2357              SUBQ.W  #1,D3
0000B50A                          2358  .KRGHT        
0000B50A  0802 0003               2359              BTST  #KRTBMAP, D2
0000B50E  6700 0004               2360              BEQ     .CONT
0000B512                          2361              ; Right key pressed
0000B512  5243                    2362              ADDQ.W  #1,D3
0000B514                          2363  .CONT      
0000B514                          2364              ; Apply gravity
0000B514  5879 0000B29C           2365              ADD.W   #GRAVITY,PLFCEY
0000B51A                          2366  .SKIPG            
0000B51A                          2367              ; Apply end y-force
0000B51A  3839 0000B29C           2368              MOVE.W  PLFCEY,D4
0000B520  B87C 0000               2369              CMP.W   #0,D4
0000B524  6700 0012               2370              BEQ     .FORCE0
0000B528  B87C 0000               2371              CMP.W   #0,D4
0000B52C  6D00 001A               2372              BLT     .FORCEN
0000B530  B87C 0000               2373              CMP.W   #0,D4
0000B534  6E00 000A               2374              BGT     .FORCEP
0000B538                          2375  .FORCE0
0000B538  383C 0000               2376              MOVE.W  #0,D4
0000B53C  6000 000E               2377              BRA     .SKIPFC
0000B540                          2378  .FORCEP
0000B540  383C 0001               2379              MOVE.W  #1,D4
0000B544  6000 0006               2380              BRA     .SKIPFC
0000B548                          2381  .FORCEN                  
0000B548  383C FFFF               2382              MOVE.W  #-1,D4
0000B54C                          2383  .SKIPFC      
0000B54C                          2384              ; Change state after processing the input
0000B54C                          2385              ; Check collisions with map in the x-axis
0000B54C                          2386              ; We must check 3 collisions. Left & right corner, and center  
0000B54C  33C3 0000B27C           2387              MOVE.W  D3,PLMODI               ; STORE CURRENT PLAYER DIRECTION   
0000B552  3203                    2388              MOVE.W  D3,D1     
0000B554  303C 0047               2389              MOVE.W  #TILEPXS-1,D0
0000B558                          2390              
0000B558                          2391              ; Center
0000B558  343C 0000               2392              MOVE.W  #0,D2
0000B55C  3639 0000B278           2393              MOVE.W  PLPOSX,D3
0000B562  3839 0000B27A           2394              MOVE.W  PLPOSY,D4
0000B568  B87C 03A8               2395              CMP.W   #MAXYDIE*TILEPXS,D4
0000B56C  6F00 0012               2396              BLE     .CONT5
0000B570  33FC 0003 0000B274      2397              MOVE.W  #3,GAMESTA
0000B578  3F3C 0000               2398              MOVE.W  #0,-(A7)
0000B57C  6000 01CE               2399              BRA     .RTN
0000B580                          2400  .CONT5            
0000B580  4EB9 0000B758           2401              JSR     PLCKCOL
0000B586  BA7C 0000               2402              CMP.W   #0,D5
0000B58A  6600 0054               2403              BNE     .SKPMOVX
0000B58E                          2404              
0000B58E                          2405              ; Up corner
0000B58E  343C FFFF               2406              MOVE.W  #-1,D2
0000B592  3639 0000B278           2407              MOVE.W  PLPOSX,D3
0000B598  3839 0000B27A           2408              MOVE.W  PLPOSY,D4
0000B59E  4EB9 0000B758           2409              JSR     PLCKCOL
0000B5A4  BA7C 0000               2410              CMP.W   #0,D5
0000B5A8  6600 0036               2411              BNE     .SKPMOVX
0000B5AC                          2412              
0000B5AC                          2413              ; Down corner
0000B5AC  343C 0001               2414              MOVE.W  #1,D2
0000B5B0  3639 0000B278           2415              MOVE.W  PLPOSX,D3
0000B5B6  3839 0000B27A           2416              MOVE.W  PLPOSY,D4
0000B5BC  4EB9 0000B758           2417              JSR     PLCKCOL
0000B5C2  BA7C 0000               2418              CMP.W   #0,D5
0000B5C6  6600 0018               2419              BNE     .SKPMOVX 
0000B5CA  6D00 0014               2420              BLT     .SKPMOVX
0000B5CE                          2421              ; Update player position in x-axis
0000B5CE  C3FC 0014               2422              MULS.W  #PLSPEED, D1            ; Multiply speed to current movement direction  
0000B5D2  D379 0000B278           2423              ADD.W   D1,PLPOSX 
0000B5D8  3F3C 0000               2424              MOVE.W  #0,-(A7)
0000B5DC  6000 000C               2425              BRA     .CHKY    
0000B5E0                          2426  .SKPMOVX    
0000B5E0  CDC1                    2427              MULS.W  D1,D6 
0000B5E2  3F06                    2428              MOVE.W  D6,-(A7)
0000B5E4  9D79 0000B278           2429              SUB.W   D6,PLPOSX
0000B5EA                          2430  .CHKY        
0000B5EA                          2431              ; Check if player has a collision on top
0000B5EA                          2432              ; We have to check the corners and center as well
0000B5EA  0C79 0000 0000B29C      2433              CMP.W   #0,PLFCEY
0000B5F2  6E00 00BC               2434              BGT     .CHKGDD            
0000B5F6  343C FFFF               2435              MOVE.W  #-1,D2
0000B5FA  303C 004D               2436              MOVE.W  #TILEPXS+5,D0
0000B5FE                          2437              
0000B5FE                          2438              ; Center
0000B5FE  323C 0000               2439              MOVE.W  #0,D1
0000B602  3639 0000B278           2440              MOVE.W  PLPOSX,D3
0000B608  3839 0000B27A           2441              MOVE.W  PLPOSY,D4
0000B60E  4EB9 0000B758           2442              JSR     PLCKCOL
0000B614  BA7C 0000               2443              CMP.W   #0,D5
0000B618  6600 0056               2444              BNE     .COLTOP
0000B61C                          2445              
0000B61C                          2446              ; Left corner
0000B61C  323C FFFF               2447              MOVE.W  #-1,D1
0000B620  3639 0000B278           2448              MOVE.W  PLPOSX,D3
0000B626  3839 0000B27A           2449              MOVE.W  PLPOSY,D4
0000B62C  4EB9 0000B758           2450              JSR     PLCKCOL
0000B632  BA7C 0000               2451              CMP.W   #0,D5
0000B636  6600 0038               2452              BNE     .COLTOP
0000B63A                          2453              
0000B63A                          2454              ; Right corner
0000B63A  323C 0001               2455              MOVE.W  #1,D1
0000B63E  3639 0000B278           2456              MOVE.W  PLPOSX,D3
0000B644  3839 0000B27A           2457              MOVE.W  PLPOSY,D4
0000B64A  4EB9 0000B758           2458              JSR     PLCKCOL
0000B650  BA7C 0000               2459              CMP.W   #0,D5
0000B654  6600 001A               2460              BNE     .COLTOP
0000B658                          2461              
0000B658  33FC 0000 0000B29E      2462              MOVE.W  #0,PLGNDD
0000B660  3C39 0000B29C           2463              MOVE.W  PLFCEY,D6          
0000B666  DD79 0000B27A           2464              ADD.W   D6,PLPOSY
0000B66C  6000 00DE               2465              BRA     .RTN
0000B670                          2466              
0000B670                          2467  .COLTOP     ; Player is colliding with a tile with the top of its head
0000B670  3C1F                    2468              MOVE.W  (A7)+,D6
0000B672  3F3C 0000               2469              MOVE.W  #0,-(A7) 
0000B676  DD79 0000B278           2470              ADD.W   D6,PLPOSX 
0000B67C  33FC 0000 0000B29C      2471              MOVE.W  #0,PLFCEY               ; reset force
0000B684  DF79 0000B27A           2472              ADD.W   D7,PLPOSY
0000B68A                          2473              ; Check if it's a tile entity
0000B68A  5345                    2474              SUBQ.W  #1,D5
0000B68C  41F9 0000A22A           2475              LEA.L   TILE1,A0
0000B692  CAFC 0010               2476              MULU.W  #TILESZB,D5              ; Get tile offset
0000B696  3030 5008               2477              MOVE.W  ISTLENT(A0,D5.W),D0
0000B69A  B07C 0001               2478              CMP.W   #TEONCOL,D0
0000B69E  6600 0010               2479              BNE     .CHKGDD
0000B6A2                          2480              
0000B6A2                          2481              ; Get the tile coord
0000B6A2  3203                    2482              MOVE.W  D3,D1
0000B6A4  3404                    2483              MOVE.W  D4,D2
0000B6A6                          2484              ; It's a Tile Entity
0000B6A6  2470 500A               2485              MOVE.L  BEHAVSR(A0,D5.W),A2
0000B6AA  4E92                    2486              JSR     (A2)
0000B6AC                          2487                 
0000B6AC  6000 009E               2488              BRA     .RTN
0000B6B0                          2489  .CHKGDD            
0000B6B0                          2490              ; Check if the player is grounded
0000B6B0  303C 0048               2491              MOVE.W  #TILEPXS,D0
0000B6B4  343C 0001               2492              MOVE.W  #1,D2
0000B6B8                          2493              
0000B6B8                          2494              ; center
0000B6B8  323C 0000               2495              MOVE.W  #0,D1
0000B6BC  3639 0000B278           2496              MOVE.W  PLPOSX,D3
0000B6C2  3839 0000B27A           2497              MOVE.W  PLPOSY,D4
0000B6C8  4EB9 0000B758           2498              JSR     PLCKCOL
0000B6CE  BA7C 0000               2499              CMP.W   #0,D5
0000B6D2  6E00 0056               2500              BGT     .GROUNDED
0000B6D6                          2501              
0000B6D6                          2502              ; left corner
0000B6D6  323C FFFF               2503              MOVE.W  #-1,D1
0000B6DA  3639 0000B278           2504              MOVE.W  PLPOSX,D3
0000B6E0  3839 0000B27A           2505              MOVE.W  PLPOSY,D4
0000B6E6  4EB9 0000B758           2506              JSR     PLCKCOL
0000B6EC  BA7C 0000               2507              CMP.W   #0,D5
0000B6F0  6E00 0038               2508              BGT     .GROUNDED
0000B6F4                          2509              
0000B6F4                          2510              ; right corner
0000B6F4  323C 0001               2511              MOVE.W  #1,D1
0000B6F8  3639 0000B278           2512              MOVE.W  PLPOSX,D3
0000B6FE  3839 0000B27A           2513              MOVE.W  PLPOSY,D4
0000B704  4EB9 0000B758           2514              JSR     PLCKCOL
0000B70A  BA7C 0000               2515              CMP.W   #0,D5
0000B70E  6E00 001A               2516              BGT     .GROUNDED
0000B712                          2517              
0000B712                          2518              ; Player is not grounded 
0000B712  33FC 0000 0000B29E      2519              MOVE.W  #0,PLGNDD
0000B71A  3C39 0000B29C           2520              MOVE.W  PLFCEY,D6          
0000B720  DD79 0000B27A           2521              ADD.W   D6,PLPOSY
0000B726  6000 0024               2522              BRA     .RTN
0000B72A                          2523  .GROUNDED   
0000B72A  3C1F                    2524              MOVE.W  (A7)+,D6
0000B72C  DD79 0000B278           2525              ADD.W   D6,PLPOSX
0000B732  3F3C 0000               2526              MOVE.W  #0,-(A7)        
0000B736  9F79 0000B27A           2527              SUB.W   D7,PLPOSY
0000B73C  33FC 0001 0000B29E      2528              MOVE.W  #1,PLGNDD
0000B744  33FC 0000 0000B29C      2529              MOVE.W  #0,PLFCEY               ; reset force
0000B74C                          2530  .RTN
0000B74C  3C1F                    2531              MOVE.W  (A7)+,D6
0000B74E  4CDF 0700               2532              MOVEM.L (A7)+,A0-A2
0000B752  4CDF 00FF               2533              MOVEM.L (A7)+,D0-D7
0000B756  4E75                    2534              RTS 
0000B758                          2535  
0000B758                          2536  
0000B758                          2537  ; ----------------------
0000B758                          2538  ; Check if it there is a tile applying the direction given by D1.W & D2.W from
0000B758                          2539  ; position D3.W & D4.W
0000B758                          2540  ; - Input: 
0000B758                          2541  ;           - D0.W: size of object
0000B758                          2542  ;           - D1.W: x-axis direction
0000B758                          2543  ;           - D2.W: y-axis direction 
0000B758                          2544  ;           - D3.W: x-axis position 
0000B758                          2545  ;           - D4.W: y-axis position                    
0000B758                          2546  ; - Output: 
0000B758                          2547  ;           - D5.W -> returns id of tile in that position: 0 is not colliding.
0000B758                          2548  ;           - D6.W -> returns x-axis position that the object should move to leave the collider
0000B758                          2549  ;           - D7.W -> returns y-axis position that the object should move to leave the collider
0000B758                          2550  ;-----------------------
0000B758                          2551  PLCKCOL
0000B758  48E7 E000               2552              MOVEM.L D0-D2,-(A7)
0000B75C  2F09                    2553              MOVE.L  A1,-(A7)
0000B75E  3A02                    2554              MOVE.W  D2,D5
0000B760  E18D                    2555              LSL.L   #8,D5
0000B762  E18D                    2556              LSL.L   #8,D5    
0000B764  3A01                    2557              MOVE.W  D1,D5
0000B766  E248                    2558              LSR.W   #1,D0
0000B768  C3C0                    2559              MULS.W  D0,D1
0000B76A  C5C0                    2560              MULS.W  D0,D2
0000B76C  D243                    2561              ADD.W   D3,D1
0000B76E  D444                    2562              ADD.W   D4,D2
0000B770  C2BC 0000FFFF           2563              AND.L   #$0000FFFF,D1
0000B776  C4BC 0000FFFF           2564              AND.L   #$0000FFFF,D2
0000B77C                          2565              ; Transform global position to tilemap position
0000B77C  82FC 0048               2566              DIVU.W  #TILEPXS,D1
0000B780  84FC 0048               2567              DIVU.W  #TILEPXS,D2
0000B784                          2568              
0000B784                          2569              ; Save tile coords in case we need them after checking collision
0000B784  3601                    2570              MOVE.W  D1,D3
0000B786  3802                    2571              MOVE.W  D2,D4
0000B788                          2572               
0000B788  2C01                    2573              MOVE.L  D1,D6
0000B78A  2E02                    2574              MOVE.L  D2,D7
0000B78C  E08E                    2575              LSR.L   #8,D6
0000B78E  E08E                    2576              LSR.L   #8,D6
0000B790  E08F                    2577              LSR.L   #8,D7
0000B792  E08F                    2578              LSR.L   #8,D7
0000B794                          2579              
0000B794  BA7C 0000               2580              CMP.W   #0,D5
0000B798  6E00 000A               2581              BGT     .SKPCLMPX
0000B79C  0446 0048               2582              SUB.W   #TILEPXS,D6
0000B7A0  CDFC FFFF               2583              MULS.W  #-1,D6
0000B7A4                          2584  .SKPCLMPX
0000B7A4  E08D                    2585              LSR.L   #8,D5
0000B7A6  E08D                    2586              LSR.L   #8,D5
0000B7A8  BA7C 0000               2587              CMP.W   #0,D5
0000B7AC  6E00 000A               2588              BGT     .SKPCLMPY
0000B7B0  0447 0048               2589              SUB.W   #TILEPXS,D7
0000B7B4  CFFC FFFF               2590              MULS.W  #-1,D7
0000B7B8                          2591  .SKPCLMPY  
0000B7B8  B27C 0000               2592              CMP.W   #0,D1
0000B7BC  6D00 0038               2593              BLT     .OUTMAPX
0000B7C0  B279 0000A226           2594              CMP.W   MTLWDTH,D1
0000B7C6  6E00 002E               2595              BGT     .OUTMAPX
0000B7CA                          2596              
0000B7CA                          2597               
0000B7CA  B47C 0000               2598              CMP.W   #0,D2
0000B7CE  6D00 0036               2599              BLT     .OUTMAPY
0000B7D2  B479 0000A224           2600              CMP.W   MTLHGHT,D2
0000B7D8  6E00 002C               2601              BGT     .OUTMAPY
0000B7DC                          2602              
0000B7DC                          2603              ; CHECK IF THERE IS A NON-AIR BLOCK IN TILEMAP
0000B7DC  C5F9 0000A226           2604              MULS.W  MTLWDTH,D2
0000B7E2  D441                    2605              ADD.W   D1,D2                   ; Get index in tilemap
0000B7E4  C5FC 0002               2606              MULS.W  #2,D2
0000B7E8  43F9 000083C0           2607              LEA.L   LVLCDAT,A1
0000B7EE  3A31 2000               2608              MOVE.W  0(A1,D2.W),D5           ; Tile in map
0000B7F2  6000 001A               2609              BRA .RTN
0000B7F6                          2610  .OUTMAPX
0000B7F6  3A3C FFFF               2611              MOVE.W  #-1,D5
0000B7FA  0446 0048               2612              SUB.W   #TILEPXS,D6
0000B7FE  CDFC FFFF               2613              MULS.W  #-1,D6
0000B802                          2614  
0000B802  6000 000A               2615              BRA .RTN
0000B806                          2616  .OUTMAPY
0000B806  3E3C 0000               2617              MOVE.W  #0,D7
0000B80A  3A3C 0000               2618              MOVE.W  #0,D5
0000B80E                          2619              
0000B80E                          2620  .RTN
0000B80E  225F                    2621              MOVE.L  (A7)+,A1
0000B810  4CDF 0007               2622              MOVEM.L (A7)+,D0-D2
0000B814  4E75                    2623              RTS
0000B816                          2624              
0000B816                          2625  
0000B816                          2626  ; --- CHECKS COLLISIONS OF PLAYER WITH ENEMIES
0000B816                          2627  ;     Input:
0000B816                          2628  ;           - None
0000B816                          2629  ;     Output:
0000B816                          2630  ;           - None
0000B816                          2631  ;     Modifies:
0000B816                          2632  ;           - STATE OF BUTTON
0000B816                          2633  ; ---------------------------------------------------------------------------
0000B816                          2634  CCOLENE
0000B816  48E7 FF00               2635              MOVEM.L D0-D7,-(A7)
0000B81A  48E7 00F8               2636              MOVEM.L A0-A4,-(A7)
0000B81E  4240                    2637              CLR.W   D0
0000B820  4241                    2638              CLR.W   D1
0000B822  4242                    2639              CLR.W   D2
0000B824  4243                    2640              CLR.W   D3
0000B826  4244                    2641              CLR.W   D4
0000B828  4245                    2642              CLR.W   D5
0000B82A  4246                    2643              CLR.W   D6
0000B82C  4247                    2644              CLR.W   D7
0000B82E                          2645              ; COMPUTE BOUNDING BOX OF PLAYER                  
0000B82E  3639 0000B278           2646              MOVE.W  PLPOSX,D3               ; GET X POSITION OF ENEMY
0000B834  0443 001A               2647              SUB.W   #(TILEPXS/2-10),D3        ; GET LEFT-TOP CORNER X POSITION
0000B838  3A03                    2648              MOVE.W  D3,D5
0000B83A  0645 0034               2649              ADD.W   #(TILEPXS-20),D5          ; GET RIGHT-BOTTON CORNER X POSITION
0000B83E                          2650              
0000B83E  3839 0000B27A           2651              MOVE.W PLPOSY,D4                ; GET Y POSITION OF PLAYER
0000B844  0444 0024               2652              SUB.W   #(TILEPXS/2),D4           ; GET LEFT-TOP CORNER Y POSITION
0000B848  3C04                    2653              MOVE.W  D4,D6
0000B84A  0646 0048               2654              ADD.W   #TILEPXS,D6             ; GET RIGHT-BOTTON CORNER Y POSITION
0000B84E                          2655              
0000B84E                          2656              ; ITERATE THROUGH ENEMY LIST
0000B84E  41F9 0000A4B2           2657              LEA.L   ENEMLIS,A0
0000B854  45F9 0000A458           2658              LEA.L   GOOMBA,A2
0000B85A  6000 00BE               2659              BRA     .ENNEXT
0000B85E                          2660  .ENLOOP
0000B85E  2258                    2661              MOVE.L  (A0)+,A1                ; GET POINTER OF ENEMY IN DYNAMIC MEMORY
0000B860  1029 0001               2662              MOVE.B  ENEMENBL(A1),D0         ; GET ENABLED/DISABLED PROPERTY VALUE
0000B864  B03C 0000               2663              CMP.B   #ENSTDSB,D0             ; CHECK IF IT'S DISABLED            
0000B868  6F00 00B0               2664              BLE     .ENNEXT                 ; IT'S DISABLED, GO TO THE NEXT ENEMY
0000B86C  4247                    2665              CLR.W   D7
0000B86E  1E29 0000               2666              MOVE.B  ENEMTYPE(A1),D7         ; GET TYPE OF ENEMY
0000B872  CEFC 0012               2667              MULU.W  #ENEMSZB,D7              ; GET OFFSET OF ENEMY TYPE IN MEMORY
0000B876  3229 0004               2668              MOVE.W  ENEMXPOS(A1),D1         ; GET X POSITION OF ENEMY
0000B87A  3429 0006               2669              MOVE.W  ENEMYPOS(A1),D2         ; GET Y POSITION OF ENEMY
0000B87E                          2670              
0000B87E                          2671              ; CHECK HEAD COLLISION
0000B87E                          2672              ; CHECK CENTER
0000B87E  0442 0038               2673              SUB.W   #(TILEPXS/2+20),D2       ; ADD OFFSET TO GET THE HEAD POINT OF ENEMY
0000B882  4EB8 7098               2674              JSR     CHKINBBO                ; CHECK IF IT'S INSIDE OF BOUNDING BOX
0000B886  B03C 0000               2675              CMP.B   #0,D0                   ; CHECK RETURN VALUE
0000B88A  6600 0026               2676              BNE     .COLHEA 
0000B88E                          2677              ; CHECK LEFT
0000B88E  0441 0010               2678              SUB.W   #TILEPXS/2-20,D1         ; CHECK LEFT
0000B892  4EB8 7098               2679              JSR     CHKINBBO                ; CHECK IF IT'S INSIDE OF BOUNDING BOX
0000B896  B03C 0000               2680              CMP.B   #0,D0                   ; CHECK RETURN VALUE
0000B89A  6600 0016               2681              BNE     .COLHEA 
0000B89E                          2682              ; CHECK RIGHT
0000B89E  0641 003E               2683              ADD.W   #TILEPXS-10,D1             ; CHECK RIGHT
0000B8A2  4EB8 7098               2684              JSR     CHKINBBO                ; CHECK IF IT'S INSIDE OF BOUNDING BOX
0000B8A6  B03C 0000               2685              CMP.B   #0,D0                   ; CHECK RETURN VALUE
0000B8AA  6600 0006               2686              BNE     .COLHEA 
0000B8AE  6000 000C               2687              BRA     .LEHCOL
0000B8B2                          2688  .COLHEA            
0000B8B2                          2689              ; IT'S COLLIDING ON HEAD
0000B8B2  2672 700A               2690              MOVE.L  ENTYPHBH(A2,D7.W),A3    ; GET POINTER TO SUBROUTINE OF BEHAVIOR WHEN COLLIDING ON HEAD
0000B8B6  4E93                    2691              JSR     (A3)                    ; CALL THAT SUBROUTINE
0000B8B8  6000 006E               2692              BRA     .ENSTOP                 ; LEAVE
0000B8BC                          2693  .LEHCOL        
0000B8BC  3039 0000B2A4           2694              MOVE.W  PLINVCB,D0              ; CHECK IF IT'S INVINCIBLE OR NOT
0000B8C2  B07C 0000               2695              CMP.W   #0,D0                   
0000B8C6  6E00 004E               2696              BGT     .INV
0000B8CA                          2697              ;BGT     .ENNEXT                 ; IT'S INVINCIBLE, CHECK NEXT ENEMY    
0000B8CA                          2698              ; CHECK VERTICAL LEFT COLLISION
0000B8CA  4242                    2699              CLR.W   D2
0000B8CC  3429 0006               2700              MOVE.W  ENEMYPOS(A1),D2         ; GET Y POSITION OF ENEMY
0000B8D0  3229 0004               2701              MOVE.W  ENEMXPOS(A1),D1         ; GET X POSITION OF ENEMY
0000B8D4                          2702              
0000B8D4                          2703              ; IT'S NOT COLLIDING VERTICALLY ON RIGHT, CHECK BOTTOM
0000B8D4  0642 0025               2704              ADD.W   #TILEPXS/2+1,D2         ; GET BOTTOM Y COORD OF ENEMY
0000B8D8  4EB8 7098               2705              JSR     CHKINBBO                ; CHECK IF IT'S INSIDE BOUNDING BOX
0000B8DC  B03C 0000               2706              CMP.B   #0,D0                   ; CHECK RETURN VALUE
0000B8E0  6600 002A               2707              BNE     .DMGPLAY                ; DAMAGE PLAYER
0000B8E4                          2708              
0000B8E4  3429 0006               2709              MOVE.W  ENEMYPOS(A1),D2         ; GET Y POSITION OF ENEMY
0000B8E8  0441 001F               2710              SUB.W   #TILEPXS/2-5,D1         ; GET LEFT X COORD
0000B8EC  4EB8 7098               2711              JSR     CHKINBBO                ; CHECK IF IT'S INSIDE BOUNDING BOX
0000B8F0  B03C 0000               2712              CMP.B   #0,D0                   ; CHECK RETURN VALUE
0000B8F4  6600 0016               2713              BNE     .DMGPLAY                ; DAMAGE PLAYER
0000B8F8                          2714              
0000B8F8                          2715              ; IT'S NOT COLLIDING VERTICALLY ON LEFT, CHECK RIGHT
0000B8F8  0641 003E               2716              ADD.W   #TILEPXS-10,D1          ; GET RIGHT X COORD
0000B8FC  4EB8 7098               2717              JSR     CHKINBBO                ; CHECK IF IT'S INSIDE BOUNDING BOX
0000B900  B03C 0000               2718              CMP.B   #0,D0                   ; CHECK RETURN VALUE
0000B904  6600 0006               2719              BNE     .DMGPLAY                ; DAMAGE PLAYER
0000B908                          2720              
0000B908                          2721              ; IT'S NOT COLLIDING IN ANY WAY, CHECK NEXT ENEMY
0000B908  6000 0010               2722              BRA     .ENNEXT
0000B90C                          2723  .DMGPLAY    
0000B90C                          2724              ; IT'S COLLIDING IN OTHER PART THAN HEAD
0000B90C  2672 700E               2725              MOVE.L  ENTYPCOL(A2,D7.W),A3    ; GET POINTER TO SUBROUTINE OF BEHAVIOR WHEN COLLIDING
0000B910  4E93                    2726              JSR     (A3)                    ; CALL THAT SUBROUTINE
0000B912  6000 0014               2727              BRA     .ENSTOP                 ; PLAYER HAS BEEN DAMAGED, STOP CHECKING FOR COLLISIONS            
0000B916                          2728  .INV
0000B916  387C 0003               2729              MOVE.W  #3,A4
0000B91A                          2730  .ENNEXT
0000B91A  2250                    2731              MOVE.L  (A0),A1
0000B91C  B2FC FFFF               2732              CMP     #$FFFFFFFF,A1           ; CHECK IF THE POINTER IS AN END POINT
0000B920  6700 0006               2733              BEQ     .ENSTOP                 ; THERE IS STILL AN ENEMY
0000B924  6000 FF38               2734              BRA     .ENLOOP
0000B928                          2735  .ENSTOP            
0000B928  4CDF 00FF               2736              MOVEM.L (A7)+,D0-D7
0000B92C  4CDF 1F00               2737              MOVEM.L (A7)+,A0-A4
0000B930  4E75                    2738              RTS
0000B932                          2739        
0000B932                          2740  
0000B932                          2741  
0000B932                          2742  
0000B932                          2743  
0000B932                          2744  
0000B932                          2745  
0000B932                          2746  
0000B932                          2747  -------------------- end include --------------------
0000B932                          2748              INCLUDE "DYNAMICMEMORY.X68"
0000B932                          2749  ; -- Dynamic memory system
0000B932  =00000040               2750  DMMBLKS     EQU     64                      ; Block size
0000B932  =0000012C               2751  DMMNBLK     EQU     300                     ; Number of blocks
0000B932                          2752  
0000B932                          2753  
0000B932                          2754  ; --- OCCUPIES THE FIRST FREE BLOCK IN DYNAMIC MEMORY
0000B932                          2755  ;     Input:
0000B932                          2756  ;           - None
0000B932                          2757  ;     Output:
0000B932                          2758  ;           - A0.L - Slot of data in dynamic memory
0000B932                          2759  ;     Modifies:
0000B932                          2760  ;           - Dynamic memory
0000B932                          2761  ; ---------------------------------------------------------------------------
0000B932                          2762  DMALLOC
0000B932  48E7 E000               2763              MOVEM.L D0-D2,-(A7)
0000B936  41F9 0000B96E           2764              LEA.L   DYNMEM,A0
0000B93C  303C 012B               2765              MOVE.W  #DMMNBLK-1,D0
0000B940  323C FFC0               2766              MOVE.W  #-DMMBLKS,D1
0000B944                          2767  .LOOP            
0000B944  0641 0040               2768              ADD.W   #DMMBLKS,D1
0000B948  3430 1000               2769              MOVE.W  0(A0,D1.W),D2
0000B94C  B47C 0000               2770              CMP.W   #0,D2 
0000B950  6600 0006               2771              BNE     .OUTLOOP                ; Check if that block is occupied      
0000B954  51C8 FFEE               2772              DBRA    D0,.LOOP
0000B958                          2773  .OUTLOOP            
0000B958                          2774              ; It's free
0000B958  D1C1                    2775              ADD.L   D1,A0
0000B95A  30BC 0000               2776              MOVE.W  #0,(A0)
0000B95E  5488                    2777              ADD.L   #2,A0
0000B960  4CDF 0007               2778              MOVEM.L (A7)+,D0-D2
0000B964  4E75                    2779              RTS
0000B966                          2780  
0000B966                          2781  
0000B966                          2782  ; --- FREES THE GIVEN BLOCK OF DYNAMIC MEMORY
0000B966                          2783  ;     Input:
0000B966                          2784  ;           - A0.L - Slot of data in dynamic memory
0000B966                          2785  ;     Output:
0000B966                          2786  ;           - None
0000B966                          2787  ;     Modifies:
0000B966                          2788  ;           - Dynamic memory
0000B966                          2789  ; ---------------------------------------------------------------------------
0000B966                          2790  DMFREE
0000B966  5548                    2791              SUBQ.W   #2,A0
0000B968  30BC 0001               2792              MOVE.W  #1,(A0)
0000B96C  4E75                    2793              RTS
0000B96E                          2794  
0000B96E                          2795  DYNMEM      DS.B    DMMBLKS*DMMNBLK        ; Dynamic memory space
0001046E                          2796              DS.W    0                      ; In case it's not power of 2
0001046E                          2797  
0001046E                          2798  
0001046E                          2799  -------------------- end include --------------------
0001046E                          2800              INCLUDE "SYSTEM.X68"
0001046E                          2801  ; -----------------------------------------------------------------------------
0001046E                          2802  SYSINIT
0001046E                          2803  ; INITIALIZES THE SYSTEM
0001046E                          2804  ; INPUT    - NONE
0001046E                          2805  ; OUTPUT   - NONE
0001046E                          2806  ; MODIFIES - NONE
0001046E                          2807  ; -----------------------------------------------------------------------------
0001046E  205F                    2808              MOVE.L  (A7)+,A0                ; GET RETURN ADDRESS
00010470  4EB9 0001051C           2809              JSR     KBDINIT                 ; INIT KEYBOARD
00010476  4EB9 00010484           2810              JSR     SCRINIT                 ; INIT SCREEN
0001047C  027C DFFF               2811              ANDI.W  #$DFFF,SR               ; SWITCH TO USER
00010480  2F08                    2812              MOVE.L  A0,-(A7)                ; PUT RETURN ADDRESS
00010482  4E75                    2813              RTS
00010484                          2814  
00010484                          2815  
00010484                          2816  ; -----------------------------------------------------------------------------
00010484                          2817  SCRINIT
00010484                          2818  ; INITIALIZES THE SCREEN, SCREEN-RELATED INTERRUPT AND VARS.
00010484                          2819  ; INPUT    - NONE
00010484                          2820  ; OUTPUT   - NONE
00010484                          2821  ; MODIFIES - D0,D1,D2,D3
00010484                          2822  ; -----------------------------------------------------------------------------
00010484  007C 0700               2823              ORI.W   #$0700,SR               ; DISABLE ALL INT
00010488  21FC 00010502 0084      2824              MOVE.L  #SCRUPD,($80+WDUTRAP*4) ; INSTALL TRAP
00010490  223C 040002D0           2825              MOVE.L  #WDWIDTH<<16|WDHEIGHT,D1 ; SET RESOLUTION
00010496  103C 0021               2826              MOVE.B  #33,D0
0001049A  4E4F                    2827              TRAP    #15
0001049C  7201                    2828              MOVE.L  #1,D1                   ; SET WINDOWED MODE
0001049E  4E4F                    2829              TRAP    #15
000104A0  323C FF00               2830              MOVE.W  #$FF00,D1               ; CLEAR VISIBLE BUFFER
000104A4  103C 000B               2831              MOVE.B  #11,D0
000104A8  4E4F                    2832              TRAP    #15
000104AA  123C 0011               2833              MOVE.B  #17,D1                  ; ENABLE DOUBLE BUFFER
000104AE  103C 005C               2834              MOVE.B  #92,D0
000104B2  4E4F                    2835              TRAP    #15
000104B4  323C FF00               2836              MOVE.W  #$FF00,D1               ; CLEAR HIDDEN BUFFER
000104B8  103C 000B               2837              MOVE.B  #11,D0
000104BC  4E4F                    2838              TRAP    #15
000104BE  21FC 000104F4 0064      2839              MOVE.L  #SCRISR,($60+WDIRQ*4)  ; SET EXCEPTION VECTOR
000104C6  123C 0005               2840              MOVE.B  #5,D1                   ; ENABLE EXCEPTION PROCESSING
000104CA  103C 0020               2841              MOVE.B  #32,D0
000104CE  4E4F                    2842              TRAP    #15
000104D0  143C 0081               2843              MOVE.B  #%10000000|WDIRQ,D2    ; ENABLE AUTO-IRQ
000104D4  163C 0021               2844              MOVE.B  #WDRTIME,D3
000104D8  123C 0006               2845              MOVE.B  #6,D1
000104DC  103C 0020               2846              MOVE.B  #32,D0
000104E0  4E4F                    2847              TRAP    #15
000104E2  4239 0000AD11           2848              CLR.B   (SCRINTCT)              ; PREPARE INTERRUPT FLAG
000104E8  4239 0000AD12           2849              CLR.B   (SCRCYCCT)              ; PREPARE CYCLE COUNTER
000104EE  027C F8FF               2850              ANDI.W  #$F8FF,SR               ; ENABLE INTS
000104F2                          2851  
000104F2  4E75                    2852              RTS
000104F4                          2853  
000104F4                          2854  ; -----------------------------------------------------------------------------
000104F4                          2855  SCRISR
000104F4                          2856  ; SCREEN TIMER ISR. INCREASES THE INTERRUPT COUNTER AND UPDATES DOUBLE BUFFER.
000104F4                          2857  ; INPUT    - NONE
000104F4                          2858  ; OUTPUT   - NONE
000104F4                          2859  ; MODIFIES - NONE
000104F4                          2860  ; -----------------------------------------------------------------------------
000104F4  5239 0000AD11           2861              ADDQ.B  #1,(SCRINTCT)           ; UPDATE INT FLAG/COUNTER
000104FA  5239 0000AD12           2862              ADDQ.B  #1,(SCRCYCCT)           ; UPDATE CYCLE COUNTER
00010500  4E73                    2863              RTE
00010502                          2864  
00010502                          2865  
00010502                          2866  ; -----------------------------------------------------------------------------
00010502                          2867  SCRUPD
00010502                          2868  ; TRAP SERVICE ROUTINE IN CHARGE OF VISUALIZING CURRENT FRAME AND CLEARING
00010502                          2869  ; BUFFER FOR THE NEXT ONE.
00010502                          2870  ; INPUT    - NONE
00010502                          2871  ; OUTPUT   - NONE
00010502                          2872  ; MODIFIES - NONE
00010502                          2873  ; -----------------------------------------------------------------------------
00010502  48A7 C000               2874              MOVEM.W D0-D1,-(A7)
00010506  103C 005E               2875              MOVE.B  #94,D0                  ; UPDATE DOUBLE BUFFER
0001050A  4E4F                    2876              TRAP    #15
0001050C  323C FF00               2877              MOVE.W  #$FF00,D1               ; CLEAR HIDDEN BUFFER
00010510  103C 000B               2878              MOVE.B  #11,D0
00010514  4E4F                    2879              TRAP    #15
00010516  4C9F 0003               2880              MOVEM.W (A7)+,D0-D1
0001051A  4E73                    2881              RTE
0001051C                          2882  
0001051C                          2883  
0001051C                          2884  ; -----------------------------------------------------------------------------
0001051C                          2885  KBDINIT
0001051C                          2886  ; INITIALIZES THE SYSTEM VARIABLES KBDSYS AND KBDVAL
0001051C                          2887  ; INPUT    - NONE
0001051C                          2888  ; OUTPUT   - NONE
0001051C                          2889  ; MODIFIES - NONE
0001051C                          2890  ; -----------------------------------------------------------------------------
0001051C  4239 0000AD0A           2891              CLR.B   (KBDVAL)                ; INIT VARS
00010522  4239 0000AD0B           2892              CLR.B   (KBDEDGE)
00010528  21FC 00010532 0080      2893              MOVE.L  #KBDREAD,($80+KBUTRAP*4) ; INSTALL
00010530  4E75                    2894              RTS
00010532                          2895              
00010532                          2896  ; -----------------------------------------------------------------------------
00010532                          2897  KBDREAD
00010532                          2898  ; TRAP SERVICE ROUTINE.
00010532                          2899  ; UPDATES THE SYSTEM VARIABLES KBDEDGE AND KBDVAL ACCORDING TO THE BITFIELD
00010532                          2900  ; DESCRIBED IN SYSCONST. KBDVAL HOLDS THE CURRENT VALUES AND KBDEFGE HOLDS
00010532                          2901  ; RISING EDGES FROM PREVIOUS CALL TO THE CURRENT ONE.
00010532                          2902  ; INPUT    - NONE
00010532                          2903  ; OUTPUT   - (KBDVAL) AND (KBDEDGE)
00010532                          2904  ; MODIFIES - NONE
00010532                          2905  ; -----------------------------------------------------------------------------
00010532  48E7 F000               2906              MOVEM.L D0-D3,-(A7)
00010536  103C 0013               2907              MOVE.B  #19,D0
0001053A  223C 44415357           2908              MOVE.L  #KEYRGHT<<24+KEYLEFT<<16+KEYDOWN<<8+KEYUP,D1
00010540  4E4F                    2909              TRAP    #15
00010542  6100 0042               2910              BSR     .STORE                  ; STORE UP, DOWN, LEFT AND RIGHT
00010546  1039 0000AD0A           2911              MOVE.B  (KBDVAL),D0             ; COMPUTE EDGE.
0001054C  4600                    2912              NOT.B   D0                      ; EDGE=NOT(PREVIOUS) AND CURRENT.
0001054E  C002                    2913              AND.B   D2,D0
00010550  13C2 0000AD0A           2914              MOVE.B  D2,(KBDVAL)             ; STORE VALUES (PRESS AND EDGE)
00010556  13C0 0000AD0B           2915              MOVE.B  D0,(KBDEDGE)
0001055C                          2916              
0001055C                          2917              ; READ THE MOUSE POSITION AND INPUT
0001055C  123C 0000               2918              MOVE.B  #0,D1                   ; GET CURRENT MOUSE STATE
00010560  303C 003D               2919              MOVE.W  #61,D0                  ; READ MOUSE STATE
00010564  4E4F                    2920              TRAP    #15
00010566  33C1 0000AD0C           2921              MOVE.W  D1,MOUXPOS              ; STORE MOUSE X POSITION
0001056C  E089                    2922              LSR.L   #8,D1                   ; SHIFT BYTE TO RIGHT
0001056E  E089                    2923              LSR.L   #8,D1                   ; SHIFT BYTE TO RIGHT
00010570  33C1 0000AD0E           2924              MOVE.W  D1,MOUYPOS              ; STORE MOUSE Y POSITION
00010576  C03C 0001               2925              AND.B   #$01,D0                 ; READ ONLY LEFT CLICK
0001057A  13C0 0000AD10           2926              MOVE.B  D0,MOUBSTA              ; STORE CURRENT NEEDED MOUSE STATE   
00010580  4CDF 000F               2927              MOVEM.L (A7)+,D0-D3
00010584  4E73                    2928              RTE
00010586                          2929  
00010586  363C 0003               2930  .STORE      MOVE.W  #3,D3                   ; TRANSLATES THE 8-BIT ENCODING
0001058A  E189                    2931  .LOOP       LSL.L   #8,D1                   ; OF TRAP #15 TASK 19 INTO A 1-BIT
0001058C  E312                    2932              ROXL.B  #1,D2                   ; PER KEYPRESS ENCODING
0001058E  51CB FFFA               2933              DBRA.W  D3,.LOOP
00010592  4E75                    2934              RTS
00010594                          2935  
00010594                          2936  
00010594                          2937  ; -----------------------------------------------------------------------------
00010594                          2938  STRINIT
00010594                          2939  ; SETS THE FONT PROPERTIES
00010594                          2940  ; INPUT    - NONE
00010594                          2941  ; OUTPUT   - NONE
00010594                          2942  ; MODIFIES - NONE
00010594                          2943  ; -----------------------------------------------------------------------------
00010594  48E7 F000               2944              MOVEM.L D0-D3,-(A7)
00010598  48E7 0080               2945              MOVEM.L A0,-(A7)
0001059C                          2946                         
0001059C                          2947              ; SET FONT
0001059C  223C 00FFFFFF           2948              MOVE.L  #$00FFFFFF,D1           ; SET COLOR
000105A2                          2949              
000105A2  7401                    2950              MOVE.L  #1,D2                   ; SET BOLD
000105A4                          2951              
000105A4  7624                    2952              MOVE.L  #18*2,D3                ; SET SIZE IN POINTS
000105A6  E18B                    2953              LSL.L   #8,D3                   
000105A8  E18B                    2954              LSL.L   #8,D3                   ; GET IN HIGH WORD, LOW BYTE                  
000105AA  8483                    2955              OR.L    D3,D2                   ; WRITE IT ON D2
000105AC                          2956              
000105AC  7601                    2957              MOVE.L  #1,D3                   ; FONT: FIXEDSYS
000105AE  E18B                    2958              LSL.L   #8,D3                   
000105B0  E18B                    2959              LSL.L   #8,D3
000105B2  E18B                    2960              LSL.L   #8,D3                   ; GET IN HIGH WORD, HIGH BYTE         
000105B4  8483                    2961              OR.L    D3,D2                   ; WRITE IT ON D2
000105B6                          2962              
000105B6  303C 0015               2963              MOVE.W  #21,D0
000105BA  4E4F                    2964              TRAP    #15
000105BC                          2965              
000105BC                          2966              
000105BC                          2967              ; LEAVE SUBROUTINE
000105BC  4CDF 0100               2968              MOVEM.L (A7)+,A0
000105C0  4CDF 000F               2969              MOVEM.L (A7)+,D0-D3
000105C4  4E75                    2970              RTS
000105C6                          2971  
000105C6                          2972  
000105C6                          2973  
000105C6                          2974  
000105C6                          2975  
000105C6                          2976  
000105C6                          2977  
000105C6                          2978  
000105C6                          2979  
000105C6                          2980  
000105C6                          2981  -------------------- end include --------------------
000105C6                          2982  ; ------ Initialization -----------------------------------
000105C6                          2983  START:               
000105C6  4EB9 0001046E           2984              JSR     SYSINIT                 ; INIT SYSTEM
000105CC  4EB9 00010594           2985              JSR     STRINIT
000105D2                          2986              ; INIT GAME STATE
000105D2                          2987  ; ------ Main Game Loop -----------------------------------
000105D2                          2988  .LOOP:
000105D2                          2989              ; GET CURRENT TIME
000105D2  303C 0008               2990              MOVE.W  #8,D0
000105D6  4E4F                    2991              TRAP    #15
000105D8  9282                    2992              SUB.L   D2,D1                   ; GET ELAPSED TIME
000105DA  23C2 0000B2A6           2993              MOVE.L  D2,DELTATIME
000105E0  2401                    2994              MOVE.L  D1,D2                   ; SAVE CURRENT TIME IN D2
000105E2                          2995  
000105E2                          2996              ; READ INPUT
000105E2  4E40                    2997              TRAP    #KBUTRAP
000105E4                          2998              ; UPDATE STATE
000105E4  4EB9 0000B2AA           2999              JSR     STAUPD
000105EA                          3000              
000105EA                          3001              ; DRAW ON WINDOW
000105EA  4A39 0000AD11           3002  .WINT       TST.B   (SCRINTCT)              ; WAIT FOR INTERRUPT
000105F0  67F8                    3003              BEQ     .WINT
000105F2  4239 0000AD11           3004              CLR.B   (SCRINTCT)
000105F8                          3005              
000105F8  4EB9 0000AEE6           3006              JSR     RENDER                  ; PLOT DEPENDING ON THE STATE
000105FE  4E41                    3007              TRAP    #WDUTRAP                ; SHOW GRAPHICS
00010600                          3008  
00010600  60D0                    3009              BRA     .LOOP
00010602                          3010  
00010602                          3011  
00010602                          3012  EXIT            
00010602  FFFF FFFF               3013      SIMHALT             ; halt simulator
00010606                          3014      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDPROP             E
ANIMACTI            7002
ANIMCOIN            7014
ANIMFLAG            7026
ANIMFLAGTOP         702C
ANIMFRAME           7000
ANIMGOOMBA          7004
ANIMMUSHROOM        700E
ANIMPLIDLE          707A
ANIMPLINV           7086
ANIMPLMSIDLE        7080
ANIMPLMSWALKLEFT    7068
ANIMPLMSWALKRIGHT   7056
ANIMPLWALKLEFT      7044
ANIMPLWALKRIGHT     7032
ANIMTIME            F
APPGRAV             AC3A
BEHAVSR             A
BRKTILE             A41E
BTNSTACL            2
BTNSTAHO            1
BTNSTANH            0
CALCCENTERSTR       70BE
CAMUPD              B39A
CAMUPD:SKIP         B3D4
CAMX                B272
CCOLENE             B816
CCOLENE:COLHEA      B8B2
CCOLENE:DMGPLAY     B90C
CCOLENE:ENLOOP      B85E
CCOLENE:ENNEXT      B91A
CCOLENE:ENSTOP      B928
CCOLENE:INV         B916
CCOLENE:LEHCOL      B8BC
CHKINBBO            7098
CHKINBBO:OUT        70B8
CHKINBBO:RTN        70BC
CHKMOUBUT           AD7C
CHKMOUBUT:NOTPRESSED  ADCE
CHKMOUBUT:OUTSIDE   ADC4
CHKMOUBUT:RTN       ADEE
CHKMOUBUT:UNCLICKED  ADE2
CLVLLOA             B276
COIN                A47C
COINCOL             AB48
COUNT_LOOP          70CA
DAT1_01             7220
DAT1_02             8162
DELTATIME           B2A6
DELTATME            AD14
DMALLOC             B932
DMALLOC:LOOP        B944
DMALLOC:OUTLOOP     B958
DMFREE              B966
DMMBLKS             40
DMMNBLK             12C
DRAWIMG             70EA
DRAWIMG:LEAVE       714E
DRAWIMG:LOOP        70FA
DRAWIMG:NEXT        712E
DRAWIMG:NEXTYCO     713C
DYNMEM              B96E
ENBDIST             C
ENCKCOL             AC4C
ENCKCOL:OUTMAPX     ACEA
ENCKCOL:OUTMAPY     ACFA
ENCKCOL:RTN         AD02
ENCKCOL:SKPCLMPX    AC98
ENCKCOL:SKPCLMPY    ACAC
END_COUNT           70D8
ENEHCOL             AB06
ENEMCOUN            64
ENEMENBL            1
ENEMLIS             A4B2
ENEMMDIR            2
ENEMSIZE            4
ENEMSZB             12
ENEMTYPE            0
ENEMUPD             B324
ENEMUPD:DISABL      B36A
ENEMUPD:ENLOOP      B340
ENEMUPD:ENNEXT      B382
ENEMUPD:ENSTOP      B390
ENEMXPOS            4
ENEMYFCE            8
ENEMYPOS            6
ENEPCOL             AB16
ENSTDSB             0
ENSTDTH             FFFFFFFF
ENSTENB             1
ENTYPCLR            2
ENTYPCOL            E
ENTYPHBH            A
ENTYPSBH            6
ENTYPXSP            0
EXIT                10602
EXITBUT             AD5A
FIREFLR             7096
FLAG                A48E
FLAGCOL             AB56
FLAGTOP             A4A0
GAMESTA             B274
GETIMGOFANIM        7182
GMBASTU             AB60
GMBASTU:COLVERT     AC1C
GMBASTU:DIE         AC2C
GMBASTU:GRONDD      ABD0
GMBASTU:MOVERT      ABE0
GMBASTU:MOVHOR      AB6C
GMBASTU:RTN         AC32
GOOMBA              A458
GRAVITY             4
IMGCOINFOUR         1000
IMGCOINONE          1400
IMGCOINTHREE        1800
IMGCOINTWO          1C00
IMGFLAGSTICK        2000
IMGFLAGTOP          2400
IMGGOOMBALFEET      2800
IMGGOOMBARFEET      2C00
IMGMARIOINVENCIBLE  3000
IMGMARIOSMALL       3400
IMGMARIOSMALLLEFT   3800
IMGMARIOWALKONE     3C00
IMGMARIOWALKONELEFT  4000
IMGMARIOWALKTHREE   4400
IMGMARIOWALKTHREELEFT  4800
IMGMARIOWALKTWO     4C00
IMGMARIOWALKTWOLEFT  5000
IMGMSWALKLEFTONE    6C00
IMGMSWALKLEFTTHREE  6400
IMGMSWALKLEFTTWO    6800
IMGMSWALKONE        6000
IMGMSWALKTHREE      5800
IMGMSWALKTWO        5C00
IMGMUSHROOMPWUP     5400
INVCTIM             BB8
ISTLENT             8
JMPFRCE             34
KBDEDGE             AD0B
KBDINIT             1051C
KBDREAD             10532
KBDREAD:LOOP        1058A
KBDREAD:STORE       10586
KBDVAL              AD0A
KBUTRAP             0
KDWBMAP             1
KDWMSK              2
KEYDOWN             53
KEYLEFT             41
KEYRGHT             44
KEYUP               57
KLTBMAP             2
KLTMSK              4
KRTBMAP             3
KRTMSK              8
KUPBMAP             0
KUPMSK              1
LOADLVL             B3DA
LOADLVL:LVLOOP      B432
LOADLVL:LVNEXT      B46E
LVLADDR             7218
LVLCDAT             83C0
MAPPXSZ             A228
MAXMH               A
MAXMW               185
MAXYDIE             D
MLBUMAP             0
MLBUMSK             1
MOUBSTA             AD10
MOUXPOS             AD0C
MOUYPOS             AD0E
MRMPWID             1
MROMCOL             AB2E
MROMPWUP            7090
MTLHGHT             A224
MTLWDTH             A226
MUSHROOM            A46A
NOBEHAV             AB46
NONEPWI             0
NONEPWUP            708C
NTILESC             F
OFFBCST             4
OFFBEDC             0
OFFBSTR             1E
OFFCLSU             1A
OFFECLR             4
OFFFCLC             E
OFFFCLR             0
OFFFHOC             A
OFFFNHO             6
OFFLTCX             12
OFFLTCY             14
OFFNUMB             1E
OFFRBCX             16
OFFRBCY             18
PLAPWUP             B2A2
PLCKCOL             B758
PLCKCOL:OUTMAPX     B7F6
PLCKCOL:OUTMAPY     B806
PLCKCOL:RTN         B80E
PLCKCOL:SKPCLMPX    B7A4
PLCKCOL:SKPCLMPY    B7B8
PLCOIN              B29A
PLFCEY              B29C
PLGNDD              B29E
PLHEALTH            B2A0
PLINVCB             B2A4
PLMODI              B27C
PLPOSX              B278
PLPOSY              B27A
PLSPEED             14
PLSPRID             B286
PLSPRIV             B28A
PLSPRL1             B282
PLSPRMS             B28E
PLSPRMSWL           B296
PLSPRMSWR           B292
PLSPRR1             B27E
PRUPD               B486
PRUPD:CHKGDD        B6B0
PRUPD:CHKY          B5EA
PRUPD:COLTOP        B670
PRUPD:CONT          B514
PRUPD:CONT1         B4B0
PRUPD:CONT2         B4CE
PRUPD:CONT5         B580
PRUPD:FORCE0        B538
PRUPD:FORCEN        B548
PRUPD:FORCEP        B540
PRUPD:GROUNDED      B72A
PRUPD:KDOWN         B4F8
PRUPD:KLEFT         B500
PRUPD:KRGHT         B50A
PRUPD:RTN           B74C
PRUPD:SKIPFC        B54C
PRUPD:SKIPG         B51A
PRUPD:SKPMOVX       B5E0
PWUPNOB             7094
PXPERIM             10
PXSCALE             4
RENDER              AEE6
RENDERBUTTON        ADF8
RETURN              AEDC
RETURNBUT           AD38
RNDRDTHS            AFC8
RNDRGAM             B028
RNDRGAM:ENLOOP      B1CC
RNDRGAM:ENNEXT      B218
RNDRGAM:ENSTOP      B226
RNDRGAM:IDLE        B132
RNDRGAM:INV         B158
RNDRGAM:LEFTDIR     B128
RNDRGAM:LEFTDIR2    B188
RNDRGAM:LOOP        B08A
RNDRGAM:PWUP        B162
RNDRGAM:SKIP        B0E2
RNDRGAM:SKIP2       B0EA
RNDRGAM:SKIPDIR     B138
RNDRGAM:STCLR       B18E
RNDRSTMEN           AF36
RNDRWINS            AFF8
RTN                 AF2C
SCRCYCCT            AD12
SCRINIT             10484
SCRINTCT            AD11
SCRISR              104F4
SCRUPD              10502
SPAWNER             A37E
SPAWNER:FNDNXT      A3BE
SPAWNER:RTN         A408
SPEEDMULTIPLIER     4
SPWNTOP             A2CA
SPWNTOP:FNDNXT      A310
SPWNTOP:RTN         A35C
START               105C6
START:LOOP          105D2
START:WINT          105EA
STARTBUT            AD16
STARTGAME           AE5E
STARTGAME:ENLOOP    AEBC
STARTGAME:ENNEXT    AECA
STARTGAME:ENSTOP    AED6
STAUPD              B2AA
STAUPD:RTN          B31A
STAUPD:STA0         B2EC
STAUPD:STA1         B2F0
STAUPD:STA2         B2FA
STAUPD:STA3         B316
STBUTHT             48
STBUTWD             CC
STRCOIN             71A0
STRCONTROLS1        71C0
STRCONTROLS2        71CA
STRCONTROLS3        71D4
STRCONTROLS4        71E2
STRDEATH            71F2
STREXIT             720E
STRGAMETITLE1       71AE
STRGAMETITLE2       71B4
STRINIT             10594
STRNCOI             7214
STRRETURN           7206
STRSTARTBUTTON      71A8
STRWINNER           71FC
SYSINIT             1046E
TENOBEH             0
TEONCOL             1
TEONLOA             2
TILE1               A22A
TILE10              A2BA
TILE2               A23A
TILE3               A24A
TILE4               A25A
TILE5               A26A
TILE6               A27A
TILE7               A28A
TILE8               A29A
TILE9               A2AA
TILEPXS             48
TILESZB             10
UPDANIMFRAME        7158
UPDANIMFRAME:NEXTFRAME  7172
UPDANIMFRAME:RTN    717C
WDFPS               1E
WDHEIGHT            2D0
WDIRQ               1
WDRTIME             21
WDUTRAP             1
WDWIDTH             400
